// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: room_downsync_frame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace shared {

  /// <summary>Holder for reflection information generated from room_downsync_frame.proto</summary>
  public static partial class RoomDownsyncFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for room_downsync_frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomDownsyncFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlyb29tX2Rvd25zeW5jX2ZyYW1lLnByb3RvEgZzaGFyZWQiwAoKEUNoYXJh",
            "Y3RlckRvd25zeW5jEgoKAmlkGAEgASgFEhQKDHZpcnR1YWxHcmlkWBgCIAEo",
            "BRIUCgx2aXJ0dWFsR3JpZFkYAyABKAUSDAoEZGlyWBgEIAEoBRIMCgRkaXJZ",
            "GAUgASgFEgwKBHZlbFgYBiABKAUSDAoEdmVsWRgHIAEoBRINCgVzcGVlZBgI",
            "IAEoBRIRCglzcGVjaWVzSWQYCSABKAUSEQoJam9pbkluZGV4GAogASgFEhcK",
            "D2ZyYW1lc1RvUmVjb3ZlchgLIAEoBRIfChdmcmFtZXNDYXB0dXJlZEJ5SW5l",
            "cnRpYRgMIAEoBRIbChNjYXB0dXJlZEJ5UGF0cm9sQ3VlGA0gASgIEhkKEWZy",
            "YW1lc0luUGF0cm9sQ3VlGA4gASgFEhAKCGJlYXRzQ250GA8gASgFEhEKCWJl",
            "YXRlbkNudBgQIAEoBRIKCgJocBgRIAEoBRINCgVtYXhIcBgSIAEoBRIKCgJt",
            "cBgTIAEoBRINCgVtYXhNcBgUIAEoBRIuCg5jaGFyYWN0ZXJTdGF0ZRgWIAEo",
            "DjIWLnNoYXJlZC5DaGFyYWN0ZXJTdGF0ZRIXCg9mcmFtZXNJbkNoU3RhdGUY",
            "FyABKAUSDQoFaW5BaXIYGCABKAgSFQoNanVtcFRyaWdnZXJlZBgZIAEoCBIO",
            "CgZvbldhbGwYGiABKAgSEwoLb25XYWxsTm9ybVgYGyABKAUSEwoLb25XYWxs",
            "Tm9ybVkYHCABKAUSEwoLb21pdEdyYXZpdHkYHSABKAgSGAoQb21pdFNvZnRQ",
            "dXNoYmFjaxgeIAEoCBIaChJ3YWl2aW5nUGF0cm9sQ3VlSWQYHyABKAUSIAoY",
            "d2FpdmluZ1Nwb250YW5lb3VzUGF0cm9sGCAgASgIEhsKE3Jldml2YWxWaXJ0",
            "dWFsR3JpZFgYISABKAUSGwoTcmV2aXZhbFZpcnR1YWxHcmlkWRgiIAEoBRIT",
            "CgtyZXZpdmFsRGlyWBgjIAEoBRITCgtyZXZpdmFsRGlyWRgkIAEoBRIPCgdv",
            "blNsb3BlGCUgASgIEhQKDGZyaWN0aW9uVmVsWBgmIAEoBRIXCg9mb3JjZWRD",
            "cm91Y2hpbmcYJyABKAgSGQoRc2xpcEp1bXBUcmlnZ2VyZWQYKCABKAgSKAog",
            "cHJpbWFyaWx5T25TbGlwcGFibGVIYXJkUHVzaGJhY2sYKSABKAgSGAoQcHJl",
            "dldhc0Nyb3VjaGluZxgqIAEoCBIQCghuZXdCaXJ0aBgrIAEoCBIgChhsb3dl",
            "clBhcnRGcmFtZXNJbkNoU3RhdGUYLCABKAUSEwoLanVtcFN0YXJ0ZWQYLSAB",
            "KAgSGQoRZnJhbWVzVG9TdGFydEp1bXAYLiABKAUSDQoEbmFtZRjlByABKAkS",
            "FAoLZGlzcGxheU5hbWUY5gcgASgJEg8KBmF2YXRhchjnByABKAkSFgoNYWN0",
            "aXZlU2tpbGxJZBiACCABKAUSFwoOYWN0aXZlU2tpbGxIaXQYgQggASgFEhkK",
            "EGZyYW1lc0ludmluc2libGUYggggASgFEhUKDGJ1bGxldFRlYW1JZBiDCCAB",
            "KAUSGgoRY2hDb2xsaXNpb25UZWFtSWQYhAggASgFEhoKEWNvbGxpc2lvblR5",
            "cGVNYXNrGIUIIAEoBBIfCghidWZmTGlzdBiGCCADKAsyDC5zaGFyZWQuQnVm",
            "ZhIjCgpkZWJ1ZmZMaXN0GIcIIAMoCzIOLnNoYXJlZC5EZWJ1ZmYSJQoJaW52",
            "ZW50b3J5GIgIIAEoCzIRLnNoYXJlZC5JbnZlbnRvcnkidwoRSW5wdXRGcmFt",
            "ZURlY29kZWQSCgoCZHgYASABKAUSCgoCZHkYAiABKAUSEQoJYnRuQUxldmVs",
            "GAMgASgFEhEKCWJ0bkJMZXZlbBgEIAEoBRIRCglidG5DTGV2ZWwYBSABKAUS",
            "EQoJYnRuRExldmVsGAYgASgFIkwKEElucHV0RnJhbWVVcHN5bmMSFAoMaW5w",
            "dXRGcmFtZUlkGAEgASgFEg8KB2VuY29kZWQYAiABKAQSEQoJam9pbkluZGV4",
            "GAMgASgFIlQKEklucHV0RnJhbWVEb3duc3luYxIUCgxpbnB1dEZyYW1lSWQY",
            "ASABKAUSEQoJaW5wdXRMaXN0GAIgAygEEhUKDWNvbmZpcm1lZExpc3QYAyAB",
            "KAQitgEKBVdzUmVxEhAKCHBsYXllcklkGAEgASgFEgsKA2FjdBgCIAEoBRIR",
            "Cglqb2luSW5kZXgYAyABKAUSFQoNYWNraW5nRnJhbWVJZBgEIAEoBRIaChJh",
            "Y2tpbmdJbnB1dEZyYW1lSWQYBSABKAUSDwoHYXV0aEtleRgGIAEoBRI3ChVp",
            "bnB1dEZyYW1lVXBzeW5jQmF0Y2gYByADKAsyGC5zaGFyZWQuSW5wdXRGcmFt",
            "ZVVwc3luYyK5AQoTSW5wdXRCdWZmZXJTbmFwc2hvdBIYChByZWZSZW5kZXJG",
            "cmFtZUlkGAEgASgFEhcKD3VuY29uZmlybWVkTWFzaxgCIAEoBBI9Chl0b1Nl",
            "bmRJbnB1dEZyYW1lRG93bnN5bmNzGAMgAygLMhouc2hhcmVkLklucHV0RnJh",
            "bWVEb3duc3luYxIZChFzaG91bGRGb3JjZVJlc3luYxgEIAEoCBIVCg1wZWVy",
            "Sm9pbkluZGV4GAUgASgFItMBCglQYXRyb2xDdWUSCgoCaWQYASABKAUSDQoF",
            "ZmxBY3QYAiABKAQSDQoFZnJBY3QYAyABKAQSFwoPZmxDYXB0dXJlRnJhbWVz",
            "GAQgASgEEhcKD2ZyQ2FwdHVyZUZyYW1lcxgFIAEoBBINCgVmZEFjdBgGIAEo",
            "BBINCgVmdUFjdBgHIAEoBBIXCg9mZENhcHR1cmVGcmFtZXMYCCABKAQSFwoP",
            "ZnVDYXB0dXJlRnJhbWVzGAkgASgEEhoKEWNvbGxpc2lvblR5cGVNYXNrGIUI",
            "IAEoBCJUCglWaXNpb25Cb3gSEwoLYm90dG9tTGVmdFgYASABKAUSEwoLYm90",
            "dG9tTGVmdFkYAiABKAUSDQoFd2lkdGgYAyABKAUSDgoGaGVpZ2h0GAQgASgF",
            "Ip8BCglWZnhDb25maWcSEQoJc3BlY2llc0lkGAEgASgFEikKCm1vdGlvblR5",
            "cGUYAiABKA4yFS5zaGFyZWQuVmZ4TW90aW9uVHlwZRItCgxkdXJhdGlvblR5",
            "cGUYAyABKA4yFy5zaGFyZWQuVmZ4RHVyYXRpb25UeXBlEhMKC29uQ2hhcmFj",
            "dGVyGAQgASgIEhAKCG9uQnVsbGV0GAUgASgIIoIJCgxCdWxsZXRDb25maWcS",
            "FQoNc3RhcnR1cEZyYW1lcxgBIAEoBRIaChJjYW5jZWxsYWJsZVN0RnJhbWUY",
            "AiABKAUSGgoSY2FuY2VsbGFibGVFZEZyYW1lGAMgASgFEhQKDGFjdGl2ZUZy",
            "YW1lcxgEIAEoBRIVCg1oaXRTdHVuRnJhbWVzGAUgASgFEhcKD2Jsb2NrU3R1",
            "bkZyYW1lcxgGIAEoBRIUCgxwdXNoYmFja1ZlbFgYByABKAUSFAoMcHVzaGJh",
            "Y2tWZWxZGAggASgFEg4KBmRhbWFnZRgJIAEoBRIUCgxzZWxmTG9ja1ZlbFgY",
            "CiABKAUSFAoMc2VsZkxvY2tWZWxZGAsgASgFEhUKDWhpdGJveE9mZnNldFgY",
            "DCABKAUSFQoNaGl0Ym94T2Zmc2V0WRgNIAEoBRITCgtoaXRib3hTaXplWBgO",
            "IAEoBRITCgtoaXRib3hTaXplWRgPIAEoBRIOCgZibG93VXAYECABKAgSEQoJ",
            "c3BlY2llc0lkGBEgASgFEhcKD2V4cGxvc2lvbkZyYW1lcxgSIAEoBRIhCgVi",
            "VHlwZRgTIAEoDjISLnNoYXJlZC5CdWxsZXRUeXBlEiQKBm1oVHlwZRgUIAEo",
            "DjIULnNoYXJlZC5NdWx0aUhpdFR5cGUSHwoXc2ltdWx0YW5lb3VzTXVsdGlI",
            "aXRDbnQYFSABKA0SDQoFc3BlZWQYFiABKAUSDAoEZGlyWBgXIAEoBRIMCgRk",
            "aXJZGBggASgFEj4KDWNhbmNlbFRyYW5zaXQYGSADKAsyJy5zaGFyZWQuQnVs",
            "bGV0Q29uZmlnLkNhbmNlbFRyYW5zaXRFbnRyeRITCgtyZXBlYXRRdW90YRga",
            "IAEoBRIaChJhY3RpdmVWZnhTcGVjaWVzSWQYGyABKAUSHQoVZXhwbG9zaW9u",
            "VmZ4U3BlY2llc0lkGBwgASgFEhUKDWFsbG93c1dhbGtpbmcYHSABKAgSFwoP",
            "YWxsb3dzQ3JvdWNoaW5nGB4gASgIEhAKCGhhcmRuZXNzGB8gASgFEh8KF3N0",
            "YXJ0dXBJbnZpbnNpYmxlRnJhbWVzGCAgASgFEhsKE2hpdEludmluc2libGVG",
            "cmFtZXMYISABKAUSGgoSZXhwbG9zaW9uU3BlY2llc0lkGCIgASgFEhIKCnBl",
            "cnBBY2NNYWcYIyABKAUSHAoUZGVsYXlTZWxmVmVsVG9BY3RpdmUYJCABKAgS",
            "FQoNc3BlZWRJZk5vdEhpdBglIAEoBRIaChFjb2xsaXNpb25UeXBlTWFzaxiF",
            "CCABKAQSFQoMdGFrZXNHcmF2aXR5GIYIIAEoCBIdChRjaGFyYWN0ZXJFbWl0",
            "U2Z4TmFtZRiAECABKAkSHAoTZmlyZWJhbGxFbWl0U2Z4TmFtZRiBECABKAkS",
            "GQoQZXhwbG9zaW9uU2Z4TmFtZRiCECABKAkSFgoNYWN0aXZlU2Z4TmFtZRiD",
            "ECABKAkaNAoSQ2FuY2VsVHJhbnNpdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2",
            "YWx1ZRgCIAEoBToCOAEingEKEEJ1bGxldEJhdHRsZUF0dHISFQoNYnVsbGV0",
            "TG9jYWxJZBgBIAEoBRIfChdvcmlnaW5hdGVkUmVuZGVyRnJhbWVJZBgCIAEo",
            "BRIZChFvZmZlbmRlckpvaW5JbmRleBgDIAEoBRIOCgZ0ZWFtSWQYBCABKAUS",
            "FgoOYWN0aXZlU2tpbGxIaXQYBSABKAUSDwoHc2tpbGxJZBgGIAEoBSKeAgoG",
            "QnVsbGV0EiQKB2JsU3RhdGUYASABKA4yEy5zaGFyZWQuQnVsbGV0U3RhdGUS",
            "FwoPZnJhbWVzSW5CbFN0YXRlGAIgASgFEiwKCmJhdHRsZUF0dHIYAyABKAsy",
            "GC5zaGFyZWQuQnVsbGV0QmF0dGxlQXR0chIkCgZjb25maWcYBCABKAsyFC5z",
            "aGFyZWQuQnVsbGV0Q29uZmlnEhcKD3JlcGVhdFF1b3RhTGVmdBgFIAEoBRIV",
            "Cgx2aXJ0dWFsR3JpZFgY5wcgASgFEhUKDHZpcnR1YWxHcmlkWRjoByABKAUS",
            "DQoEZGlyWBjpByABKAUSDQoEZGlyWRjqByABKAUSDQoEdmVsWBjrByABKAUS",
            "DQoEdmVsWRjsByABKAUi6AEKClRyYXBDb25maWcSEQoJc3BlY2llc0lkGAEg",
            "ASgFEhoKEmV4cGxvc2lvblNwZWNpZXNJZBgCIAEoBRIXCg9leHBsb3Npb25G",
            "cmFtZXMYAyABKAUSDgoGYmxvd1VwGAQgASgIEg4KBmRhbWFnZRgFIAEoBRIV",
            "Cg1oaXRTdHVuRnJhbWVzGAYgASgFEhsKE2hpdEludmluc2libGVGcmFtZXMY",
            "ByABKAUSFgoOZGVzdHJveVVwb25IaXQYCCABKAgSEAoIaGFyZG5lc3MYCSAB",
            "KAUSFAoLc3BlY2llc05hbWUYgAggASgJIoEBChNUcmFwQ29uZmlnRnJvbVRp",
            "bGVkEhEKCXNwZWNpZXNJZBgBIAEoBRINCgVxdW90YRgCIAEoBRINCgVzcGVl",
            "ZBgDIAEoBRIMCgRkaXJYGAQgASgFEgwKBGRpclkYBSABKAUSHQoVcHJvaGli",
            "aXRzV2FsbEdyYWJiaW5nGAYgASgIIp0CChBUcmFwQ29sbGlkZXJBdHRyEhUK",
            "DWhpdGJveE9mZnNldFgYASABKAUSFQoNaGl0Ym94T2Zmc2V0WRgCIAEoBRIT",
            "CgtoaXRib3hTaXplWBgDIAEoBRITCgtoaXRib3hTaXplWRgEIAEoBRIcChRw",
            "cm92aWRlc0hhcmRQdXNoYmFjaxgFIAEoCBIWCg5wcm92aWRlc0RhbWFnZRgG",
            "IAEoCBIWCg5wcm92aWRlc0VzY2FwZRgHIAEoCBIYChBwcm92aWRlc1NsaXBK",
            "dW1wGAggASgIEhcKD2ZvcmNlc0Nyb3VjaGluZxgJIAEoCBIUCgt0cmFwTG9j",
            "YWxJZBiACCABKAUSGgoRY29sbGlzaW9uVHlwZU1hc2sYhQggASgEIs0DCgRU",
            "cmFwEhMKC3RyYXBMb2NhbElkGAEgASgFEiIKBmNvbmZpZxgCIAEoCzISLnNo",
            "YXJlZC5UcmFwQ29uZmlnEjQKD2NvbmZpZ0Zyb21UaWxlZBgDIAEoCzIbLnNo",
            "YXJlZC5UcmFwQ29uZmlnRnJvbVRpbGVkEiQKCXRyYXBTdGF0ZRgEIAEoDjIR",
            "LnNoYXJlZC5UcmFwU3RhdGUSGQoRZnJhbWVzSW5UcmFwU3RhdGUYBSABKAUS",
            "GgoSaXNDb21wbGV0ZWx5U3RhdGljGAYgASgIEhsKE2NhcHR1cmVkQnlQYXRy",
            "b2xDdWUYByABKAgSGQoRZnJhbWVzSW5QYXRyb2xDdWUYCCABKAUSGgoSd2Fp",
            "dmluZ1BhdHJvbEN1ZUlkGAkgASgFEiAKGHdhaXZpbmdTcG9udGFuZW91c1Bh",
            "dHJvbBgKIAEoCBIZChF0cmlnZ2VyVHJhY2tpbmdJZBgLIAEoBRIVCgx2aXJ0",
            "dWFsR3JpZFgY5wcgASgFEhUKDHZpcnR1YWxHcmlkWRjoByABKAUSDQoEZGly",
            "WBjpByABKAUSDQoEZGlyWRjqByABKAUSDQoEdmVsWBjrByABKAUSDQoEdmVs",
            "WRjsByABKAUiZwoNVHJpZ2dlckNvbmZpZxIRCglzcGVjaWVzSWQYASABKAUS",
            "EwoLc3BlY2llc05hbWUYAiABKAkSEwoLdHJpZ2dlck1hc2sYAyABKAQSGQoR",
            "Y29sbGlzaW9uVHlwZU1hc2sYBCABKAQiSQoWQ2hhcmFjdGVyU3Bhd25lckNv",
            "bmZpZxIYChBjdXRvZmZSZGZGcmFtZUlkGAEgASgFEhUKDXNwZWNpZXNJZExp",
            "c3QYAiADKAUiqAIKFlRyaWdnZXJDb25maWdGcm9tVGlsZWQSEQoJc3BlY2ll",
            "c0lkGAEgASgFEhUKDWRlbGF5ZWRGcmFtZXMYAiABKAUSFgoOcmVjb3ZlcnlG",
            "cmFtZXMYAyABKAUSFgoOdHJhY2tpbmdJZExpc3QYBCADKAUSEAoIaW5pdFZl",
            "bFgYBSABKAUSEAoIaW5pdFZlbFkYBiABKAUSGQoRY2hDb2xsaXNpb25UZWFt",
            "SWQYByABKAUSHQoVc3ViQ3ljbGVUcmlnZ2VyRnJhbWVzGAggASgFEhUKDXN1",
            "YkN5Y2xlUXVvdGEYCSABKAUSPwoXY2hhcmFjdGVyU3Bhd25lclRpbWVTZXEY",
            "CiADKAsyHi5zaGFyZWQuQ2hhcmFjdGVyU3Bhd25lckNvbmZpZyItChNUcmln",
            "Z2VyQ29sbGlkZXJBdHRyEhYKDnRyaWdnZXJMb2NhbElkGAEgASgFItgCCgdU",
            "cmlnZ2VyEhYKDnRyaWdnZXJMb2NhbElkGAEgASgFEhQKDGZyYW1lc1RvRmly",
            "ZRgCIAEoBRIXCg9mcmFtZXNUb1JlY292ZXIYAyABKAUSDQoFcXVvdGEYBCAB",
            "KAUSFAoMYnVsbGV0VGVhbUlkGAUgASgFEiUKBmNvbmZpZxgGIAEoCzIVLnNo",
            "YXJlZC5UcmlnZ2VyQ29uZmlnEjcKD2NvbmZpZ0Zyb21UaWxlZBgHIAEoCzIe",
            "LnNoYXJlZC5UcmlnZ2VyQ29uZmlnRnJvbVRpbGVkEhkKEXN1YkN5Y2xlUXVv",
            "dGFMZWZ0GAggASgFEiMKBXN0YXRlGAkgASgOMhQuc2hhcmVkLlRyaWdnZXJT",
            "dGF0ZRIVCg1mcmFtZXNJblN0YXRlGAogASgFEhQKDHZpcnR1YWxHcmlkWBgL",
            "IAEoBRIUCgx2aXJ0dWFsR3JpZFkYDCABKAUiOAoLUGVlclVkcEFkZHISCgoC",
            "aXAYASABKAkSDAoEcG9ydBgCIAEoBRIPCgdhdXRoS2V5GAMgASgFIsUDChJC",
            "YXR0bGVDb2xsaWRlckluZm8SEQoJc3RhZ2VOYW1lGAEgASgJEhMKC2JvdW5k",
            "Um9vbUlkGAIgASgFEhwKFGJhdHRsZUR1cmF0aW9uRnJhbWVzGAMgASgDEiYK",
            "HmlucHV0RnJhbWVVcHN5bmNEZWxheVRvbGVyYW5jZRgEIAEoBRInCh9tYXhD",
            "aGFzaW5nUmVuZGVyRnJhbWVzUGVyVXBkYXRlGAUgASgFEiEKGXJvbGxiYWNr",
            "RXN0aW1hdGVkRHRNaWxsaXMYBiABKAESIAoYcm9sbGJhY2tFc3RpbWF0ZWRE",
            "dE5hbm9zGAcgASgDEhgKEHJlbmRlckJ1ZmZlclNpemUYCCABKAUSGAoQY29s",
            "bGlzaW9uTWluU3RlcBgJIAEoBRIZChFib3VuZFJvb21DYXBhY2l0eRgKIAEo",
            "BRIbChNwcmVhbGxvY05wY0NhcGFjaXR5GAsgASgFEh4KFnByZWFsbG9jQnVs",
            "bGV0Q2FwYWNpdHkYDCABKAUSLQoPYmF0dGxlVWRwVHVubmVsGIAIIAEoCzIT",
            "LnNoYXJlZC5QZWVyVWRwQWRkchIYCg9mcmFtZUxvZ0VuYWJsZWQYgQggASgI",
            "ItYDChFSb29tRG93bnN5bmNGcmFtZRIKCgJpZBgBIAEoBRItCgpwbGF5ZXJz",
            "QXJyGAIgAygLMhkuc2hhcmVkLkNoYXJhY3RlckRvd25zeW5jEhYKDmNvdW50",
            "ZG93bk5hbm9zGAMgASgDEh8KB2J1bGxldHMYBCADKAsyDi5zaGFyZWQuQnVs",
            "bGV0EioKB25wY3NBcnIYBSADKAsyGS5zaGFyZWQuQ2hhcmFjdGVyRG93bnN5",
            "bmMSHgoIdHJhcHNBcnIYBiADKAsyDC5zaGFyZWQuVHJhcBIkCgt0cmlnZ2Vy",
            "c0FychgHIAMoCzIPLnNoYXJlZC5UcmlnZ2VyEh8KFmJhY2tlbmRVbmNvbmZp",
            "cm1lZE1hc2sYgAggASgEEhoKEXNob3VsZEZvcmNlUmVzeW5jGIEIIAEoCBIW",
            "Cg1zcGVjaWVzSWRMaXN0GIIIIAMoBRIdChRidWxsZXRMb2NhbElkQ291bnRl",
            "chiDCCABKAUSGgoRbnBjTG9jYWxJZENvdW50ZXIYhAggASgFEhwKE3BhcnRp",
            "Y2lwYW50Q2hhbmdlSWQYhQggASgFEi0KD3BlZXJVZHBBZGRyTGlzdBiAECAD",
            "KAsyEy5zaGFyZWQuUGVlclVkcEFkZHIi3AEKBldzUmVzcBILCgNyZXQYASAB",
            "KAUSCwoDYWN0GAIgASgFEiYKA3JkZhgDIAEoCzIZLnNoYXJlZC5Sb29tRG93",
            "bnN5bmNGcmFtZRI7ChdpbnB1dEZyYW1lRG93bnN5bmNCYXRjaBgEIAMoCzIa",
            "LnNoYXJlZC5JbnB1dEZyYW1lRG93bnN5bmMSLAoIYmNpRnJhbWUYBSABKAsy",
            "Gi5zaGFyZWQuQmF0dGxlQ29sbGlkZXJJbmZvEhUKDXBlZXJKb2luSW5kZXgY",
            "BiABKAUSDgoGZXJyTXNnGAcgASgJIoUCCgVTa2lsbBIVCg1iYXR0bGVMb2Nh",
            "bElkGAEgASgFEhYKDnJlY292ZXJ5RnJhbWVzGAIgASgFEh0KFXJlY292ZXJ5",
            "RnJhbWVzT25CbG9jaxgDIAEoBRIbChNyZWNvdmVyeUZyYW1lc09uSGl0GAQg",
            "ASgFEi0KC3RyaWdnZXJUeXBlGAUgASgOMhguc2hhcmVkLlNraWxsVHJpZ2dl",
            "clR5cGUSLAoMYm91bmRDaFN0YXRlGAYgASgOMhYuc2hhcmVkLkNoYXJhY3Rl",
            "clN0YXRlEg8KB21wRGVsdGEYByABKAUSIwoEaGl0cxiACCADKAsyFC5zaGFy",
            "ZWQuQnVsbGV0Q29uZmlnImcKCEZyYW1lTG9nEiYKA3JkZhgBIAEoCzIZLnNo",
            "YXJlZC5Sb29tRG93bnN5bmNGcmFtZRIzCg9hY3R1YWxseVVzZWRJZGYYAiAB",
            "KAsyGi5zaGFyZWQuSW5wdXRGcmFtZURvd25zeW5jIicKDEJhdHRsZVJlc3Vs",
            "dBIXCg93aW5uZXJKb2luSW5kZXgYASABKAUijAEKDERlYnVmZkNvbmZpZxIR",
            "CglzcGVjaWVzSWQYASABKAUSKAoJc3RvY2tUeXBlGAIgASgOMhUuc2hhcmVk",
            "LkJ1ZmZTdG9ja1R5cGUSDQoFc3RvY2sYAyABKAUSIAoEdHlwZRgEIAEoDjIS",
            "LnNoYXJlZC5EZWJ1ZmZUeXBlEg4KBmFycklkeBgFIAEoBSKxAwoKQnVmZkNv",
            "bmZpZxIRCglzcGVjaWVzSWQYASABKAUSKAoJc3RvY2tUeXBlGAIgASgOMhUu",
            "c2hhcmVkLkJ1ZmZTdG9ja1R5cGUSDQoFc3RvY2sYAyABKAUSEgoKc3BlZWRE",
            "ZWx0YRgEIAEoBRIYChBoaXRib3hTaXplWERlbHRhGAUgASgFEhgKEGhpdGJv",
            "eFNpemVZRGVsdGEYBiABKAUSEwoLZGFtYWdlRGVsdGEYByABKAUSHwoXZGFt",
            "YWdlRGVsdGFCeVBlcmNlbnRhZ2UYCCABKAUSHgoWY2hhcmFjdGVySGFyZG5l",
            "c3NEZWx0YRgJIAEoBRIaChJtZWxlZUhhcmRuZXNzRGVsdGEYCiABKAUSHQoV",
            "ZmlyZWJhbGxIYXJkbmVzc0RlbHRhGAsgASgFEhIKCmludmluc2libGUYDCAB",
            "KAgSGAoQeGZvcm1DaFNwZWNpZXNJZBgNIAEoBRIwChFhc3NvY2lhdGVkRGVi",
            "dWZmcxiACCADKAsyFC5zaGFyZWQuRGVidWZmQ29uZmlnEh4KFWNoYXJhY3Rl",
            "clZmeFNwZWNpZXNJZBiAECABKAUiigEKBEJ1ZmYSEQoJc3BlY2llc0lkGAEg",
            "ASgFEg0KBXN0b2NrGAIgASgFEiYKCmJ1ZmZDb25maWcYAyABKAsyEi5zaGFy",
            "ZWQuQnVmZkNvbmZpZxIfChdvcmlnaW5hdGVkUmVuZGVyRnJhbWVJZBgEIAEo",
            "BRIXCg9vcmlnQ2hTcGVjaWVzSWQYBSABKAUiVgoGRGVidWZmEhEKCXNwZWNp",
            "ZXNJZBgBIAEoBRINCgVzdG9jaxgCIAEoBRIqCgxkZWJ1ZmZDb25maWcYAyAB",
            "KAsyFC5zaGFyZWQuRGVidWZmQ29uZmlnIskBCg1JbnZlbnRvcnlTbG90EjEK",
            "CXN0b2NrVHlwZRgBIAEoDjIeLnNoYXJlZC5JbnZlbnRvcnlTbG90U3RvY2tU",
            "eXBlEg0KBXF1b3RhGAIgASgFEhcKD2ZyYW1lc1RvUmVjb3ZlchgDIAEoBRIU",
            "CgxkZWZhdWx0UXVvdGEYBCABKAUSHgoWZGVmYXVsdEZyYW1lc1RvUmVjb3Zl",
            "chgFIAEoBRInCgpidWZmQ29uZmlnGIAIIAEoCzISLnNoYXJlZC5CdWZmQ29u",
            "ZmlnIjEKCUludmVudG9yeRIkCgVzbG90cxgBIAMoCzIVLnNoYXJlZC5JbnZl",
            "bnRvcnlTbG90KjUKC0J1bGxldFN0YXRlEgsKB1N0YXJ0VXAQABIKCgZBY3Rp",
            "dmUQARINCglFeHBsb2RpbmcQAiquAwoOQ2hhcmFjdGVyU3RhdGUSCQoFSWRs",
            "ZTEQABILCgdXYWxraW5nEAESDgoKVHVybkFyb3VuZBACEgoKBkF0a2VkMRAD",
            "EhQKEEluQWlySWRsZTFOb0p1bXAQBBIUChBJbkFpcklkbGUxQnlKdW1wEAUS",
            "GAoUSW5BaXJJZGxlMUJ5V2FsbEp1bXAQBhIPCgtJbkFpckF0a2VkMRAHEgwK",
            "CEJsb3duVXAxEAgSDAoITGF5RG93bjEQCRIKCgZHZXRVcDEQChIJCgVEeWlu",
            "ZxALEgsKB0Rhc2hpbmcQDBILCgdTbGlkaW5nEA0SEAoLT25XYWxsSWRsZTEQ",
            "gAESEAoLQ3JvdWNoSWRsZTEQgAISDwoKQ3JvdWNoQXRrMRCBAhISCg1Dcm91",
            "Y2hXYWxraW5nEIICEhEKDENyb3VjaEF0a2VkMRCDAhIJCgRBdGsxEIAIEgkK",
            "BEF0azIQgQgSCQoEQXRrMxCCCBIJCgRBdGs0EIMIEgkKBEF0azUQhAgSDgoJ",
            "SW5BaXJBdGsxEIAQEhAKC1dhbGtpbmdBdGsxEIEQEg8KCk9uV2FsbEF0azEQ",
            "gBgqTAoJVHJhcFN0YXRlEgkKBVRJZGxlEAASDAoIVFdhbGtpbmcQARIJCgVU",
            "QXRrMRACEgsKB1RBdGtlZDEQAxIOCgpURGVzdHJveWVkEAQqLAoMVHJpZ2dl",
            "clN0YXRlEgoKBlRSZWFkeRAAEhAKDFRDb29saW5nRG93bhABKjcKCkJ1bGxl",
            "dFR5cGUSEAoMVW5kZXRlcm1pbmVkEAASCQoFTWVsZWUQARIMCghGaXJlYmFs",
            "bBACKogBCgxNdWx0aUhpdFR5cGUSCAoETm9uZRAAEhAKDEZyb21FbWlzc2lv",
            "bhABEhYKEkZyb21GaXJzdEhpdEFjdHVhbBACEhYKEkZyb21GaXJzdEhpdEFu",
            "eXdheRADEhUKEUZyb21QcmV2SGl0QWN0dWFsEAQSFQoRRnJvbVByZXZIaXRB",
            "bnl3YXkQBSozChBTa2lsbFRyaWdnZXJUeXBlEg4KClJpc2luZ0VkZ2UQABIP",
            "CgtGYWxsaW5nRWRnZRABKiwKD1ZmeER1cmF0aW9uVHlwZRIKCgZPbmVPZmYQ",
            "ABINCglSZXBlYXRpbmcQASo3Cg1WZnhNb3Rpb25UeXBlEgwKCE5vTW90aW9u",
            "EAASCwoHRHJvcHBlZBABEgsKB1RyYWNpbmcQAioxCg1CdWZmU3RvY2tUeXBl",
            "EgoKBk5vbmVCZhAAEgkKBVRpbWVkEAESCQoFUXVvdGEQAipxCgpEZWJ1ZmZU",
            "eXBlEgsKB05vbmVEYmYQABIRCg1TcGVlZERvd25Pbmx5EAESEQoNQ29sZFNw",
            "ZWVkRG93bhACEhYKElBvc2l0aW9uTG9ja2VkT25seRADEhgKFEZyb3plblBv",
            "c2l0aW9uTG9ja2VkEAQqUwoWSW52ZW50b3J5U2xvdFN0b2NrVHlwZRIKCgZO",
            "b25lSXYQABILCgdUaW1lZEl2EAESCwoHUXVvdGFJdhACEhMKD1RpbWVkTWFn",
            "YXppbmVJdhADQgmqAgZzaGFyZWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::shared.BulletState), typeof(global::shared.CharacterState), typeof(global::shared.TrapState), typeof(global::shared.TriggerState), typeof(global::shared.BulletType), typeof(global::shared.MultiHitType), typeof(global::shared.SkillTriggerType), typeof(global::shared.VfxDurationType), typeof(global::shared.VfxMotionType), typeof(global::shared.BuffStockType), typeof(global::shared.DebuffType), typeof(global::shared.InventorySlotStockType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.CharacterDownsync), global::shared.CharacterDownsync.Parser, new[]{ "Id", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY", "Speed", "SpeciesId", "JoinIndex", "FramesToRecover", "FramesCapturedByInertia", "CapturedByPatrolCue", "FramesInPatrolCue", "BeatsCnt", "BeatenCnt", "Hp", "MaxHp", "Mp", "MaxMp", "CharacterState", "FramesInChState", "InAir", "JumpTriggered", "OnWall", "OnWallNormX", "OnWallNormY", "OmitGravity", "OmitSoftPushback", "WaivingPatrolCueId", "WaivingSpontaneousPatrol", "RevivalVirtualGridX", "RevivalVirtualGridY", "RevivalDirX", "RevivalDirY", "OnSlope", "FrictionVelX", "ForcedCrouching", "SlipJumpTriggered", "PrimarilyOnSlippableHardPushback", "PrevWasCrouching", "NewBirth", "LowerPartFramesInChState", "JumpStarted", "FramesToStartJump", "Name", "DisplayName", "Avatar", "ActiveSkillId", "ActiveSkillHit", "FramesInvinsible", "BulletTeamId", "ChCollisionTeamId", "CollisionTypeMask", "BuffList", "DebuffList", "Inventory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameDecoded), global::shared.InputFrameDecoded.Parser, new[]{ "Dx", "Dy", "BtnALevel", "BtnBLevel", "BtnCLevel", "BtnDLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameUpsync), global::shared.InputFrameUpsync.Parser, new[]{ "InputFrameId", "Encoded", "JoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameDownsync), global::shared.InputFrameDownsync.Parser, new[]{ "InputFrameId", "InputList", "ConfirmedList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.WsReq), global::shared.WsReq.Parser, new[]{ "PlayerId", "Act", "JoinIndex", "AckingFrameId", "AckingInputFrameId", "AuthKey", "InputFrameUpsyncBatch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputBufferSnapshot), global::shared.InputBufferSnapshot.Parser, new[]{ "RefRenderFrameId", "UnconfirmedMask", "ToSendInputFrameDownsyncs", "ShouldForceResync", "PeerJoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PatrolCue), global::shared.PatrolCue.Parser, new[]{ "Id", "FlAct", "FrAct", "FlCaptureFrames", "FrCaptureFrames", "FdAct", "FuAct", "FdCaptureFrames", "FuCaptureFrames", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.VisionBox), global::shared.VisionBox.Parser, new[]{ "BottomLeftX", "BottomLeftY", "Width", "Height" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.VfxConfig), global::shared.VfxConfig.Parser, new[]{ "SpeciesId", "MotionType", "DurationType", "OnCharacter", "OnBullet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BulletConfig), global::shared.BulletConfig.Parser, new[]{ "StartupFrames", "CancellableStFrame", "CancellableEdFrame", "ActiveFrames", "HitStunFrames", "BlockStunFrames", "PushbackVelX", "PushbackVelY", "Damage", "SelfLockVelX", "SelfLockVelY", "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "BlowUp", "SpeciesId", "ExplosionFrames", "BType", "MhType", "SimultaneousMultiHitCnt", "Speed", "DirX", "DirY", "CancelTransit", "RepeatQuota", "ActiveVfxSpeciesId", "ExplosionVfxSpeciesId", "AllowsWalking", "AllowsCrouching", "Hardness", "StartupInvinsibleFrames", "HitInvinsibleFrames", "ExplosionSpeciesId", "PerpAccMag", "DelaySelfVelToActive", "SpeedIfNotHit", "CollisionTypeMask", "TakesGravity", "CharacterEmitSfxName", "FireballEmitSfxName", "ExplosionSfxName", "ActiveSfxName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BulletBattleAttr), global::shared.BulletBattleAttr.Parser, new[]{ "BulletLocalId", "OriginatedRenderFrameId", "OffenderJoinIndex", "TeamId", "ActiveSkillHit", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Bullet), global::shared.Bullet.Parser, new[]{ "BlState", "FramesInBlState", "BattleAttr", "Config", "RepeatQuotaLeft", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapConfig), global::shared.TrapConfig.Parser, new[]{ "SpeciesId", "ExplosionSpeciesId", "ExplosionFrames", "BlowUp", "Damage", "HitStunFrames", "HitInvinsibleFrames", "DestroyUponHit", "Hardness", "SpeciesName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapConfigFromTiled), global::shared.TrapConfigFromTiled.Parser, new[]{ "SpeciesId", "Quota", "Speed", "DirX", "DirY", "ProhibitsWallGrabbing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapColliderAttr), global::shared.TrapColliderAttr.Parser, new[]{ "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "ProvidesHardPushback", "ProvidesDamage", "ProvidesEscape", "ProvidesSlipJump", "ForcesCrouching", "TrapLocalId", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Trap), global::shared.Trap.Parser, new[]{ "TrapLocalId", "Config", "ConfigFromTiled", "TrapState", "FramesInTrapState", "IsCompletelyStatic", "CapturedByPatrolCue", "FramesInPatrolCue", "WaivingPatrolCueId", "WaivingSpontaneousPatrol", "TriggerTrackingId", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerConfig), global::shared.TriggerConfig.Parser, new[]{ "SpeciesId", "SpeciesName", "TriggerMask", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.CharacterSpawnerConfig), global::shared.CharacterSpawnerConfig.Parser, new[]{ "CutoffRdfFrameId", "SpeciesIdList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerConfigFromTiled), global::shared.TriggerConfigFromTiled.Parser, new[]{ "SpeciesId", "DelayedFrames", "RecoveryFrames", "TrackingIdList", "InitVelX", "InitVelY", "ChCollisionTeamId", "SubCycleTriggerFrames", "SubCycleQuota", "CharacterSpawnerTimeSeq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerColliderAttr), global::shared.TriggerColliderAttr.Parser, new[]{ "TriggerLocalId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Trigger), global::shared.Trigger.Parser, new[]{ "TriggerLocalId", "FramesToFire", "FramesToRecover", "Quota", "BulletTeamId", "Config", "ConfigFromTiled", "SubCycleQuotaLeft", "State", "FramesInState", "VirtualGridX", "VirtualGridY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PeerUdpAddr), global::shared.PeerUdpAddr.Parser, new[]{ "Ip", "Port", "AuthKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BattleColliderInfo), global::shared.BattleColliderInfo.Parser, new[]{ "StageName", "BoundRoomId", "BattleDurationFrames", "InputFrameUpsyncDelayTolerance", "MaxChasingRenderFramesPerUpdate", "RollbackEstimatedDtMillis", "RollbackEstimatedDtNanos", "RenderBufferSize", "CollisionMinStep", "BoundRoomCapacity", "PreallocNpcCapacity", "PreallocBulletCapacity", "BattleUdpTunnel", "FrameLogEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.RoomDownsyncFrame), global::shared.RoomDownsyncFrame.Parser, new[]{ "Id", "PlayersArr", "CountdownNanos", "Bullets", "NpcsArr", "TrapsArr", "TriggersArr", "BackendUnconfirmedMask", "ShouldForceResync", "SpeciesIdList", "BulletLocalIdCounter", "NpcLocalIdCounter", "ParticipantChangeId", "PeerUdpAddrList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.WsResp), global::shared.WsResp.Parser, new[]{ "Ret", "Act", "Rdf", "InputFrameDownsyncBatch", "BciFrame", "PeerJoinIndex", "ErrMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Skill), global::shared.Skill.Parser, new[]{ "BattleLocalId", "RecoveryFrames", "RecoveryFramesOnBlock", "RecoveryFramesOnHit", "TriggerType", "BoundChState", "MpDelta", "Hits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.FrameLog), global::shared.FrameLog.Parser, new[]{ "Rdf", "ActuallyUsedIdf" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BattleResult), global::shared.BattleResult.Parser, new[]{ "WinnerJoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.DebuffConfig), global::shared.DebuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "Type", "ArrIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BuffConfig), global::shared.BuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "SpeedDelta", "HitboxSizeXDelta", "HitboxSizeYDelta", "DamageDelta", "DamageDeltaByPercentage", "CharacterHardnessDelta", "MeleeHardnessDelta", "FireballHardnessDelta", "Invinsible", "XformChSpeciesId", "AssociatedDebuffs", "CharacterVfxSpeciesId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Buff), global::shared.Buff.Parser, new[]{ "SpeciesId", "Stock", "BuffConfig", "OriginatedRenderFrameId", "OrigChSpeciesId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Debuff), global::shared.Debuff.Parser, new[]{ "SpeciesId", "Stock", "DebuffConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InventorySlot), global::shared.InventorySlot.Parser, new[]{ "StockType", "Quota", "FramesToRecover", "DefaultQuota", "DefaultFramesToRecover", "BuffConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Inventory), global::shared.Inventory.Parser, new[]{ "Slots" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BulletState {
    [pbr::OriginalName("StartUp")] StartUp = 0,
    [pbr::OriginalName("Active")] Active = 1,
    [pbr::OriginalName("Exploding")] Exploding = 2,
  }

  public enum CharacterState {
    [pbr::OriginalName("Idle1")] Idle1 = 0,
    [pbr::OriginalName("Walking")] Walking = 1,
    [pbr::OriginalName("TurnAround")] TurnAround = 2,
    [pbr::OriginalName("Atked1")] Atked1 = 3,
    [pbr::OriginalName("InAirIdle1NoJump")] InAirIdle1NoJump = 4,
    [pbr::OriginalName("InAirIdle1ByJump")] InAirIdle1ByJump = 5,
    [pbr::OriginalName("InAirIdle1ByWallJump")] InAirIdle1ByWallJump = 6,
    [pbr::OriginalName("InAirAtked1")] InAirAtked1 = 7,
    [pbr::OriginalName("BlownUp1")] BlownUp1 = 8,
    [pbr::OriginalName("LayDown1")] LayDown1 = 9,
    [pbr::OriginalName("GetUp1")] GetUp1 = 10,
    [pbr::OriginalName("Dying")] Dying = 11,
    [pbr::OriginalName("Dashing")] Dashing = 12,
    [pbr::OriginalName("Sliding")] Sliding = 13,
    [pbr::OriginalName("OnWallIdle1")] OnWallIdle1 = 128,
    [pbr::OriginalName("CrouchIdle1")] CrouchIdle1 = 256,
    [pbr::OriginalName("CrouchAtk1")] CrouchAtk1 = 257,
    [pbr::OriginalName("CrouchWalking")] CrouchWalking = 258,
    [pbr::OriginalName("CrouchAtked1")] CrouchAtked1 = 259,
    [pbr::OriginalName("Atk1")] Atk1 = 1024,
    [pbr::OriginalName("Atk2")] Atk2 = 1025,
    [pbr::OriginalName("Atk3")] Atk3 = 1026,
    [pbr::OriginalName("Atk4")] Atk4 = 1027,
    [pbr::OriginalName("Atk5")] Atk5 = 1028,
    [pbr::OriginalName("InAirAtk1")] InAirAtk1 = 2048,
    [pbr::OriginalName("WalkingAtk1")] WalkingAtk1 = 2049,
    [pbr::OriginalName("OnWallAtk1")] OnWallAtk1 = 3072,
  }

  public enum TrapState {
    [pbr::OriginalName("TIdle")] Tidle = 0,
    [pbr::OriginalName("TWalking")] Twalking = 1,
    [pbr::OriginalName("TAtk1")] Tatk1 = 2,
    [pbr::OriginalName("TAtked1")] Tatked1 = 3,
    [pbr::OriginalName("TDestroyed")] Tdestroyed = 4,
  }

  public enum TriggerState {
    [pbr::OriginalName("TReady")] Tready = 0,
    [pbr::OriginalName("TCoolingDown")] TcoolingDown = 1,
  }

  public enum BulletType {
    [pbr::OriginalName("Undetermined")] Undetermined = 0,
    [pbr::OriginalName("Melee")] Melee = 1,
    [pbr::OriginalName("Fireball")] Fireball = 2,
  }

  public enum MultiHitType {
    /// <summary>
    ///*
    ///[WARN] Multihit of a fireball (determined in turn by the "BulletType bType" field) is more difficult to handle than that of melee, because we have to count from the fireball's first hit; the situation becomes even more complicated when a multihit fireball is in a crowd -- remains to be designed
    ///
    ///Types of fireball multihit-singlebullet
    ///a. References the emission frame
    ///b. References the first hit only when actually hit
    ///c. References the first hit even if blocked
    ///d. References the prev hit only when actually hit
    ///e. References the prev hit even if blocked
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("FromEmission")] FromEmission = 1,
    [pbr::OriginalName("FromFirstHitActual")] FromFirstHitActual = 2,
    [pbr::OriginalName("FromFirstHitAnyway")] FromFirstHitAnyway = 3,
    [pbr::OriginalName("FromPrevHitActual")] FromPrevHitActual = 4,
    [pbr::OriginalName("FromPrevHitAnyway")] FromPrevHitAnyway = 5,
  }

  public enum SkillTriggerType {
    [pbr::OriginalName("RisingEdge")] RisingEdge = 0,
    [pbr::OriginalName("FallingEdge")] FallingEdge = 1,
  }

  public enum VfxDurationType {
    [pbr::OriginalName("OneOff")] OneOff = 0,
    [pbr::OriginalName("Repeating")] Repeating = 1,
  }

  public enum VfxMotionType {
    [pbr::OriginalName("NoMotion")] NoMotion = 0,
    [pbr::OriginalName("Dropped")] Dropped = 1,
    [pbr::OriginalName("Tracing")] Tracing = 2,
  }

  public enum BuffStockType {
    [pbr::OriginalName("NoneBf")] NoneBf = 0,
    /// <summary>
    /// Would be calculated in number of renderFrames, not actual time in seconds or milliseconds
    /// </summary>
    [pbr::OriginalName("Timed")] Timed = 1,
    [pbr::OriginalName("Quota")] Quota = 2,
  }

  public enum DebuffType {
    [pbr::OriginalName("NoneDbf")] NoneDbf = 0,
    [pbr::OriginalName("SpeedDownOnly")] SpeedDownOnly = 1,
    [pbr::OriginalName("ColdSpeedDown")] ColdSpeedDown = 2,
    [pbr::OriginalName("PositionLockedOnly")] PositionLockedOnly = 3,
    [pbr::OriginalName("FrozenPositionLocked")] FrozenPositionLocked = 4,
  }

  public enum InventorySlotStockType {
    [pbr::OriginalName("NoneIv")] NoneIv = 0,
    /// <summary>
    /// Reusable after cooldown
    /// </summary>
    [pbr::OriginalName("TimedIv")] TimedIv = 1,
    [pbr::OriginalName("QuotaIv")] QuotaIv = 2,
    /// <summary>
    /// Has certain quotas before required to cooldown
    /// </summary>
    [pbr::OriginalName("TimedMagazineIv")] TimedMagazineIv = 3,
  }

  #endregion

  #region Messages
  public sealed partial class CharacterDownsync : pb::IMessage<CharacterDownsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterDownsync> _parser = new pb::MessageParser<CharacterDownsync>(() => new CharacterDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CharacterDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync(CharacterDownsync other) : this() {
      id_ = other.id_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      speed_ = other.speed_;
      speciesId_ = other.speciesId_;
      joinIndex_ = other.joinIndex_;
      framesToRecover_ = other.framesToRecover_;
      framesCapturedByInertia_ = other.framesCapturedByInertia_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      beatsCnt_ = other.beatsCnt_;
      beatenCnt_ = other.beatenCnt_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      mp_ = other.mp_;
      maxMp_ = other.maxMp_;
      characterState_ = other.characterState_;
      framesInChState_ = other.framesInChState_;
      inAir_ = other.inAir_;
      jumpTriggered_ = other.jumpTriggered_;
      onWall_ = other.onWall_;
      onWallNormX_ = other.onWallNormX_;
      onWallNormY_ = other.onWallNormY_;
      omitGravity_ = other.omitGravity_;
      omitSoftPushback_ = other.omitSoftPushback_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      waivingSpontaneousPatrol_ = other.waivingSpontaneousPatrol_;
      revivalVirtualGridX_ = other.revivalVirtualGridX_;
      revivalVirtualGridY_ = other.revivalVirtualGridY_;
      revivalDirX_ = other.revivalDirX_;
      revivalDirY_ = other.revivalDirY_;
      onSlope_ = other.onSlope_;
      frictionVelX_ = other.frictionVelX_;
      forcedCrouching_ = other.forcedCrouching_;
      slipJumpTriggered_ = other.slipJumpTriggered_;
      primarilyOnSlippableHardPushback_ = other.primarilyOnSlippableHardPushback_;
      prevWasCrouching_ = other.prevWasCrouching_;
      newBirth_ = other.newBirth_;
      lowerPartFramesInChState_ = other.lowerPartFramesInChState_;
      jumpStarted_ = other.jumpStarted_;
      framesToStartJump_ = other.framesToStartJump_;
      name_ = other.name_;
      displayName_ = other.displayName_;
      avatar_ = other.avatar_;
      activeSkillId_ = other.activeSkillId_;
      activeSkillHit_ = other.activeSkillHit_;
      framesInvinsible_ = other.framesInvinsible_;
      bulletTeamId_ = other.bulletTeamId_;
      chCollisionTeamId_ = other.chCollisionTeamId_;
      collisionTypeMask_ = other.collisionTypeMask_;
      buffList_ = other.buffList_.Clone();
      debuffList_ = other.debuffList_.Clone();
      inventory_ = other.inventory_ != null ? other.inventory_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync Clone() {
      return new CharacterDownsync(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 2;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 3;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 6;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 7;
    private int velY_;
    /// <summary>
    /// "velX" and "velY" is used to record the accumulated effect by inertia and accelerations (including gravity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private int speed_;
    /// <summary>
    /// this is the instantaneous scalar attribute of a character, different from but will be accounted in "velX" and "velY"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 9;
    private int speciesId_;
    /// <summary>
    /// For evolution during battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 10;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 11;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "framesCapturedByInertia" field.</summary>
    public const int FramesCapturedByInertiaFieldNumber = 12;
    private int framesCapturedByInertia_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesCapturedByInertia {
      get { return framesCapturedByInertia_; }
      set {
        framesCapturedByInertia_ = value;
      }
    }

    /// <summary>Field number for the "capturedByPatrolCue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 13;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "framesInPatrolCue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 14;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "beatsCnt" field.</summary>
    public const int BeatsCntFieldNumber = 15;
    private int beatsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BeatsCnt {
      get { return beatsCnt_; }
      set {
        beatsCnt_ = value;
      }
    }

    /// <summary>Field number for the "beatenCnt" field.</summary>
    public const int BeatenCntFieldNumber = 16;
    private int beatenCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BeatenCnt {
      get { return beatenCnt_; }
      set {
        beatenCnt_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 17;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "maxHp" field.</summary>
    public const int MaxHpFieldNumber = 18;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 19;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "maxMp" field.</summary>
    public const int MaxMpFieldNumber = 20;
    private int maxMp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    /// <summary>Field number for the "characterState" field.</summary>
    public const int CharacterStateFieldNumber = 22;
    private global::shared.CharacterState characterState_ = global::shared.CharacterState.Idle1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.CharacterState CharacterState {
      get { return characterState_; }
      set {
        characterState_ = value;
      }
    }

    /// <summary>Field number for the "framesInChState" field.</summary>
    public const int FramesInChStateFieldNumber = 23;
    private int framesInChState_;
    /// <summary>
    /// number of frames elapsed in the current character state   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInChState {
      get { return framesInChState_; }
      set {
        framesInChState_ = value;
      }
    }

    /// <summary>Field number for the "inAir" field.</summary>
    public const int InAirFieldNumber = 24;
    private bool inAir_;
    /// <summary>
    /// by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "inAir (prev -> curr)"  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InAir {
      get { return inAir_; }
      set {
        inAir_ = value;
      }
    }

    /// <summary>Field number for the "jumpTriggered" field.</summary>
    public const int JumpTriggeredFieldNumber = 25;
    private bool jumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool JumpTriggered {
      get { return jumpTriggered_; }
      set {
        jumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "onWall" field.</summary>
    public const int OnWallFieldNumber = 26;
    private bool onWall_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "onWall (prev -> curr)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnWall {
      get { return onWall_; }
      set {
        onWall_ = value;
      }
    }

    /// <summary>Field number for the "onWallNormX" field.</summary>
    public const int OnWallNormXFieldNumber = 27;
    private int onWallNormX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnWallNormX {
      get { return onWallNormX_; }
      set {
        onWallNormX_ = value;
      }
    }

    /// <summary>Field number for the "onWallNormY" field.</summary>
    public const int OnWallNormYFieldNumber = 28;
    private int onWallNormY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnWallNormY {
      get { return onWallNormY_; }
      set {
        onWallNormY_ = value;
      }
    }

    /// <summary>Field number for the "omitGravity" field.</summary>
    public const int OmitGravityFieldNumber = 29;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "omitSoftPushback" field.</summary>
    public const int OmitSoftPushbackFieldNumber = 30;
    private bool omitSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitSoftPushback {
      get { return omitSoftPushback_; }
      set {
        omitSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "waivingPatrolCueId" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 31;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "waivingSpontaneousPatrol" field.</summary>
    public const int WaivingSpontaneousPatrolFieldNumber = 32;
    private bool waivingSpontaneousPatrol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WaivingSpontaneousPatrol {
      get { return waivingSpontaneousPatrol_; }
      set {
        waivingSpontaneousPatrol_ = value;
      }
    }

    /// <summary>Field number for the "revivalVirtualGridX" field.</summary>
    public const int RevivalVirtualGridXFieldNumber = 33;
    private int revivalVirtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalVirtualGridX {
      get { return revivalVirtualGridX_; }
      set {
        revivalVirtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "revivalVirtualGridY" field.</summary>
    public const int RevivalVirtualGridYFieldNumber = 34;
    private int revivalVirtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalVirtualGridY {
      get { return revivalVirtualGridY_; }
      set {
        revivalVirtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "revivalDirX" field.</summary>
    public const int RevivalDirXFieldNumber = 35;
    private int revivalDirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalDirX {
      get { return revivalDirX_; }
      set {
        revivalDirX_ = value;
      }
    }

    /// <summary>Field number for the "revivalDirY" field.</summary>
    public const int RevivalDirYFieldNumber = 36;
    private int revivalDirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalDirY {
      get { return revivalDirY_; }
      set {
        revivalDirY_ = value;
      }
    }

    /// <summary>Field number for the "onSlope" field.</summary>
    public const int OnSlopeFieldNumber = 37;
    private bool onSlope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnSlope {
      get { return onSlope_; }
      set {
        onSlope_ = value;
      }
    }

    /// <summary>Field number for the "frictionVelX" field.</summary>
    public const int FrictionVelXFieldNumber = 38;
    private int frictionVelX_;
    /// <summary>
    /// Mostly from a dynamic trap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionVelX {
      get { return frictionVelX_; }
      set {
        frictionVelX_ = value;
      }
    }

    /// <summary>Field number for the "forcedCrouching" field.</summary>
    public const int ForcedCrouchingFieldNumber = 39;
    private bool forcedCrouching_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "onWall (prev -> curr)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForcedCrouching {
      get { return forcedCrouching_; }
      set {
        forcedCrouching_ = value;
      }
    }

    /// <summary>Field number for the "slipJumpTriggered" field.</summary>
    public const int SlipJumpTriggeredFieldNumber = 40;
    private bool slipJumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SlipJumpTriggered {
      get { return slipJumpTriggered_; }
      set {
        slipJumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "primarilyOnSlippableHardPushback" field.</summary>
    public const int PrimarilyOnSlippableHardPushbackFieldNumber = 41;
    private bool primarilyOnSlippableHardPushback_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the calc result of "Battle.Step" instead of "characterState"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrimarilyOnSlippableHardPushback {
      get { return primarilyOnSlippableHardPushback_; }
      set {
        primarilyOnSlippableHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "prevWasCrouching" field.</summary>
    public const int PrevWasCrouchingFieldNumber = 42;
    private bool prevWasCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrevWasCrouching {
      get { return prevWasCrouching_; }
      set {
        prevWasCrouching_ = value;
      }
    }

    /// <summary>Field number for the "newBirth" field.</summary>
    public const int NewBirthFieldNumber = 43;
    private bool newBirth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NewBirth {
      get { return newBirth_; }
      set {
        newBirth_ = value;
      }
    }

    /// <summary>Field number for the "lowerPartFramesInChState" field.</summary>
    public const int LowerPartFramesInChStateFieldNumber = 44;
    private int lowerPartFramesInChState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LowerPartFramesInChState {
      get { return lowerPartFramesInChState_; }
      set {
        lowerPartFramesInChState_ = value;
      }
    }

    /// <summary>Field number for the "jumpStarted" field.</summary>
    public const int JumpStartedFieldNumber = 45;
    private bool jumpStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool JumpStarted {
      get { return jumpStarted_; }
      set {
        jumpStarted_ = value;
      }
    }

    /// <summary>Field number for the "framesToStartJump" field.</summary>
    public const int FramesToStartJumpFieldNumber = 46;
    private int framesToStartJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToStartJump {
      get { return framesToStartJump_; }
      set {
        framesToStartJump_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 997;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 998;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 999;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeSkillId" field.</summary>
    public const int ActiveSkillIdFieldNumber = 1024;
    private int activeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillHit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 1025;
    private int activeSkillHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "framesInvinsible" field.</summary>
    public const int FramesInvinsibleFieldNumber = 1026;
    private int framesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInvinsible {
      get { return framesInvinsible_; }
      set {
        framesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 1027;
    private int bulletTeamId_;
    /// <summary>
    /// Kindly note that "collisionTypeMask" is NOT GRANULAR ENOUGH for inter-character collision configuration, e.g. same team omission, thus we'd still need the fields "bulletTeamId" and "chCollisionTeamId" here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "chCollisionTeamId" field.</summary>
    public const int ChCollisionTeamIdFieldNumber = 1028;
    private int chCollisionTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChCollisionTeamId {
      get { return chCollisionTeamId_; }
      set {
        chCollisionTeamId_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 1030;
    private static readonly pb::FieldCodec<global::shared.Buff> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(8242, global::shared.Buff.Parser);
    private readonly pbc::RepeatedField<global::shared.Buff> buffList_ = new pbc::RepeatedField<global::shared.Buff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Buff> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "debuffList" field.</summary>
    public const int DebuffListFieldNumber = 1031;
    private static readonly pb::FieldCodec<global::shared.Debuff> _repeated_debuffList_codec
        = pb::FieldCodec.ForMessage(8250, global::shared.Debuff.Parser);
    private readonly pbc::RepeatedField<global::shared.Debuff> debuffList_ = new pbc::RepeatedField<global::shared.Debuff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Debuff> DebuffList {
      get { return debuffList_; }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 1032;
    private global::shared.Inventory inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.Inventory Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CharacterDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CharacterDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      if (Speed != other.Speed) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (FramesCapturedByInertia != other.FramesCapturedByInertia) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (BeatsCnt != other.BeatsCnt) return false;
      if (BeatenCnt != other.BeatenCnt) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Mp != other.Mp) return false;
      if (MaxMp != other.MaxMp) return false;
      if (CharacterState != other.CharacterState) return false;
      if (FramesInChState != other.FramesInChState) return false;
      if (InAir != other.InAir) return false;
      if (JumpTriggered != other.JumpTriggered) return false;
      if (OnWall != other.OnWall) return false;
      if (OnWallNormX != other.OnWallNormX) return false;
      if (OnWallNormY != other.OnWallNormY) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (OmitSoftPushback != other.OmitSoftPushback) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (WaivingSpontaneousPatrol != other.WaivingSpontaneousPatrol) return false;
      if (RevivalVirtualGridX != other.RevivalVirtualGridX) return false;
      if (RevivalVirtualGridY != other.RevivalVirtualGridY) return false;
      if (RevivalDirX != other.RevivalDirX) return false;
      if (RevivalDirY != other.RevivalDirY) return false;
      if (OnSlope != other.OnSlope) return false;
      if (FrictionVelX != other.FrictionVelX) return false;
      if (ForcedCrouching != other.ForcedCrouching) return false;
      if (SlipJumpTriggered != other.SlipJumpTriggered) return false;
      if (PrimarilyOnSlippableHardPushback != other.PrimarilyOnSlippableHardPushback) return false;
      if (PrevWasCrouching != other.PrevWasCrouching) return false;
      if (NewBirth != other.NewBirth) return false;
      if (LowerPartFramesInChState != other.LowerPartFramesInChState) return false;
      if (JumpStarted != other.JumpStarted) return false;
      if (FramesToStartJump != other.FramesToStartJump) return false;
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Avatar != other.Avatar) return false;
      if (ActiveSkillId != other.ActiveSkillId) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (FramesInvinsible != other.FramesInvinsible) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (ChCollisionTeamId != other.ChCollisionTeamId) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      if(!debuffList_.Equals(other.debuffList_)) return false;
      if (!object.Equals(Inventory, other.Inventory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (FramesCapturedByInertia != 0) hash ^= FramesCapturedByInertia.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (BeatsCnt != 0) hash ^= BeatsCnt.GetHashCode();
      if (BeatenCnt != 0) hash ^= BeatenCnt.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (MaxMp != 0) hash ^= MaxMp.GetHashCode();
      if (CharacterState != global::shared.CharacterState.Idle1) hash ^= CharacterState.GetHashCode();
      if (FramesInChState != 0) hash ^= FramesInChState.GetHashCode();
      if (InAir != false) hash ^= InAir.GetHashCode();
      if (JumpTriggered != false) hash ^= JumpTriggered.GetHashCode();
      if (OnWall != false) hash ^= OnWall.GetHashCode();
      if (OnWallNormX != 0) hash ^= OnWallNormX.GetHashCode();
      if (OnWallNormY != 0) hash ^= OnWallNormY.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (OmitSoftPushback != false) hash ^= OmitSoftPushback.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (WaivingSpontaneousPatrol != false) hash ^= WaivingSpontaneousPatrol.GetHashCode();
      if (RevivalVirtualGridX != 0) hash ^= RevivalVirtualGridX.GetHashCode();
      if (RevivalVirtualGridY != 0) hash ^= RevivalVirtualGridY.GetHashCode();
      if (RevivalDirX != 0) hash ^= RevivalDirX.GetHashCode();
      if (RevivalDirY != 0) hash ^= RevivalDirY.GetHashCode();
      if (OnSlope != false) hash ^= OnSlope.GetHashCode();
      if (FrictionVelX != 0) hash ^= FrictionVelX.GetHashCode();
      if (ForcedCrouching != false) hash ^= ForcedCrouching.GetHashCode();
      if (SlipJumpTriggered != false) hash ^= SlipJumpTriggered.GetHashCode();
      if (PrimarilyOnSlippableHardPushback != false) hash ^= PrimarilyOnSlippableHardPushback.GetHashCode();
      if (PrevWasCrouching != false) hash ^= PrevWasCrouching.GetHashCode();
      if (NewBirth != false) hash ^= NewBirth.GetHashCode();
      if (LowerPartFramesInChState != 0) hash ^= LowerPartFramesInChState.GetHashCode();
      if (JumpStarted != false) hash ^= JumpStarted.GetHashCode();
      if (FramesToStartJump != 0) hash ^= FramesToStartJump.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (FramesInvinsible != 0) hash ^= FramesInvinsible.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (ChCollisionTeamId != 0) hash ^= ChCollisionTeamId.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      hash ^= buffList_.GetHashCode();
      hash ^= debuffList_.GetHashCode();
      if (inventory_ != null) hash ^= Inventory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelY);
      }
      if (Speed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Speed);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpeciesId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JoinIndex);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(104);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BeatenCnt);
      }
      if (Hp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxHp);
      }
      if (Mp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Mp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MaxMp);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CharacterState);
      }
      if (FramesInChState != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FramesInChState);
      }
      if (InAir != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(InAir);
      }
      if (JumpTriggered != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(JumpTriggered);
      }
      if (OnWall != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OnWall);
      }
      if (OnWallNormX != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(OnWallNormY);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(OmitGravity);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(OmitSoftPushback);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (RevivalVirtualGridX != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RevivalDirY);
      }
      if (OnSlope != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnSlope);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ForcedCrouching);
      }
      if (SlipJumpTriggered != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(SlipJumpTriggered);
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(PrimarilyOnSlippableHardPushback);
      }
      if (PrevWasCrouching != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PrevWasCrouching);
      }
      if (NewBirth != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(NewBirth);
      }
      if (LowerPartFramesInChState != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(LowerPartFramesInChState);
      }
      if (JumpStarted != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(JumpStarted);
      }
      if (FramesToStartJump != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(FramesToStartJump);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 62);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(178, 62);
        output.WriteString(DisplayName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(186, 62);
        output.WriteString(Avatar);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(136, 64);
        output.WriteInt32(ActiveSkillHit);
      }
      if (FramesInvinsible != 0) {
        output.WriteRawTag(144, 64);
        output.WriteInt32(FramesInvinsible);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      debuffList_.WriteTo(output, _repeated_debuffList_codec);
      if (inventory_ != null) {
        output.WriteRawTag(194, 64);
        output.WriteMessage(Inventory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelY);
      }
      if (Speed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Speed);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpeciesId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JoinIndex);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(104);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BeatenCnt);
      }
      if (Hp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxHp);
      }
      if (Mp != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Mp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(MaxMp);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CharacterState);
      }
      if (FramesInChState != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FramesInChState);
      }
      if (InAir != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(InAir);
      }
      if (JumpTriggered != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(JumpTriggered);
      }
      if (OnWall != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OnWall);
      }
      if (OnWallNormX != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(OnWallNormY);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(OmitGravity);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(OmitSoftPushback);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (RevivalVirtualGridX != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RevivalDirY);
      }
      if (OnSlope != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnSlope);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ForcedCrouching);
      }
      if (SlipJumpTriggered != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(SlipJumpTriggered);
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(PrimarilyOnSlippableHardPushback);
      }
      if (PrevWasCrouching != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PrevWasCrouching);
      }
      if (NewBirth != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(NewBirth);
      }
      if (LowerPartFramesInChState != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(LowerPartFramesInChState);
      }
      if (JumpStarted != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(JumpStarted);
      }
      if (FramesToStartJump != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(FramesToStartJump);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 62);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(178, 62);
        output.WriteString(DisplayName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(186, 62);
        output.WriteString(Avatar);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(136, 64);
        output.WriteInt32(ActiveSkillHit);
      }
      if (FramesInvinsible != 0) {
        output.WriteRawTag(144, 64);
        output.WriteInt32(FramesInvinsible);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      buffList_.WriteTo(ref output, _repeated_buffList_codec);
      debuffList_.WriteTo(ref output, _repeated_debuffList_codec);
      if (inventory_ != null) {
        output.WriteRawTag(194, 64);
        output.WriteMessage(Inventory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeatenCnt);
      }
      if (Hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Mp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MaxMp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CharacterState);
      }
      if (FramesInChState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInChState);
      }
      if (InAir != false) {
        size += 2 + 1;
      }
      if (JumpTriggered != false) {
        size += 2 + 1;
      }
      if (OnWall != false) {
        size += 2 + 1;
      }
      if (OnWallNormX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OnWallNormY);
      }
      if (OmitGravity != false) {
        size += 2 + 1;
      }
      if (OmitSoftPushback != false) {
        size += 2 + 1;
      }
      if (WaivingPatrolCueId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        size += 2 + 1;
      }
      if (RevivalVirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirY);
      }
      if (OnSlope != false) {
        size += 2 + 1;
      }
      if (FrictionVelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        size += 2 + 1;
      }
      if (SlipJumpTriggered != false) {
        size += 2 + 1;
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        size += 2 + 1;
      }
      if (PrevWasCrouching != false) {
        size += 2 + 1;
      }
      if (NewBirth != false) {
        size += 2 + 1;
      }
      if (LowerPartFramesInChState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LowerPartFramesInChState);
      }
      if (JumpStarted != false) {
        size += 2 + 1;
      }
      if (FramesToStartJump != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesToStartJump);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Avatar.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (ActiveSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (FramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInvinsible);
      }
      if (BulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChCollisionTeamId);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      size += debuffList_.CalculateSize(_repeated_debuffList_codec);
      if (inventory_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Inventory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CharacterDownsync other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.FramesCapturedByInertia != 0) {
        FramesCapturedByInertia = other.FramesCapturedByInertia;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.BeatsCnt != 0) {
        BeatsCnt = other.BeatsCnt;
      }
      if (other.BeatenCnt != 0) {
        BeatenCnt = other.BeatenCnt;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.MaxMp != 0) {
        MaxMp = other.MaxMp;
      }
      if (other.CharacterState != global::shared.CharacterState.Idle1) {
        CharacterState = other.CharacterState;
      }
      if (other.FramesInChState != 0) {
        FramesInChState = other.FramesInChState;
      }
      if (other.InAir != false) {
        InAir = other.InAir;
      }
      if (other.JumpTriggered != false) {
        JumpTriggered = other.JumpTriggered;
      }
      if (other.OnWall != false) {
        OnWall = other.OnWall;
      }
      if (other.OnWallNormX != 0) {
        OnWallNormX = other.OnWallNormX;
      }
      if (other.OnWallNormY != 0) {
        OnWallNormY = other.OnWallNormY;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.OmitSoftPushback != false) {
        OmitSoftPushback = other.OmitSoftPushback;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.WaivingSpontaneousPatrol != false) {
        WaivingSpontaneousPatrol = other.WaivingSpontaneousPatrol;
      }
      if (other.RevivalVirtualGridX != 0) {
        RevivalVirtualGridX = other.RevivalVirtualGridX;
      }
      if (other.RevivalVirtualGridY != 0) {
        RevivalVirtualGridY = other.RevivalVirtualGridY;
      }
      if (other.RevivalDirX != 0) {
        RevivalDirX = other.RevivalDirX;
      }
      if (other.RevivalDirY != 0) {
        RevivalDirY = other.RevivalDirY;
      }
      if (other.OnSlope != false) {
        OnSlope = other.OnSlope;
      }
      if (other.FrictionVelX != 0) {
        FrictionVelX = other.FrictionVelX;
      }
      if (other.ForcedCrouching != false) {
        ForcedCrouching = other.ForcedCrouching;
      }
      if (other.SlipJumpTriggered != false) {
        SlipJumpTriggered = other.SlipJumpTriggered;
      }
      if (other.PrimarilyOnSlippableHardPushback != false) {
        PrimarilyOnSlippableHardPushback = other.PrimarilyOnSlippableHardPushback;
      }
      if (other.PrevWasCrouching != false) {
        PrevWasCrouching = other.PrevWasCrouching;
      }
      if (other.NewBirth != false) {
        NewBirth = other.NewBirth;
      }
      if (other.LowerPartFramesInChState != 0) {
        LowerPartFramesInChState = other.LowerPartFramesInChState;
      }
      if (other.JumpStarted != false) {
        JumpStarted = other.JumpStarted;
      }
      if (other.FramesToStartJump != 0) {
        FramesToStartJump = other.FramesToStartJump;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.FramesInvinsible != 0) {
        FramesInvinsible = other.FramesInvinsible;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.ChCollisionTeamId != 0) {
        ChCollisionTeamId = other.ChCollisionTeamId;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      buffList_.Add(other.buffList_);
      debuffList_.Add(other.debuffList_);
      if (other.inventory_ != null) {
        if (inventory_ == null) {
          Inventory = new global::shared.Inventory();
        }
        Inventory.MergeFrom(other.Inventory);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            VelX = input.ReadInt32();
            break;
          }
          case 56: {
            VelY = input.ReadInt32();
            break;
          }
          case 64: {
            Speed = input.ReadInt32();
            break;
          }
          case 72: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 80: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 88: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 96: {
            FramesCapturedByInertia = input.ReadInt32();
            break;
          }
          case 104: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 112: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 120: {
            BeatsCnt = input.ReadInt32();
            break;
          }
          case 128: {
            BeatenCnt = input.ReadInt32();
            break;
          }
          case 136: {
            Hp = input.ReadInt32();
            break;
          }
          case 144: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 152: {
            Mp = input.ReadInt32();
            break;
          }
          case 160: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 176: {
            CharacterState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 184: {
            FramesInChState = input.ReadInt32();
            break;
          }
          case 192: {
            InAir = input.ReadBool();
            break;
          }
          case 200: {
            JumpTriggered = input.ReadBool();
            break;
          }
          case 208: {
            OnWall = input.ReadBool();
            break;
          }
          case 216: {
            OnWallNormX = input.ReadInt32();
            break;
          }
          case 224: {
            OnWallNormY = input.ReadInt32();
            break;
          }
          case 232: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 240: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 248: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 256: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 264: {
            RevivalVirtualGridX = input.ReadInt32();
            break;
          }
          case 272: {
            RevivalVirtualGridY = input.ReadInt32();
            break;
          }
          case 280: {
            RevivalDirX = input.ReadInt32();
            break;
          }
          case 288: {
            RevivalDirY = input.ReadInt32();
            break;
          }
          case 296: {
            OnSlope = input.ReadBool();
            break;
          }
          case 304: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 312: {
            ForcedCrouching = input.ReadBool();
            break;
          }
          case 320: {
            SlipJumpTriggered = input.ReadBool();
            break;
          }
          case 328: {
            PrimarilyOnSlippableHardPushback = input.ReadBool();
            break;
          }
          case 336: {
            PrevWasCrouching = input.ReadBool();
            break;
          }
          case 344: {
            NewBirth = input.ReadBool();
            break;
          }
          case 352: {
            LowerPartFramesInChState = input.ReadInt32();
            break;
          }
          case 360: {
            JumpStarted = input.ReadBool();
            break;
          }
          case 368: {
            FramesToStartJump = input.ReadInt32();
            break;
          }
          case 7978: {
            Name = input.ReadString();
            break;
          }
          case 7986: {
            DisplayName = input.ReadString();
            break;
          }
          case 7994: {
            Avatar = input.ReadString();
            break;
          }
          case 8192: {
            ActiveSkillId = input.ReadInt32();
            break;
          }
          case 8200: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 8208: {
            FramesInvinsible = input.ReadInt32();
            break;
          }
          case 8216: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 8224: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8242: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 8250: {
            debuffList_.AddEntriesFrom(input, _repeated_debuffList_codec);
            break;
          }
          case 8258: {
            if (inventory_ == null) {
              Inventory = new global::shared.Inventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            VelX = input.ReadInt32();
            break;
          }
          case 56: {
            VelY = input.ReadInt32();
            break;
          }
          case 64: {
            Speed = input.ReadInt32();
            break;
          }
          case 72: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 80: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 88: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 96: {
            FramesCapturedByInertia = input.ReadInt32();
            break;
          }
          case 104: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 112: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 120: {
            BeatsCnt = input.ReadInt32();
            break;
          }
          case 128: {
            BeatenCnt = input.ReadInt32();
            break;
          }
          case 136: {
            Hp = input.ReadInt32();
            break;
          }
          case 144: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 152: {
            Mp = input.ReadInt32();
            break;
          }
          case 160: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 176: {
            CharacterState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 184: {
            FramesInChState = input.ReadInt32();
            break;
          }
          case 192: {
            InAir = input.ReadBool();
            break;
          }
          case 200: {
            JumpTriggered = input.ReadBool();
            break;
          }
          case 208: {
            OnWall = input.ReadBool();
            break;
          }
          case 216: {
            OnWallNormX = input.ReadInt32();
            break;
          }
          case 224: {
            OnWallNormY = input.ReadInt32();
            break;
          }
          case 232: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 240: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 248: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 256: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 264: {
            RevivalVirtualGridX = input.ReadInt32();
            break;
          }
          case 272: {
            RevivalVirtualGridY = input.ReadInt32();
            break;
          }
          case 280: {
            RevivalDirX = input.ReadInt32();
            break;
          }
          case 288: {
            RevivalDirY = input.ReadInt32();
            break;
          }
          case 296: {
            OnSlope = input.ReadBool();
            break;
          }
          case 304: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 312: {
            ForcedCrouching = input.ReadBool();
            break;
          }
          case 320: {
            SlipJumpTriggered = input.ReadBool();
            break;
          }
          case 328: {
            PrimarilyOnSlippableHardPushback = input.ReadBool();
            break;
          }
          case 336: {
            PrevWasCrouching = input.ReadBool();
            break;
          }
          case 344: {
            NewBirth = input.ReadBool();
            break;
          }
          case 352: {
            LowerPartFramesInChState = input.ReadInt32();
            break;
          }
          case 360: {
            JumpStarted = input.ReadBool();
            break;
          }
          case 368: {
            FramesToStartJump = input.ReadInt32();
            break;
          }
          case 7978: {
            Name = input.ReadString();
            break;
          }
          case 7986: {
            DisplayName = input.ReadString();
            break;
          }
          case 7994: {
            Avatar = input.ReadString();
            break;
          }
          case 8192: {
            ActiveSkillId = input.ReadInt32();
            break;
          }
          case 8200: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 8208: {
            FramesInvinsible = input.ReadInt32();
            break;
          }
          case 8216: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 8224: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8242: {
            buffList_.AddEntriesFrom(ref input, _repeated_buffList_codec);
            break;
          }
          case 8250: {
            debuffList_.AddEntriesFrom(ref input, _repeated_debuffList_codec);
            break;
          }
          case 8258: {
            if (inventory_ == null) {
              Inventory = new global::shared.Inventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameDecoded : pb::IMessage<InputFrameDecoded>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameDecoded> _parser = new pb::MessageParser<InputFrameDecoded>(() => new InputFrameDecoded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameDecoded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded(InputFrameDecoded other) : this() {
      dx_ = other.dx_;
      dy_ = other.dy_;
      btnALevel_ = other.btnALevel_;
      btnBLevel_ = other.btnBLevel_;
      btnCLevel_ = other.btnCLevel_;
      btnDLevel_ = other.btnDLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded Clone() {
      return new InputFrameDecoded(this);
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 1;
    private int dx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dx {
      get { return dx_; }
      set {
        dx_ = value;
      }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 2;
    private int dy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dy {
      get { return dy_; }
      set {
        dy_ = value;
      }
    }

    /// <summary>Field number for the "btnALevel" field.</summary>
    public const int BtnALevelFieldNumber = 3;
    private int btnALevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnALevel {
      get { return btnALevel_; }
      set {
        btnALevel_ = value;
      }
    }

    /// <summary>Field number for the "btnBLevel" field.</summary>
    public const int BtnBLevelFieldNumber = 4;
    private int btnBLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnBLevel {
      get { return btnBLevel_; }
      set {
        btnBLevel_ = value;
      }
    }

    /// <summary>Field number for the "btnCLevel" field.</summary>
    public const int BtnCLevelFieldNumber = 5;
    private int btnCLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnCLevel {
      get { return btnCLevel_; }
      set {
        btnCLevel_ = value;
      }
    }

    /// <summary>Field number for the "btnDLevel" field.</summary>
    public const int BtnDLevelFieldNumber = 6;
    private int btnDLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnDLevel {
      get { return btnDLevel_; }
      set {
        btnDLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDecoded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameDecoded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dx != other.Dx) return false;
      if (Dy != other.Dy) return false;
      if (BtnALevel != other.BtnALevel) return false;
      if (BtnBLevel != other.BtnBLevel) return false;
      if (BtnCLevel != other.BtnCLevel) return false;
      if (BtnDLevel != other.BtnDLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Dx != 0) hash ^= Dx.GetHashCode();
      if (Dy != 0) hash ^= Dy.GetHashCode();
      if (BtnALevel != 0) hash ^= BtnALevel.GetHashCode();
      if (BtnBLevel != 0) hash ^= BtnBLevel.GetHashCode();
      if (BtnCLevel != 0) hash ^= BtnCLevel.GetHashCode();
      if (BtnDLevel != 0) hash ^= BtnDLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Dx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dx);
      }
      if (Dy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dy);
      }
      if (BtnALevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtnALevel);
      }
      if (BtnBLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BtnDLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Dx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dx);
      }
      if (Dy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dy);
      }
      if (BtnALevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtnALevel);
      }
      if (BtnBLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BtnDLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Dx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dx);
      }
      if (Dy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dy);
      }
      if (BtnALevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnALevel);
      }
      if (BtnBLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnDLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameDecoded other) {
      if (other == null) {
        return;
      }
      if (other.Dx != 0) {
        Dx = other.Dx;
      }
      if (other.Dy != 0) {
        Dy = other.Dy;
      }
      if (other.BtnALevel != 0) {
        BtnALevel = other.BtnALevel;
      }
      if (other.BtnBLevel != 0) {
        BtnBLevel = other.BtnBLevel;
      }
      if (other.BtnCLevel != 0) {
        BtnCLevel = other.BtnCLevel;
      }
      if (other.BtnDLevel != 0) {
        BtnDLevel = other.BtnDLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dx = input.ReadInt32();
            break;
          }
          case 16: {
            Dy = input.ReadInt32();
            break;
          }
          case 24: {
            BtnALevel = input.ReadInt32();
            break;
          }
          case 32: {
            BtnBLevel = input.ReadInt32();
            break;
          }
          case 40: {
            BtnCLevel = input.ReadInt32();
            break;
          }
          case 48: {
            BtnDLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Dx = input.ReadInt32();
            break;
          }
          case 16: {
            Dy = input.ReadInt32();
            break;
          }
          case 24: {
            BtnALevel = input.ReadInt32();
            break;
          }
          case 32: {
            BtnBLevel = input.ReadInt32();
            break;
          }
          case 40: {
            BtnCLevel = input.ReadInt32();
            break;
          }
          case 48: {
            BtnDLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameUpsync : pb::IMessage<InputFrameUpsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameUpsync> _parser = new pb::MessageParser<InputFrameUpsync>(() => new InputFrameUpsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameUpsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync(InputFrameUpsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      encoded_ = other.encoded_;
      joinIndex_ = other.joinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync Clone() {
      return new InputFrameUpsync(this);
    }

    /// <summary>Field number for the "inputFrameId" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 2;
    private ulong encoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameUpsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameUpsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if (Encoded != other.Encoded) return false;
      if (JoinIndex != other.JoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      if (Encoded != 0UL) hash ^= Encoded.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      if (Encoded != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Encoded);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      if (Encoded != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Encoded);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      if (Encoded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Encoded);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameUpsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      if (other.Encoded != 0UL) {
        Encoded = other.Encoded;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            Encoded = input.ReadUInt64();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            Encoded = input.ReadUInt64();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameDownsync : pb::IMessage<InputFrameDownsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameDownsync> _parser = new pb::MessageParser<InputFrameDownsync>(() => new InputFrameDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync(InputFrameDownsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      inputList_ = other.inputList_.Clone();
      confirmedList_ = other.confirmedList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync Clone() {
      return new InputFrameDownsync(this);
    }

    /// <summary>Field number for the "inputFrameId" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "inputList" field.</summary>
    public const int InputListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_inputList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> inputList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// Indexed by "joinIndex", we try to compress the "single player input" into 1 word (64-bit for 64-bit Golang runtime) because atomic compare-and-swap only works on 1 word. Although CAS on custom struct is possible in C# https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=netstandard-2.1, using a single word is still faster whenever possible. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> InputList {
      get { return inputList_; }
    }

    /// <summary>Field number for the "confirmedList" field.</summary>
    public const int ConfirmedListFieldNumber = 3;
    private ulong confirmedList_;
    /// <summary>
    /// Indexed by "joinIndex", same compression concern as above
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ConfirmedList {
      get { return confirmedList_; }
      set {
        confirmedList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if(!inputList_.Equals(other.inputList_)) return false;
      if (ConfirmedList != other.ConfirmedList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      hash ^= inputList_.GetHashCode();
      if (ConfirmedList != 0UL) hash ^= ConfirmedList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      inputList_.WriteTo(output, _repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConfirmedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      inputList_.WriteTo(ref output, _repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConfirmedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      size += inputList_.CalculateSize(_repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConfirmedList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameDownsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      inputList_.Add(other.inputList_);
      if (other.ConfirmedList != 0UL) {
        ConfirmedList = other.ConfirmedList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            inputList_.AddEntriesFrom(input, _repeated_inputList_codec);
            break;
          }
          case 24: {
            ConfirmedList = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            inputList_.AddEntriesFrom(ref input, _repeated_inputList_codec);
            break;
          }
          case 24: {
            ConfirmedList = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WsReq : pb::IMessage<WsReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WsReq> _parser = new pb::MessageParser<WsReq>(() => new WsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq(WsReq other) : this() {
      playerId_ = other.playerId_;
      act_ = other.act_;
      joinIndex_ = other.joinIndex_;
      ackingFrameId_ = other.ackingFrameId_;
      ackingInputFrameId_ = other.ackingInputFrameId_;
      authKey_ = other.authKey_;
      inputFrameUpsyncBatch_ = other.inputFrameUpsyncBatch_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq Clone() {
      return new WsReq(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "ackingFrameId" field.</summary>
    public const int AckingFrameIdFieldNumber = 4;
    private int ackingFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckingFrameId {
      get { return ackingFrameId_; }
      set {
        ackingFrameId_ = value;
      }
    }

    /// <summary>Field number for the "ackingInputFrameId" field.</summary>
    public const int AckingInputFrameIdFieldNumber = 5;
    private int ackingInputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckingInputFrameId {
      get { return ackingInputFrameId_; }
      set {
        ackingInputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "authKey" field.</summary>
    public const int AuthKeyFieldNumber = 6;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameUpsyncBatch" field.</summary>
    public const int InputFrameUpsyncBatchFieldNumber = 7;
    private static readonly pb::FieldCodec<global::shared.InputFrameUpsync> _repeated_inputFrameUpsyncBatch_codec
        = pb::FieldCodec.ForMessage(58, global::shared.InputFrameUpsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameUpsync> inputFrameUpsyncBatch_ = new pbc::RepeatedField<global::shared.InputFrameUpsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameUpsync> InputFrameUpsyncBatch {
      get { return inputFrameUpsyncBatch_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Act != other.Act) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (AckingFrameId != other.AckingFrameId) return false;
      if (AckingInputFrameId != other.AckingInputFrameId) return false;
      if (AuthKey != other.AuthKey) return false;
      if(!inputFrameUpsyncBatch_.Equals(other.inputFrameUpsyncBatch_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (AckingFrameId != 0) hash ^= AckingFrameId.GetHashCode();
      if (AckingInputFrameId != 0) hash ^= AckingInputFrameId.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      hash ^= inputFrameUpsyncBatch_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (AckingFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AuthKey);
      }
      inputFrameUpsyncBatch_.WriteTo(output, _repeated_inputFrameUpsyncBatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (AckingFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AuthKey);
      }
      inputFrameUpsyncBatch_.WriteTo(ref output, _repeated_inputFrameUpsyncBatch_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (AckingFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      size += inputFrameUpsyncBatch_.CalculateSize(_repeated_inputFrameUpsyncBatch_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WsReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.AckingFrameId != 0) {
        AckingFrameId = other.AckingFrameId;
      }
      if (other.AckingInputFrameId != 0) {
        AckingInputFrameId = other.AckingInputFrameId;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      inputFrameUpsyncBatch_.Add(other.inputFrameUpsyncBatch_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            AckingFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            AckingInputFrameId = input.ReadInt32();
            break;
          }
          case 48: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 58: {
            inputFrameUpsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameUpsyncBatch_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            AckingFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            AckingInputFrameId = input.ReadInt32();
            break;
          }
          case 48: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 58: {
            inputFrameUpsyncBatch_.AddEntriesFrom(ref input, _repeated_inputFrameUpsyncBatch_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputBufferSnapshot : pb::IMessage<InputBufferSnapshot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputBufferSnapshot> _parser = new pb::MessageParser<InputBufferSnapshot>(() => new InputBufferSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputBufferSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot(InputBufferSnapshot other) : this() {
      refRenderFrameId_ = other.refRenderFrameId_;
      unconfirmedMask_ = other.unconfirmedMask_;
      toSendInputFrameDownsyncs_ = other.toSendInputFrameDownsyncs_.Clone();
      shouldForceResync_ = other.shouldForceResync_;
      peerJoinIndex_ = other.peerJoinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot Clone() {
      return new InputBufferSnapshot(this);
    }

    /// <summary>Field number for the "refRenderFrameId" field.</summary>
    public const int RefRenderFrameIdFieldNumber = 1;
    private int refRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefRenderFrameId {
      get { return refRenderFrameId_; }
      set {
        refRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmedMask" field.</summary>
    public const int UnconfirmedMaskFieldNumber = 2;
    private ulong unconfirmedMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UnconfirmedMask {
      get { return unconfirmedMask_; }
      set {
        unconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "toSendInputFrameDownsyncs" field.</summary>
    public const int ToSendInputFrameDownsyncsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::shared.InputFrameDownsync> _repeated_toSendInputFrameDownsyncs_codec
        = pb::FieldCodec.ForMessage(26, global::shared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameDownsync> toSendInputFrameDownsyncs_ = new pbc::RepeatedField<global::shared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameDownsync> ToSendInputFrameDownsyncs {
      get { return toSendInputFrameDownsyncs_; }
    }

    /// <summary>Field number for the "shouldForceResync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 4;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "peerJoinIndex" field.</summary>
    public const int PeerJoinIndexFieldNumber = 5;
    private int peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputBufferSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputBufferSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefRenderFrameId != other.RefRenderFrameId) return false;
      if (UnconfirmedMask != other.UnconfirmedMask) return false;
      if(!toSendInputFrameDownsyncs_.Equals(other.toSendInputFrameDownsyncs_)) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RefRenderFrameId != 0) hash ^= RefRenderFrameId.GetHashCode();
      if (UnconfirmedMask != 0UL) hash ^= UnconfirmedMask.GetHashCode();
      hash ^= toSendInputFrameDownsyncs_.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RefRenderFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnconfirmedMask);
      }
      toSendInputFrameDownsyncs_.WriteTo(output, _repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShouldForceResync);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RefRenderFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnconfirmedMask);
      }
      toSendInputFrameDownsyncs_.WriteTo(ref output, _repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShouldForceResync);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RefRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnconfirmedMask);
      }
      size += toSendInputFrameDownsyncs_.CalculateSize(_repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        size += 1 + 1;
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputBufferSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.RefRenderFrameId != 0) {
        RefRenderFrameId = other.RefRenderFrameId;
      }
      if (other.UnconfirmedMask != 0UL) {
        UnconfirmedMask = other.UnconfirmedMask;
      }
      toSendInputFrameDownsyncs_.Add(other.toSendInputFrameDownsyncs_);
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefRenderFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 26: {
            toSendInputFrameDownsyncs_.AddEntriesFrom(input, _repeated_toSendInputFrameDownsyncs_codec);
            break;
          }
          case 32: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 40: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RefRenderFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 26: {
            toSendInputFrameDownsyncs_.AddEntriesFrom(ref input, _repeated_toSendInputFrameDownsyncs_codec);
            break;
          }
          case 32: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 40: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PatrolCue : pb::IMessage<PatrolCue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PatrolCue> _parser = new pb::MessageParser<PatrolCue>(() => new PatrolCue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PatrolCue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue(PatrolCue other) : this() {
      id_ = other.id_;
      flAct_ = other.flAct_;
      frAct_ = other.frAct_;
      flCaptureFrames_ = other.flCaptureFrames_;
      frCaptureFrames_ = other.frCaptureFrames_;
      fdAct_ = other.fdAct_;
      fuAct_ = other.fuAct_;
      fdCaptureFrames_ = other.fdCaptureFrames_;
      fuCaptureFrames_ = other.fuCaptureFrames_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue Clone() {
      return new PatrolCue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "flAct" field.</summary>
    public const int FlActFieldNumber = 2;
    private ulong flAct_;
    /// <summary>
    /// "input when colliding from the left side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FlAct {
      get { return flAct_; }
      set {
        flAct_ = value;
      }
    }

    /// <summary>Field number for the "frAct" field.</summary>
    public const int FrActFieldNumber = 3;
    private ulong frAct_;
    /// <summary>
    /// "input when colliding from the right side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrAct {
      get { return frAct_; }
      set {
        frAct_ = value;
      }
    }

    /// <summary>Field number for the "flCaptureFrames" field.</summary>
    public const int FlCaptureFramesFieldNumber = 4;
    private ulong flCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FlCaptureFrames {
      get { return flCaptureFrames_; }
      set {
        flCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "frCaptureFrames" field.</summary>
    public const int FrCaptureFramesFieldNumber = 5;
    private ulong frCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrCaptureFrames {
      get { return frCaptureFrames_; }
      set {
        frCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fdAct" field.</summary>
    public const int FdActFieldNumber = 6;
    private ulong fdAct_;
    /// <summary>
    /// "input when colliding from the down side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FdAct {
      get { return fdAct_; }
      set {
        fdAct_ = value;
      }
    }

    /// <summary>Field number for the "fuAct" field.</summary>
    public const int FuActFieldNumber = 7;
    private ulong fuAct_;
    /// <summary>
    /// "input when colliding from the up side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FuAct {
      get { return fuAct_; }
      set {
        fuAct_ = value;
      }
    }

    /// <summary>Field number for the "fdCaptureFrames" field.</summary>
    public const int FdCaptureFramesFieldNumber = 8;
    private ulong fdCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FdCaptureFrames {
      get { return fdCaptureFrames_; }
      set {
        fdCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fuCaptureFrames" field.</summary>
    public const int FuCaptureFramesFieldNumber = 9;
    private ulong fuCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FuCaptureFrames {
      get { return fuCaptureFrames_; }
      set {
        fuCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PatrolCue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PatrolCue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FlAct != other.FlAct) return false;
      if (FrAct != other.FrAct) return false;
      if (FlCaptureFrames != other.FlCaptureFrames) return false;
      if (FrCaptureFrames != other.FrCaptureFrames) return false;
      if (FdAct != other.FdAct) return false;
      if (FuAct != other.FuAct) return false;
      if (FdCaptureFrames != other.FdCaptureFrames) return false;
      if (FuCaptureFrames != other.FuCaptureFrames) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FlAct != 0UL) hash ^= FlAct.GetHashCode();
      if (FrAct != 0UL) hash ^= FrAct.GetHashCode();
      if (FlCaptureFrames != 0UL) hash ^= FlCaptureFrames.GetHashCode();
      if (FrCaptureFrames != 0UL) hash ^= FrCaptureFrames.GetHashCode();
      if (FdAct != 0UL) hash ^= FdAct.GetHashCode();
      if (FuAct != 0UL) hash ^= FuAct.GetHashCode();
      if (FdCaptureFrames != 0UL) hash ^= FdCaptureFrames.GetHashCode();
      if (FuCaptureFrames != 0UL) hash ^= FuCaptureFrames.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FlAct != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FlAct);
      }
      if (FrAct != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrAct);
      }
      if (FlCaptureFrames != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FdAct);
      }
      if (FuAct != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FuAct);
      }
      if (FdCaptureFrames != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FlAct != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FlAct);
      }
      if (FrAct != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrAct);
      }
      if (FlCaptureFrames != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FdAct);
      }
      if (FuAct != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FuAct);
      }
      if (FdCaptureFrames != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FlAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FlAct);
      }
      if (FrAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrAct);
      }
      if (FlCaptureFrames != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FdAct);
      }
      if (FuAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FuAct);
      }
      if (FdCaptureFrames != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PatrolCue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FlAct != 0UL) {
        FlAct = other.FlAct;
      }
      if (other.FrAct != 0UL) {
        FrAct = other.FrAct;
      }
      if (other.FlCaptureFrames != 0UL) {
        FlCaptureFrames = other.FlCaptureFrames;
      }
      if (other.FrCaptureFrames != 0UL) {
        FrCaptureFrames = other.FrCaptureFrames;
      }
      if (other.FdAct != 0UL) {
        FdAct = other.FdAct;
      }
      if (other.FuAct != 0UL) {
        FuAct = other.FuAct;
      }
      if (other.FdCaptureFrames != 0UL) {
        FdCaptureFrames = other.FdCaptureFrames;
      }
      if (other.FuCaptureFrames != 0UL) {
        FuCaptureFrames = other.FuCaptureFrames;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FlAct = input.ReadUInt64();
            break;
          }
          case 24: {
            FrAct = input.ReadUInt64();
            break;
          }
          case 32: {
            FlCaptureFrames = input.ReadUInt64();
            break;
          }
          case 40: {
            FrCaptureFrames = input.ReadUInt64();
            break;
          }
          case 48: {
            FdAct = input.ReadUInt64();
            break;
          }
          case 56: {
            FuAct = input.ReadUInt64();
            break;
          }
          case 64: {
            FdCaptureFrames = input.ReadUInt64();
            break;
          }
          case 72: {
            FuCaptureFrames = input.ReadUInt64();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FlAct = input.ReadUInt64();
            break;
          }
          case 24: {
            FrAct = input.ReadUInt64();
            break;
          }
          case 32: {
            FlCaptureFrames = input.ReadUInt64();
            break;
          }
          case 40: {
            FrCaptureFrames = input.ReadUInt64();
            break;
          }
          case 48: {
            FdAct = input.ReadUInt64();
            break;
          }
          case 56: {
            FuAct = input.ReadUInt64();
            break;
          }
          case 64: {
            FdCaptureFrames = input.ReadUInt64();
            break;
          }
          case 72: {
            FuCaptureFrames = input.ReadUInt64();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VisionBox : pb::IMessage<VisionBox>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VisionBox> _parser = new pb::MessageParser<VisionBox>(() => new VisionBox());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VisionBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VisionBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VisionBox(VisionBox other) : this() {
      bottomLeftX_ = other.bottomLeftX_;
      bottomLeftY_ = other.bottomLeftY_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VisionBox Clone() {
      return new VisionBox(this);
    }

    /// <summary>Field number for the "bottomLeftX" field.</summary>
    public const int BottomLeftXFieldNumber = 1;
    private int bottomLeftX_;
    /// <summary>
    /// all values are relative to (CharacterDownsync.dirX=+2, CharacterDownsync.virtualGridX, CharacterDownsync.virtualGridY) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BottomLeftX {
      get { return bottomLeftX_; }
      set {
        bottomLeftX_ = value;
      }
    }

    /// <summary>Field number for the "bottomLeftY" field.</summary>
    public const int BottomLeftYFieldNumber = 2;
    private int bottomLeftY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BottomLeftY {
      get { return bottomLeftY_; }
      set {
        bottomLeftY_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VisionBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VisionBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BottomLeftX != other.BottomLeftX) return false;
      if (BottomLeftY != other.BottomLeftY) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BottomLeftX != 0) hash ^= BottomLeftX.GetHashCode();
      if (BottomLeftY != 0) hash ^= BottomLeftY.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BottomLeftX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BottomLeftX);
      }
      if (BottomLeftY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BottomLeftY);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BottomLeftX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BottomLeftX);
      }
      if (BottomLeftY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BottomLeftY);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BottomLeftX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BottomLeftX);
      }
      if (BottomLeftY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BottomLeftY);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VisionBox other) {
      if (other == null) {
        return;
      }
      if (other.BottomLeftX != 0) {
        BottomLeftX = other.BottomLeftX;
      }
      if (other.BottomLeftY != 0) {
        BottomLeftY = other.BottomLeftY;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BottomLeftX = input.ReadInt32();
            break;
          }
          case 16: {
            BottomLeftY = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BottomLeftX = input.ReadInt32();
            break;
          }
          case 16: {
            BottomLeftY = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VfxConfig : pb::IMessage<VfxConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VfxConfig> _parser = new pb::MessageParser<VfxConfig>(() => new VfxConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VfxConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig(VfxConfig other) : this() {
      speciesId_ = other.speciesId_;
      motionType_ = other.motionType_;
      durationType_ = other.durationType_;
      onCharacter_ = other.onCharacter_;
      onBullet_ = other.onBullet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig Clone() {
      return new VfxConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "motionType" field.</summary>
    public const int MotionTypeFieldNumber = 2;
    private global::shared.VfxMotionType motionType_ = global::shared.VfxMotionType.NoMotion;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.VfxMotionType MotionType {
      get { return motionType_; }
      set {
        motionType_ = value;
      }
    }

    /// <summary>Field number for the "durationType" field.</summary>
    public const int DurationTypeFieldNumber = 3;
    private global::shared.VfxDurationType durationType_ = global::shared.VfxDurationType.OneOff;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.VfxDurationType DurationType {
      get { return durationType_; }
      set {
        durationType_ = value;
      }
    }

    /// <summary>Field number for the "onCharacter" field.</summary>
    public const int OnCharacterFieldNumber = 4;
    private bool onCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnCharacter {
      get { return onCharacter_; }
      set {
        onCharacter_ = value;
      }
    }

    /// <summary>Field number for the "onBullet" field.</summary>
    public const int OnBulletFieldNumber = 5;
    private bool onBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnBullet {
      get { return onBullet_; }
      set {
        onBullet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VfxConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VfxConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (MotionType != other.MotionType) return false;
      if (DurationType != other.DurationType) return false;
      if (OnCharacter != other.OnCharacter) return false;
      if (OnBullet != other.OnBullet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (MotionType != global::shared.VfxMotionType.NoMotion) hash ^= MotionType.GetHashCode();
      if (DurationType != global::shared.VfxDurationType.OneOff) hash ^= DurationType.GetHashCode();
      if (OnCharacter != false) hash ^= OnCharacter.GetHashCode();
      if (OnBullet != false) hash ^= OnBullet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DurationType);
      }
      if (OnCharacter != false) {
        output.WriteRawTag(32);
        output.WriteBool(OnCharacter);
      }
      if (OnBullet != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnBullet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DurationType);
      }
      if (OnCharacter != false) {
        output.WriteRawTag(32);
        output.WriteBool(OnCharacter);
      }
      if (OnBullet != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnBullet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DurationType);
      }
      if (OnCharacter != false) {
        size += 1 + 1;
      }
      if (OnBullet != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VfxConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.MotionType != global::shared.VfxMotionType.NoMotion) {
        MotionType = other.MotionType;
      }
      if (other.DurationType != global::shared.VfxDurationType.OneOff) {
        DurationType = other.DurationType;
      }
      if (other.OnCharacter != false) {
        OnCharacter = other.OnCharacter;
      }
      if (other.OnBullet != false) {
        OnBullet = other.OnBullet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            MotionType = (global::shared.VfxMotionType) input.ReadEnum();
            break;
          }
          case 24: {
            DurationType = (global::shared.VfxDurationType) input.ReadEnum();
            break;
          }
          case 32: {
            OnCharacter = input.ReadBool();
            break;
          }
          case 40: {
            OnBullet = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            MotionType = (global::shared.VfxMotionType) input.ReadEnum();
            break;
          }
          case 24: {
            DurationType = (global::shared.VfxDurationType) input.ReadEnum();
            break;
          }
          case 32: {
            OnCharacter = input.ReadBool();
            break;
          }
          case 40: {
            OnBullet = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BulletConfig : pb::IMessage<BulletConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BulletConfig> _parser = new pb::MessageParser<BulletConfig>(() => new BulletConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BulletConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig(BulletConfig other) : this() {
      startupFrames_ = other.startupFrames_;
      cancellableStFrame_ = other.cancellableStFrame_;
      cancellableEdFrame_ = other.cancellableEdFrame_;
      activeFrames_ = other.activeFrames_;
      hitStunFrames_ = other.hitStunFrames_;
      blockStunFrames_ = other.blockStunFrames_;
      pushbackVelX_ = other.pushbackVelX_;
      pushbackVelY_ = other.pushbackVelY_;
      damage_ = other.damage_;
      selfLockVelX_ = other.selfLockVelX_;
      selfLockVelY_ = other.selfLockVelY_;
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      blowUp_ = other.blowUp_;
      speciesId_ = other.speciesId_;
      explosionFrames_ = other.explosionFrames_;
      bType_ = other.bType_;
      mhType_ = other.mhType_;
      simultaneousMultiHitCnt_ = other.simultaneousMultiHitCnt_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      cancelTransit_ = other.cancelTransit_.Clone();
      repeatQuota_ = other.repeatQuota_;
      activeVfxSpeciesId_ = other.activeVfxSpeciesId_;
      explosionVfxSpeciesId_ = other.explosionVfxSpeciesId_;
      allowsWalking_ = other.allowsWalking_;
      allowsCrouching_ = other.allowsCrouching_;
      hardness_ = other.hardness_;
      startupInvinsibleFrames_ = other.startupInvinsibleFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      perpAccMag_ = other.perpAccMag_;
      delaySelfVelToActive_ = other.delaySelfVelToActive_;
      speedIfNotHit_ = other.speedIfNotHit_;
      collisionTypeMask_ = other.collisionTypeMask_;
      takesGravity_ = other.takesGravity_;
      characterEmitSfxName_ = other.characterEmitSfxName_;
      fireballEmitSfxName_ = other.fireballEmitSfxName_;
      explosionSfxName_ = other.explosionSfxName_;
      activeSfxName_ = other.activeSfxName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig Clone() {
      return new BulletConfig(this);
    }

    /// <summary>Field number for the "startupFrames" field.</summary>
    public const int StartupFramesFieldNumber = 1;
    private int startupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartupFrames {
      get { return startupFrames_; }
      set {
        startupFrames_ = value;
      }
    }

    /// <summary>Field number for the "cancellableStFrame" field.</summary>
    public const int CancellableStFrameFieldNumber = 2;
    private int cancellableStFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CancellableStFrame {
      get { return cancellableStFrame_; }
      set {
        cancellableStFrame_ = value;
      }
    }

    /// <summary>Field number for the "cancellableEdFrame" field.</summary>
    public const int CancellableEdFrameFieldNumber = 3;
    private int cancellableEdFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CancellableEdFrame {
      get { return cancellableEdFrame_; }
      set {
        cancellableEdFrame_ = value;
      }
    }

    /// <summary>Field number for the "activeFrames" field.</summary>
    public const int ActiveFramesFieldNumber = 4;
    private int activeFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveFrames {
      get { return activeFrames_; }
      set {
        activeFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitStunFrames" field.</summary>
    public const int HitStunFramesFieldNumber = 5;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "blockStunFrames" field.</summary>
    public const int BlockStunFramesFieldNumber = 6;
    private int blockStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlockStunFrames {
      get { return blockStunFrames_; }
      set {
        blockStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "pushbackVelX" field.</summary>
    public const int PushbackVelXFieldNumber = 7;
    private int pushbackVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PushbackVelX {
      get { return pushbackVelX_; }
      set {
        pushbackVelX_ = value;
      }
    }

    /// <summary>Field number for the "pushbackVelY" field.</summary>
    public const int PushbackVelYFieldNumber = 8;
    private int pushbackVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PushbackVelY {
      get { return pushbackVelY_; }
      set {
        pushbackVelY_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 9;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "selfLockVelX" field.</summary>
    public const int SelfLockVelXFieldNumber = 10;
    private int selfLockVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SelfLockVelX {
      get { return selfLockVelX_; }
      set {
        selfLockVelX_ = value;
      }
    }

    /// <summary>Field number for the "selfLockVelY" field.</summary>
    public const int SelfLockVelYFieldNumber = 11;
    private int selfLockVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SelfLockVelY {
      get { return selfLockVelY_; }
      set {
        selfLockVelY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetX" field.</summary>
    public const int HitboxOffsetXFieldNumber = 12;
    private int hitboxOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetY" field.</summary>
    public const int HitboxOffsetYFieldNumber = 13;
    private int hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeX" field.</summary>
    public const int HitboxSizeXFieldNumber = 14;
    private int hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeY" field.</summary>
    public const int HitboxSizeYFieldNumber = 15;
    private int hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "blowUp" field.</summary>
    public const int BlowUpFieldNumber = 16;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 17;
    private int speciesId_;
    /// <summary>
    /// For fireball, this SpeciesId specifies both the active animation and the explosion animation (if "explosionSpeciesId" not explicitly assigned), for melee it specifies the explosion animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionFrames" field.</summary>
    public const int ExplosionFramesFieldNumber = 18;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "bType" field.</summary>
    public const int BTypeFieldNumber = 19;
    private global::shared.BulletType bType_ = global::shared.BulletType.Undetermined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletType BType {
      get { return bType_; }
      set {
        bType_ = value;
      }
    }

    /// <summary>Field number for the "mhType" field.</summary>
    public const int MhTypeFieldNumber = 20;
    private global::shared.MultiHitType mhType_ = global::shared.MultiHitType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.MultiHitType MhType {
      get { return mhType_; }
      set {
        mhType_ = value;
      }
    }

    /// <summary>Field number for the "simultaneousMultiHitCnt" field.</summary>
    public const int SimultaneousMultiHitCntFieldNumber = 21;
    private uint simultaneousMultiHitCnt_;
    /// <summary>
    /// marks how many simultaneous bullets are left, default to 0 indicating that the current bullet is the only one to fire 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SimultaneousMultiHitCnt {
      get { return simultaneousMultiHitCnt_; }
      set {
        simultaneousMultiHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 22;
    private int speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 23;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 24;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "cancelTransit" field.</summary>
    public const int CancelTransitFieldNumber = 25;
    private static readonly pbc::MapField<int, int>.Codec _map_cancelTransit_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 202);
    private readonly pbc::MapField<int, int> cancelTransit_ = new pbc::MapField<int, int>();
    /// <summary>
    /// patternId -> skillId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, int> CancelTransit {
      get { return cancelTransit_; }
    }

    /// <summary>Field number for the "repeatQuota" field.</summary>
    public const int RepeatQuotaFieldNumber = 26;
    private int repeatQuota_;
    /// <summary>
    /// for long lasting bullet, applicable for "mhType == (FromPrevHitActual | FromPrevHitAnyway)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepeatQuota {
      get { return repeatQuota_; }
      set {
        repeatQuota_ = value;
      }
    }

    /// <summary>Field number for the "activeVfxSpeciesId" field.</summary>
    public const int ActiveVfxSpeciesIdFieldNumber = 27;
    private int activeVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveVfxSpeciesId {
      get { return activeVfxSpeciesId_; }
      set {
        activeVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionVfxSpeciesId" field.</summary>
    public const int ExplosionVfxSpeciesIdFieldNumber = 28;
    private int explosionVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when exploding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionVfxSpeciesId {
      get { return explosionVfxSpeciesId_; }
      set {
        explosionVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "allowsWalking" field.</summary>
    public const int AllowsWalkingFieldNumber = 29;
    private bool allowsWalking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowsWalking {
      get { return allowsWalking_; }
      set {
        allowsWalking_ = value;
      }
    }

    /// <summary>Field number for the "allowsCrouching" field.</summary>
    public const int AllowsCrouchingFieldNumber = 30;
    private bool allowsCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowsCrouching {
      get { return allowsCrouching_; }
      set {
        allowsCrouching_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 31;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "startupInvinsibleFrames" field.</summary>
    public const int StartupInvinsibleFramesFieldNumber = 32;
    private int startupInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartupInvinsibleFrames {
      get { return startupInvinsibleFrames_; }
      set {
        startupInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitInvinsibleFrames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 33;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "explosionSpeciesId" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 34;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "perpAccMag" field.</summary>
    public const int PerpAccMagFieldNumber = 35;
    private int perpAccMag_;
    /// <summary>
    /// acceleration perpendicular to instantaneous velocity per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PerpAccMag {
      get { return perpAccMag_; }
      set {
        perpAccMag_ = value;
      }
    }

    /// <summary>Field number for the "delaySelfVelToActive" field.</summary>
    public const int DelaySelfVelToActiveFieldNumber = 36;
    private bool delaySelfVelToActive_;
    /// <summary>
    /// if true, "selfLockVelX" &amp; "selfLockVelY" would only be applied when bullet is active 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DelaySelfVelToActive {
      get { return delaySelfVelToActive_; }
      set {
        delaySelfVelToActive_ = value;
      }
    }

    /// <summary>Field number for the "speedIfNotHit" field.</summary>
    public const int SpeedIfNotHitFieldNumber = 37;
    private int speedIfNotHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeedIfNotHit {
      get { return speedIfNotHit_; }
      set {
        speedIfNotHit_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    /// <summary>Field number for the "takesGravity" field.</summary>
    public const int TakesGravityFieldNumber = 1030;
    private bool takesGravity_;
    /// <summary>
    /// e.g. a bomb
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TakesGravity {
      get { return takesGravity_; }
      set {
        takesGravity_ = value;
      }
    }

    /// <summary>Field number for the "characterEmitSfxName" field.</summary>
    public const int CharacterEmitSfxNameFieldNumber = 2048;
    private string characterEmitSfxName_ = "";
    /// <summary>
    /// Sfx configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterEmitSfxName {
      get { return characterEmitSfxName_; }
      set {
        characterEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fireballEmitSfxName" field.</summary>
    public const int FireballEmitSfxNameFieldNumber = 2049;
    private string fireballEmitSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FireballEmitSfxName {
      get { return fireballEmitSfxName_; }
      set {
        fireballEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionSfxName" field.</summary>
    public const int ExplosionSfxNameFieldNumber = 2050;
    private string explosionSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionSfxName {
      get { return explosionSfxName_; }
      set {
        explosionSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeSfxName" field.</summary>
    public const int ActiveSfxNameFieldNumber = 2051;
    private string activeSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveSfxName {
      get { return activeSfxName_; }
      set {
        activeSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BulletConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BulletConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartupFrames != other.StartupFrames) return false;
      if (CancellableStFrame != other.CancellableStFrame) return false;
      if (CancellableEdFrame != other.CancellableEdFrame) return false;
      if (ActiveFrames != other.ActiveFrames) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (BlockStunFrames != other.BlockStunFrames) return false;
      if (PushbackVelX != other.PushbackVelX) return false;
      if (PushbackVelY != other.PushbackVelY) return false;
      if (Damage != other.Damage) return false;
      if (SelfLockVelX != other.SelfLockVelX) return false;
      if (SelfLockVelY != other.SelfLockVelY) return false;
      if (HitboxOffsetX != other.HitboxOffsetX) return false;
      if (HitboxOffsetY != other.HitboxOffsetY) return false;
      if (HitboxSizeX != other.HitboxSizeX) return false;
      if (HitboxSizeY != other.HitboxSizeY) return false;
      if (BlowUp != other.BlowUp) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BType != other.BType) return false;
      if (MhType != other.MhType) return false;
      if (SimultaneousMultiHitCnt != other.SimultaneousMultiHitCnt) return false;
      if (Speed != other.Speed) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (!CancelTransit.Equals(other.CancelTransit)) return false;
      if (RepeatQuota != other.RepeatQuota) return false;
      if (ActiveVfxSpeciesId != other.ActiveVfxSpeciesId) return false;
      if (ExplosionVfxSpeciesId != other.ExplosionVfxSpeciesId) return false;
      if (AllowsWalking != other.AllowsWalking) return false;
      if (AllowsCrouching != other.AllowsCrouching) return false;
      if (Hardness != other.Hardness) return false;
      if (StartupInvinsibleFrames != other.StartupInvinsibleFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (PerpAccMag != other.PerpAccMag) return false;
      if (DelaySelfVelToActive != other.DelaySelfVelToActive) return false;
      if (SpeedIfNotHit != other.SpeedIfNotHit) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      if (TakesGravity != other.TakesGravity) return false;
      if (CharacterEmitSfxName != other.CharacterEmitSfxName) return false;
      if (FireballEmitSfxName != other.FireballEmitSfxName) return false;
      if (ExplosionSfxName != other.ExplosionSfxName) return false;
      if (ActiveSfxName != other.ActiveSfxName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartupFrames != 0) hash ^= StartupFrames.GetHashCode();
      if (CancellableStFrame != 0) hash ^= CancellableStFrame.GetHashCode();
      if (CancellableEdFrame != 0) hash ^= CancellableEdFrame.GetHashCode();
      if (ActiveFrames != 0) hash ^= ActiveFrames.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (BlockStunFrames != 0) hash ^= BlockStunFrames.GetHashCode();
      if (PushbackVelX != 0) hash ^= PushbackVelX.GetHashCode();
      if (PushbackVelY != 0) hash ^= PushbackVelY.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (SelfLockVelX != 0) hash ^= SelfLockVelX.GetHashCode();
      if (SelfLockVelY != 0) hash ^= SelfLockVelY.GetHashCode();
      if (HitboxOffsetX != 0) hash ^= HitboxOffsetX.GetHashCode();
      if (HitboxOffsetY != 0) hash ^= HitboxOffsetY.GetHashCode();
      if (HitboxSizeX != 0) hash ^= HitboxSizeX.GetHashCode();
      if (HitboxSizeY != 0) hash ^= HitboxSizeY.GetHashCode();
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BType != global::shared.BulletType.Undetermined) hash ^= BType.GetHashCode();
      if (MhType != global::shared.MultiHitType.None) hash ^= MhType.GetHashCode();
      if (SimultaneousMultiHitCnt != 0) hash ^= SimultaneousMultiHitCnt.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      hash ^= CancelTransit.GetHashCode();
      if (RepeatQuota != 0) hash ^= RepeatQuota.GetHashCode();
      if (ActiveVfxSpeciesId != 0) hash ^= ActiveVfxSpeciesId.GetHashCode();
      if (ExplosionVfxSpeciesId != 0) hash ^= ExplosionVfxSpeciesId.GetHashCode();
      if (AllowsWalking != false) hash ^= AllowsWalking.GetHashCode();
      if (AllowsCrouching != false) hash ^= AllowsCrouching.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (StartupInvinsibleFrames != 0) hash ^= StartupInvinsibleFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (PerpAccMag != 0) hash ^= PerpAccMag.GetHashCode();
      if (DelaySelfVelToActive != false) hash ^= DelaySelfVelToActive.GetHashCode();
      if (SpeedIfNotHit != 0) hash ^= SpeedIfNotHit.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (TakesGravity != false) hash ^= TakesGravity.GetHashCode();
      if (CharacterEmitSfxName.Length != 0) hash ^= CharacterEmitSfxName.GetHashCode();
      if (FireballEmitSfxName.Length != 0) hash ^= FireballEmitSfxName.GetHashCode();
      if (ExplosionSfxName.Length != 0) hash ^= ExplosionSfxName.GetHashCode();
      if (ActiveSfxName.Length != 0) hash ^= ActiveSfxName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartupFrames != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PushbackVelY);
      }
      if (Damage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Damage);
      }
      if (SelfLockVelX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitboxSizeY);
      }
      if (BlowUp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BlowUp);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DirY);
      }
      cancelTransit_.WriteTo(output, _map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AllowsWalking);
      }
      if (AllowsCrouching != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AllowsCrouching);
      }
      if (Hardness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(DelaySelfVelToActive);
      }
      if (SpeedIfNotHit != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SpeedIfNotHit);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(176, 64);
        output.WriteBool(TakesGravity);
      }
      if (CharacterEmitSfxName.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        output.WriteRawTag(138, 128, 1);
        output.WriteString(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        output.WriteRawTag(146, 128, 1);
        output.WriteString(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        output.WriteRawTag(154, 128, 1);
        output.WriteString(ActiveSfxName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartupFrames != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PushbackVelY);
      }
      if (Damage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Damage);
      }
      if (SelfLockVelX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitboxSizeY);
      }
      if (BlowUp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BlowUp);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DirY);
      }
      cancelTransit_.WriteTo(ref output, _map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AllowsWalking);
      }
      if (AllowsCrouching != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AllowsCrouching);
      }
      if (Hardness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(DelaySelfVelToActive);
      }
      if (SpeedIfNotHit != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SpeedIfNotHit);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(176, 64);
        output.WriteBool(TakesGravity);
      }
      if (CharacterEmitSfxName.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        output.WriteRawTag(138, 128, 1);
        output.WriteString(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        output.WriteRawTag(146, 128, 1);
        output.WriteString(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        output.WriteRawTag(154, 128, 1);
        output.WriteString(ActiveSfxName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartupFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushbackVelY);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (SelfLockVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeY);
      }
      if (BlowUp != false) {
        size += 2 + 1;
      }
      if (SpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      size += cancelTransit_.CalculateSize(_map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        size += 2 + 1;
      }
      if (AllowsCrouching != false) {
        size += 2 + 1;
      }
      if (Hardness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        size += 2 + 1;
      }
      if (SpeedIfNotHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeedIfNotHit);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        size += 2 + 1;
      }
      if (CharacterEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ActiveSfxName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BulletConfig other) {
      if (other == null) {
        return;
      }
      if (other.StartupFrames != 0) {
        StartupFrames = other.StartupFrames;
      }
      if (other.CancellableStFrame != 0) {
        CancellableStFrame = other.CancellableStFrame;
      }
      if (other.CancellableEdFrame != 0) {
        CancellableEdFrame = other.CancellableEdFrame;
      }
      if (other.ActiveFrames != 0) {
        ActiveFrames = other.ActiveFrames;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.BlockStunFrames != 0) {
        BlockStunFrames = other.BlockStunFrames;
      }
      if (other.PushbackVelX != 0) {
        PushbackVelX = other.PushbackVelX;
      }
      if (other.PushbackVelY != 0) {
        PushbackVelY = other.PushbackVelY;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.SelfLockVelX != 0) {
        SelfLockVelX = other.SelfLockVelX;
      }
      if (other.SelfLockVelY != 0) {
        SelfLockVelY = other.SelfLockVelY;
      }
      if (other.HitboxOffsetX != 0) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BType != global::shared.BulletType.Undetermined) {
        BType = other.BType;
      }
      if (other.MhType != global::shared.MultiHitType.None) {
        MhType = other.MhType;
      }
      if (other.SimultaneousMultiHitCnt != 0) {
        SimultaneousMultiHitCnt = other.SimultaneousMultiHitCnt;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      cancelTransit_.Add(other.cancelTransit_);
      if (other.RepeatQuota != 0) {
        RepeatQuota = other.RepeatQuota;
      }
      if (other.ActiveVfxSpeciesId != 0) {
        ActiveVfxSpeciesId = other.ActiveVfxSpeciesId;
      }
      if (other.ExplosionVfxSpeciesId != 0) {
        ExplosionVfxSpeciesId = other.ExplosionVfxSpeciesId;
      }
      if (other.AllowsWalking != false) {
        AllowsWalking = other.AllowsWalking;
      }
      if (other.AllowsCrouching != false) {
        AllowsCrouching = other.AllowsCrouching;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.StartupInvinsibleFrames != 0) {
        StartupInvinsibleFrames = other.StartupInvinsibleFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.PerpAccMag != 0) {
        PerpAccMag = other.PerpAccMag;
      }
      if (other.DelaySelfVelToActive != false) {
        DelaySelfVelToActive = other.DelaySelfVelToActive;
      }
      if (other.SpeedIfNotHit != 0) {
        SpeedIfNotHit = other.SpeedIfNotHit;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      if (other.TakesGravity != false) {
        TakesGravity = other.TakesGravity;
      }
      if (other.CharacterEmitSfxName.Length != 0) {
        CharacterEmitSfxName = other.CharacterEmitSfxName;
      }
      if (other.FireballEmitSfxName.Length != 0) {
        FireballEmitSfxName = other.FireballEmitSfxName;
      }
      if (other.ExplosionSfxName.Length != 0) {
        ExplosionSfxName = other.ExplosionSfxName;
      }
      if (other.ActiveSfxName.Length != 0) {
        ActiveSfxName = other.ActiveSfxName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartupFrames = input.ReadInt32();
            break;
          }
          case 16: {
            CancellableStFrame = input.ReadInt32();
            break;
          }
          case 24: {
            CancellableEdFrame = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveFrames = input.ReadInt32();
            break;
          }
          case 40: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 48: {
            BlockStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            PushbackVelX = input.ReadInt32();
            break;
          }
          case 64: {
            PushbackVelY = input.ReadInt32();
            break;
          }
          case 72: {
            Damage = input.ReadInt32();
            break;
          }
          case 80: {
            SelfLockVelX = input.ReadInt32();
            break;
          }
          case 88: {
            SelfLockVelY = input.ReadInt32();
            break;
          }
          case 96: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 104: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 112: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 120: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 128: {
            BlowUp = input.ReadBool();
            break;
          }
          case 136: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 144: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 152: {
            BType = (global::shared.BulletType) input.ReadEnum();
            break;
          }
          case 160: {
            MhType = (global::shared.MultiHitType) input.ReadEnum();
            break;
          }
          case 168: {
            SimultaneousMultiHitCnt = input.ReadUInt32();
            break;
          }
          case 176: {
            Speed = input.ReadInt32();
            break;
          }
          case 184: {
            DirX = input.ReadInt32();
            break;
          }
          case 192: {
            DirY = input.ReadInt32();
            break;
          }
          case 202: {
            cancelTransit_.AddEntriesFrom(input, _map_cancelTransit_codec);
            break;
          }
          case 208: {
            RepeatQuota = input.ReadInt32();
            break;
          }
          case 216: {
            ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 224: {
            ExplosionVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 232: {
            AllowsWalking = input.ReadBool();
            break;
          }
          case 240: {
            AllowsCrouching = input.ReadBool();
            break;
          }
          case 248: {
            Hardness = input.ReadInt32();
            break;
          }
          case 256: {
            StartupInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 264: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 272: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 280: {
            PerpAccMag = input.ReadInt32();
            break;
          }
          case 288: {
            DelaySelfVelToActive = input.ReadBool();
            break;
          }
          case 296: {
            SpeedIfNotHit = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8240: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 16386: {
            CharacterEmitSfxName = input.ReadString();
            break;
          }
          case 16394: {
            FireballEmitSfxName = input.ReadString();
            break;
          }
          case 16402: {
            ExplosionSfxName = input.ReadString();
            break;
          }
          case 16410: {
            ActiveSfxName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartupFrames = input.ReadInt32();
            break;
          }
          case 16: {
            CancellableStFrame = input.ReadInt32();
            break;
          }
          case 24: {
            CancellableEdFrame = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveFrames = input.ReadInt32();
            break;
          }
          case 40: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 48: {
            BlockStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            PushbackVelX = input.ReadInt32();
            break;
          }
          case 64: {
            PushbackVelY = input.ReadInt32();
            break;
          }
          case 72: {
            Damage = input.ReadInt32();
            break;
          }
          case 80: {
            SelfLockVelX = input.ReadInt32();
            break;
          }
          case 88: {
            SelfLockVelY = input.ReadInt32();
            break;
          }
          case 96: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 104: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 112: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 120: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 128: {
            BlowUp = input.ReadBool();
            break;
          }
          case 136: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 144: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 152: {
            BType = (global::shared.BulletType) input.ReadEnum();
            break;
          }
          case 160: {
            MhType = (global::shared.MultiHitType) input.ReadEnum();
            break;
          }
          case 168: {
            SimultaneousMultiHitCnt = input.ReadUInt32();
            break;
          }
          case 176: {
            Speed = input.ReadInt32();
            break;
          }
          case 184: {
            DirX = input.ReadInt32();
            break;
          }
          case 192: {
            DirY = input.ReadInt32();
            break;
          }
          case 202: {
            cancelTransit_.AddEntriesFrom(ref input, _map_cancelTransit_codec);
            break;
          }
          case 208: {
            RepeatQuota = input.ReadInt32();
            break;
          }
          case 216: {
            ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 224: {
            ExplosionVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 232: {
            AllowsWalking = input.ReadBool();
            break;
          }
          case 240: {
            AllowsCrouching = input.ReadBool();
            break;
          }
          case 248: {
            Hardness = input.ReadInt32();
            break;
          }
          case 256: {
            StartupInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 264: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 272: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 280: {
            PerpAccMag = input.ReadInt32();
            break;
          }
          case 288: {
            DelaySelfVelToActive = input.ReadBool();
            break;
          }
          case 296: {
            SpeedIfNotHit = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8240: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 16386: {
            CharacterEmitSfxName = input.ReadString();
            break;
          }
          case 16394: {
            FireballEmitSfxName = input.ReadString();
            break;
          }
          case 16402: {
            ExplosionSfxName = input.ReadString();
            break;
          }
          case 16410: {
            ActiveSfxName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BulletBattleAttr : pb::IMessage<BulletBattleAttr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BulletBattleAttr> _parser = new pb::MessageParser<BulletBattleAttr>(() => new BulletBattleAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BulletBattleAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletBattleAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletBattleAttr(BulletBattleAttr other) : this() {
      bulletLocalId_ = other.bulletLocalId_;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      offenderJoinIndex_ = other.offenderJoinIndex_;
      teamId_ = other.teamId_;
      activeSkillHit_ = other.activeSkillHit_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletBattleAttr Clone() {
      return new BulletBattleAttr(this);
    }

    /// <summary>Field number for the "bulletLocalId" field.</summary>
    public const int BulletLocalIdFieldNumber = 1;
    private int bulletLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletLocalId {
      get { return bulletLocalId_; }
      set {
        bulletLocalId_ = value;
      }
    }

    /// <summary>Field number for the "originatedRenderFrameId" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 2;
    private int originatedRenderFrameId_;
    /// <summary>
    /// Copied from the first bullet for all subsequent bullets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "offenderJoinIndex" field.</summary>
    public const int OffenderJoinIndexFieldNumber = 3;
    private int offenderJoinIndex_;
    /// <summary>
    /// Copied to favor collision handling of the dispatched bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OffenderJoinIndex {
      get { return offenderJoinIndex_; }
      set {
        offenderJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 4;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillHit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 5;
    private int activeSkillHit_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillHit" might've already been reset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 6;
    private int skillId_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillId" might've already been reset); also for reverse lookup in multihit transition, in the most extreme case, a same "BulletConfig" instance is to be shared across different "Skill"s, thus we put "skillId" in "BulletBattleAttr" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BulletBattleAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BulletBattleAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletLocalId != other.BulletLocalId) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OffenderJoinIndex != other.OffenderJoinIndex) return false;
      if (TeamId != other.TeamId) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletLocalId != 0) hash ^= BulletLocalId.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OffenderJoinIndex != 0) hash ^= OffenderJoinIndex.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BulletLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (TeamId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveSkillHit);
      }
      if (SkillId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BulletLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (TeamId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveSkillHit);
      }
      if (SkillId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BulletLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffenderJoinIndex);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (ActiveSkillHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BulletBattleAttr other) {
      if (other == null) {
        return;
      }
      if (other.BulletLocalId != 0) {
        BulletLocalId = other.BulletLocalId;
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OffenderJoinIndex != 0) {
        OffenderJoinIndex = other.OffenderJoinIndex;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 24: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            TeamId = input.ReadInt32();
            break;
          }
          case 40: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 48: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 24: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            TeamId = input.ReadInt32();
            break;
          }
          case 40: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 48: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Bullet : pb::IMessage<Bullet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bullet> _parser = new pb::MessageParser<Bullet>(() => new Bullet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Bullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet(Bullet other) : this() {
      blState_ = other.blState_;
      framesInBlState_ = other.framesInBlState_;
      battleAttr_ = other.battleAttr_ != null ? other.battleAttr_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      repeatQuotaLeft_ = other.repeatQuotaLeft_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet Clone() {
      return new Bullet(this);
    }

    /// <summary>Field number for the "blState" field.</summary>
    public const int BlStateFieldNumber = 1;
    private global::shared.BulletState blState_ = global::shared.BulletState.StartUp;
    /// <summary>
    /// Jargon reference https://www.thegamer.com/fighting-games-frame-data-explained/
    /// ALL lengths are in world coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletState BlState {
      get { return blState_; }
      set {
        blState_ = value;
      }
    }

    /// <summary>Field number for the "framesInBlState" field.</summary>
    public const int FramesInBlStateFieldNumber = 2;
    private int framesInBlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInBlState {
      get { return framesInBlState_; }
      set {
        framesInBlState_ = value;
      }
    }

    /// <summary>Field number for the "battleAttr" field.</summary>
    public const int BattleAttrFieldNumber = 3;
    private global::shared.BulletBattleAttr battleAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletBattleAttr BattleAttr {
      get { return battleAttr_; }
      set {
        battleAttr_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 4;
    private global::shared.BulletConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "repeatQuotaLeft" field.</summary>
    public const int RepeatQuotaLeftFieldNumber = 5;
    private int repeatQuotaLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepeatQuotaLeft {
      get { return repeatQuotaLeft_; }
      set {
        repeatQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 999;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 1000;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 1001;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 1002;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 1003;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 1004;
    private int velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Bullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Bullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlState != other.BlState) return false;
      if (FramesInBlState != other.FramesInBlState) return false;
      if (!object.Equals(BattleAttr, other.BattleAttr)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (RepeatQuotaLeft != other.RepeatQuotaLeft) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BlState != global::shared.BulletState.StartUp) hash ^= BlState.GetHashCode();
      if (FramesInBlState != 0) hash ^= FramesInBlState.GetHashCode();
      if (battleAttr_ != null) hash ^= BattleAttr.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (RepeatQuotaLeft != 0) hash ^= RepeatQuotaLeft.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BlState != global::shared.BulletState.StartUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlState);
      }
      if (FramesInBlState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesInBlState);
      }
      if (battleAttr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleAttr);
      }
      if (config_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Config);
      }
      if (RepeatQuotaLeft != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RepeatQuotaLeft);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(184, 62);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(208, 62);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(224, 62);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BlState != global::shared.BulletState.StartUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlState);
      }
      if (FramesInBlState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesInBlState);
      }
      if (battleAttr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleAttr);
      }
      if (config_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Config);
      }
      if (RepeatQuotaLeft != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RepeatQuotaLeft);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(184, 62);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(208, 62);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(224, 62);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BlState != global::shared.BulletState.StartUp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlState);
      }
      if (FramesInBlState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInBlState);
      }
      if (battleAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleAttr);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (RepeatQuotaLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuotaLeft);
      }
      if (VirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Bullet other) {
      if (other == null) {
        return;
      }
      if (other.BlState != global::shared.BulletState.StartUp) {
        BlState = other.BlState;
      }
      if (other.FramesInBlState != 0) {
        FramesInBlState = other.FramesInBlState;
      }
      if (other.battleAttr_ != null) {
        if (battleAttr_ == null) {
          BattleAttr = new global::shared.BulletBattleAttr();
        }
        BattleAttr.MergeFrom(other.BattleAttr);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::shared.BulletConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.RepeatQuotaLeft != 0) {
        RepeatQuotaLeft = other.RepeatQuotaLeft;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlState = (global::shared.BulletState) input.ReadEnum();
            break;
          }
          case 16: {
            FramesInBlState = input.ReadInt32();
            break;
          }
          case 26: {
            if (battleAttr_ == null) {
              BattleAttr = new global::shared.BulletBattleAttr();
            }
            input.ReadMessage(BattleAttr);
            break;
          }
          case 34: {
            if (config_ == null) {
              Config = new global::shared.BulletConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 40: {
            RepeatQuotaLeft = input.ReadInt32();
            break;
          }
          case 7992: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 8000: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 8008: {
            DirX = input.ReadInt32();
            break;
          }
          case 8016: {
            DirY = input.ReadInt32();
            break;
          }
          case 8024: {
            VelX = input.ReadInt32();
            break;
          }
          case 8032: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BlState = (global::shared.BulletState) input.ReadEnum();
            break;
          }
          case 16: {
            FramesInBlState = input.ReadInt32();
            break;
          }
          case 26: {
            if (battleAttr_ == null) {
              BattleAttr = new global::shared.BulletBattleAttr();
            }
            input.ReadMessage(BattleAttr);
            break;
          }
          case 34: {
            if (config_ == null) {
              Config = new global::shared.BulletConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 40: {
            RepeatQuotaLeft = input.ReadInt32();
            break;
          }
          case 7992: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 8000: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 8008: {
            DirX = input.ReadInt32();
            break;
          }
          case 8016: {
            DirY = input.ReadInt32();
            break;
          }
          case 8024: {
            VelX = input.ReadInt32();
            break;
          }
          case 8032: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapConfig : pb::IMessage<TrapConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapConfig> _parser = new pb::MessageParser<TrapConfig>(() => new TrapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig(TrapConfig other) : this() {
      speciesId_ = other.speciesId_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      explosionFrames_ = other.explosionFrames_;
      blowUp_ = other.blowUp_;
      damage_ = other.damage_;
      hitStunFrames_ = other.hitStunFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      destroyUponHit_ = other.destroyUponHit_;
      hardness_ = other.hardness_;
      speciesName_ = other.speciesName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig Clone() {
      return new TrapConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionSpeciesId" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 2;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionFrames" field.</summary>
    public const int ExplosionFramesFieldNumber = 3;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "blowUp" field.</summary>
    public const int BlowUpFieldNumber = 4;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "hitStunFrames" field.</summary>
    public const int HitStunFramesFieldNumber = 6;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitInvinsibleFrames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 7;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "destroyUponHit" field.</summary>
    public const int DestroyUponHitFieldNumber = 8;
    private bool destroyUponHit_;
    /// <summary>
    /// for most traps and long lasting melee bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DestroyUponHit {
      get { return destroyUponHit_; }
      set {
        destroyUponHit_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 9;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "speciesName" field.</summary>
    public const int SpeciesNameFieldNumber = 1024;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BlowUp != other.BlowUp) return false;
      if (Damage != other.Damage) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (DestroyUponHit != other.DestroyUponHit) return false;
      if (Hardness != other.Hardness) return false;
      if (SpeciesName != other.SpeciesName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (DestroyUponHit != false) hash ^= DestroyUponHit.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExplosionFrames);
      }
      if (BlowUp != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlowUp);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (DestroyUponHit != false) {
        output.WriteRawTag(64);
        output.WriteBool(DestroyUponHit);
      }
      if (Hardness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hardness);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(SpeciesName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExplosionFrames);
      }
      if (BlowUp != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlowUp);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (DestroyUponHit != false) {
        output.WriteRawTag(64);
        output.WriteBool(DestroyUponHit);
      }
      if (Hardness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hardness);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(SpeciesName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BlowUp != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (DestroyUponHit != false) {
        size += 1 + 1;
      }
      if (Hardness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (SpeciesName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.DestroyUponHit != false) {
        DestroyUponHit = other.DestroyUponHit;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 32: {
            BlowUp = input.ReadBool();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
          case 48: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            DestroyUponHit = input.ReadBool();
            break;
          }
          case 72: {
            Hardness = input.ReadInt32();
            break;
          }
          case 8194: {
            SpeciesName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 32: {
            BlowUp = input.ReadBool();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
          case 48: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            DestroyUponHit = input.ReadBool();
            break;
          }
          case 72: {
            Hardness = input.ReadInt32();
            break;
          }
          case 8194: {
            SpeciesName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapConfigFromTiled : pb::IMessage<TrapConfigFromTiled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapConfigFromTiled> _parser = new pb::MessageParser<TrapConfigFromTiled>(() => new TrapConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled(TrapConfigFromTiled other) : this() {
      speciesId_ = other.speciesId_;
      quota_ = other.quota_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      prohibitsWallGrabbing_ = other.prohibitsWallGrabbing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled Clone() {
      return new TrapConfigFromTiled(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    /// <summary>
    ///
    ///By the time of writing, I am not yet very confident on what should be completely hardcoded constant in C# and what should be flexibly configured from Tiled Editor. 
    ///
    ///The simple mindset ruling here 
    ///- we couldn't make configurable items infinitely granular, at least not at this early stage of development
    ///- for a "completely static trap" (not moving &amp; not changing appearance even if destroyed), both its appearance and hitbox can be drawn in Tiled Editor
    ///- for a "dynamic trap" (either moving or changing appearance anyway), both its appearance and hitbox can be drawn in Tiled TSX Editor, put onto an Object Layer in Tiled Editor for preview -- however the object on the Object Layer will be removed immediately and replaced by a Trap object in "RoomDownsyncFrame.trapsArr" for dynamic management    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private int quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "prohibitsWallGrabbing" field.</summary>
    public const int ProhibitsWallGrabbingFieldNumber = 6;
    private bool prohibitsWallGrabbing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProhibitsWallGrabbing {
      get { return prohibitsWallGrabbing_; }
      set {
        prohibitsWallGrabbing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Quota != other.Quota) return false;
      if (Speed != other.Speed) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (ProhibitsWallGrabbing != other.ProhibitsWallGrabbing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (ProhibitsWallGrabbing != false) hash ^= ProhibitsWallGrabbing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (ProhibitsWallGrabbing != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProhibitsWallGrabbing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (ProhibitsWallGrabbing != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProhibitsWallGrabbing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (ProhibitsWallGrabbing != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.ProhibitsWallGrabbing != false) {
        ProhibitsWallGrabbing = other.ProhibitsWallGrabbing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            ProhibitsWallGrabbing = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            ProhibitsWallGrabbing = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapColliderAttr : pb::IMessage<TrapColliderAttr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapColliderAttr> _parser = new pb::MessageParser<TrapColliderAttr>(() => new TrapColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr(TrapColliderAttr other) : this() {
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      providesHardPushback_ = other.providesHardPushback_;
      providesDamage_ = other.providesDamage_;
      providesEscape_ = other.providesEscape_;
      providesSlipJump_ = other.providesSlipJump_;
      forcesCrouching_ = other.forcesCrouching_;
      trapLocalId_ = other.trapLocalId_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr Clone() {
      return new TrapColliderAttr(this);
    }

    /// <summary>Field number for the "hitboxOffsetX" field.</summary>
    public const int HitboxOffsetXFieldNumber = 1;
    private int hitboxOffsetX_;
    /// <summary>
    /// In the case of a trap, it might own multiple hitboxes and each hitbox is drawn in Tiled and assigned after parsing the tmx file, thus not put in static config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetY" field.</summary>
    public const int HitboxOffsetYFieldNumber = 2;
    private int hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeX" field.</summary>
    public const int HitboxSizeXFieldNumber = 3;
    private int hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeY" field.</summary>
    public const int HitboxSizeYFieldNumber = 4;
    private int hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "providesHardPushback" field.</summary>
    public const int ProvidesHardPushbackFieldNumber = 5;
    private bool providesHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesHardPushback {
      get { return providesHardPushback_; }
      set {
        providesHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "providesDamage" field.</summary>
    public const int ProvidesDamageFieldNumber = 6;
    private bool providesDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesDamage {
      get { return providesDamage_; }
      set {
        providesDamage_ = value;
      }
    }

    /// <summary>Field number for the "providesEscape" field.</summary>
    public const int ProvidesEscapeFieldNumber = 7;
    private bool providesEscape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesEscape {
      get { return providesEscape_; }
      set {
        providesEscape_ = value;
      }
    }

    /// <summary>Field number for the "providesSlipJump" field.</summary>
    public const int ProvidesSlipJumpFieldNumber = 8;
    private bool providesSlipJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesSlipJump {
      get { return providesSlipJump_; }
      set {
        providesSlipJump_ = value;
      }
    }

    /// <summary>Field number for the "forcesCrouching" field.</summary>
    public const int ForcesCrouchingFieldNumber = 9;
    private bool forcesCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForcesCrouching {
      get { return forcesCrouching_; }
      set {
        forcesCrouching_ = value;
      }
    }

    /// <summary>Field number for the "trapLocalId" field.</summary>
    public const int TrapLocalIdFieldNumber = 1024;
    private int trapLocalId_;
    /// <summary>
    /// ref-back upon collision, for damage handling, hardPushback moving and effPushbacks recording (if the trap provides softPushback)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrapLocalId {
      get { return trapLocalId_; }
      set {
        trapLocalId_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitboxOffsetX != other.HitboxOffsetX) return false;
      if (HitboxOffsetY != other.HitboxOffsetY) return false;
      if (HitboxSizeX != other.HitboxSizeX) return false;
      if (HitboxSizeY != other.HitboxSizeY) return false;
      if (ProvidesHardPushback != other.ProvidesHardPushback) return false;
      if (ProvidesDamage != other.ProvidesDamage) return false;
      if (ProvidesEscape != other.ProvidesEscape) return false;
      if (ProvidesSlipJump != other.ProvidesSlipJump) return false;
      if (ForcesCrouching != other.ForcesCrouching) return false;
      if (TrapLocalId != other.TrapLocalId) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HitboxOffsetX != 0) hash ^= HitboxOffsetX.GetHashCode();
      if (HitboxOffsetY != 0) hash ^= HitboxOffsetY.GetHashCode();
      if (HitboxSizeX != 0) hash ^= HitboxSizeX.GetHashCode();
      if (HitboxSizeY != 0) hash ^= HitboxSizeY.GetHashCode();
      if (ProvidesHardPushback != false) hash ^= ProvidesHardPushback.GetHashCode();
      if (ProvidesDamage != false) hash ^= ProvidesDamage.GetHashCode();
      if (ProvidesEscape != false) hash ^= ProvidesEscape.GetHashCode();
      if (ProvidesSlipJump != false) hash ^= ProvidesSlipJump.GetHashCode();
      if (ForcesCrouching != false) hash ^= ForcesCrouching.GetHashCode();
      if (TrapLocalId != 0) hash ^= TrapLocalId.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(ProvidesHardPushback);
      }
      if (ProvidesDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProvidesDamage);
      }
      if (ProvidesEscape != false) {
        output.WriteRawTag(56);
        output.WriteBool(ProvidesEscape);
      }
      if (ProvidesSlipJump != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProvidesSlipJump);
      }
      if (ForcesCrouching != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForcesCrouching);
      }
      if (TrapLocalId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(ProvidesHardPushback);
      }
      if (ProvidesDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProvidesDamage);
      }
      if (ProvidesEscape != false) {
        output.WriteRawTag(56);
        output.WriteBool(ProvidesEscape);
      }
      if (ProvidesSlipJump != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProvidesSlipJump);
      }
      if (ForcesCrouching != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForcesCrouching);
      }
      if (TrapLocalId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HitboxOffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        size += 1 + 1;
      }
      if (ProvidesDamage != false) {
        size += 1 + 1;
      }
      if (ProvidesEscape != false) {
        size += 1 + 1;
      }
      if (ProvidesSlipJump != false) {
        size += 1 + 1;
      }
      if (ForcesCrouching != false) {
        size += 1 + 1;
      }
      if (TrapLocalId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.HitboxOffsetX != 0) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.ProvidesHardPushback != false) {
        ProvidesHardPushback = other.ProvidesHardPushback;
      }
      if (other.ProvidesDamage != false) {
        ProvidesDamage = other.ProvidesDamage;
      }
      if (other.ProvidesEscape != false) {
        ProvidesEscape = other.ProvidesEscape;
      }
      if (other.ProvidesSlipJump != false) {
        ProvidesSlipJump = other.ProvidesSlipJump;
      }
      if (other.ForcesCrouching != false) {
        ForcesCrouching = other.ForcesCrouching;
      }
      if (other.TrapLocalId != 0) {
        TrapLocalId = other.TrapLocalId;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 32: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 40: {
            ProvidesHardPushback = input.ReadBool();
            break;
          }
          case 48: {
            ProvidesDamage = input.ReadBool();
            break;
          }
          case 56: {
            ProvidesEscape = input.ReadBool();
            break;
          }
          case 64: {
            ProvidesSlipJump = input.ReadBool();
            break;
          }
          case 72: {
            ForcesCrouching = input.ReadBool();
            break;
          }
          case 8192: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 32: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 40: {
            ProvidesHardPushback = input.ReadBool();
            break;
          }
          case 48: {
            ProvidesDamage = input.ReadBool();
            break;
          }
          case 56: {
            ProvidesEscape = input.ReadBool();
            break;
          }
          case 64: {
            ProvidesSlipJump = input.ReadBool();
            break;
          }
          case 72: {
            ForcesCrouching = input.ReadBool();
            break;
          }
          case 8192: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///What distinguished "Trap" and "Npc(typed CharacterDownsync)" is that a "Trap" often has much simpler skillset, vision/patrol reaction -- yet more complicated boundaries and hard/soft pushback config.
  /// </summary>
  public sealed partial class Trap : pb::IMessage<Trap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trap> _parser = new pb::MessageParser<Trap>(() => new Trap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap(Trap other) : this() {
      trapLocalId_ = other.trapLocalId_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      trapState_ = other.trapState_;
      framesInTrapState_ = other.framesInTrapState_;
      isCompletelyStatic_ = other.isCompletelyStatic_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      waivingSpontaneousPatrol_ = other.waivingSpontaneousPatrol_;
      triggerTrackingId_ = other.triggerTrackingId_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap Clone() {
      return new Trap(this);
    }

    /// <summary>Field number for the "trapLocalId" field.</summary>
    public const int TrapLocalIdFieldNumber = 1;
    private int trapLocalId_;
    /// <summary>
    /// [WARNING] Used to look up proper "List&lt;TrapColliderAttr>" which is configured in Tiled Editor and remained static during the whole battle!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrapLocalId {
      get { return trapLocalId_; }
      set {
        trapLocalId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::shared.TrapConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "configFromTiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 3;
    private global::shared.TrapConfigFromTiled configFromTiled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "trapState" field.</summary>
    public const int TrapStateFieldNumber = 4;
    private global::shared.TrapState trapState_ = global::shared.TrapState.Tidle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapState TrapState {
      get { return trapState_; }
      set {
        trapState_ = value;
      }
    }

    /// <summary>Field number for the "framesInTrapState" field.</summary>
    public const int FramesInTrapStateFieldNumber = 5;
    private int framesInTrapState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInTrapState {
      get { return framesInTrapState_; }
      set {
        framesInTrapState_ = value;
      }
    }

    /// <summary>Field number for the "isCompletelyStatic" field.</summary>
    public const int IsCompletelyStaticFieldNumber = 6;
    private bool isCompletelyStatic_;
    /// <summary>
    ///
    ///[WARNING] Here "virtualGridX" and "virtualGridY" denotes the point in virtual grid for local (0, 0) of a trap, then each "colliderAttr" carries "hitboxOffsetX", "hitboxOffsetY", "hitboxSizeX" and "hitboxSizeY" also in virtual grid!
    ///
    ///It's bit embarrassing that in Tiled Editor
    ///- if we draw a rectangle in an Object Layer by the rectangle tool, its local (0, 0) is the bottom-left corner, but
    ///- if we put an image object in an Object Layer, its local (0, 0) is the upper-left corner
    ///
    ///such a frustrating default so we'll use a uniformed local (0, 0) -- the center of rectangle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCompletelyStatic {
      get { return isCompletelyStatic_; }
      set {
        isCompletelyStatic_ = value;
      }
    }

    /// <summary>Field number for the "capturedByPatrolCue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 7;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "framesInPatrolCue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 8;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "waivingPatrolCueId" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 9;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "waivingSpontaneousPatrol" field.</summary>
    public const int WaivingSpontaneousPatrolFieldNumber = 10;
    private bool waivingSpontaneousPatrol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WaivingSpontaneousPatrol {
      get { return waivingSpontaneousPatrol_; }
      set {
        waivingSpontaneousPatrol_ = value;
      }
    }

    /// <summary>Field number for the "triggerTrackingId" field.</summary>
    public const int TriggerTrackingIdFieldNumber = 11;
    private int triggerTrackingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerTrackingId {
      get { return triggerTrackingId_; }
      set {
        triggerTrackingId_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 999;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 1000;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 1001;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 1002;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 1003;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 1004;
    private int velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrapLocalId != other.TrapLocalId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (TrapState != other.TrapState) return false;
      if (FramesInTrapState != other.FramesInTrapState) return false;
      if (IsCompletelyStatic != other.IsCompletelyStatic) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (WaivingSpontaneousPatrol != other.WaivingSpontaneousPatrol) return false;
      if (TriggerTrackingId != other.TriggerTrackingId) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TrapLocalId != 0) hash ^= TrapLocalId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (TrapState != global::shared.TrapState.Tidle) hash ^= TrapState.GetHashCode();
      if (FramesInTrapState != 0) hash ^= FramesInTrapState.GetHashCode();
      if (IsCompletelyStatic != false) hash ^= IsCompletelyStatic.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (WaivingSpontaneousPatrol != false) hash ^= WaivingSpontaneousPatrol.GetHashCode();
      if (TriggerTrackingId != 0) hash ^= TriggerTrackingId.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TrapLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrapLocalId);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompletelyStatic);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(56);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(80);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (TriggerTrackingId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TriggerTrackingId);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(184, 62);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(208, 62);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(224, 62);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TrapLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrapLocalId);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompletelyStatic);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(56);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(80);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (TriggerTrackingId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TriggerTrackingId);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(184, 62);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(192, 62);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(200, 62);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(208, 62);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(216, 62);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(224, 62);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TrapLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapLocalId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        size += 1 + 1;
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        size += 1 + 1;
      }
      if (TriggerTrackingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerTrackingId);
      }
      if (VirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trap other) {
      if (other == null) {
        return;
      }
      if (other.TrapLocalId != 0) {
        TrapLocalId = other.TrapLocalId;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::shared.TrapConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::shared.TrapConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.TrapState != global::shared.TrapState.Tidle) {
        TrapState = other.TrapState;
      }
      if (other.FramesInTrapState != 0) {
        FramesInTrapState = other.FramesInTrapState;
      }
      if (other.IsCompletelyStatic != false) {
        IsCompletelyStatic = other.IsCompletelyStatic;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.WaivingSpontaneousPatrol != false) {
        WaivingSpontaneousPatrol = other.WaivingSpontaneousPatrol;
      }
      if (other.TriggerTrackingId != 0) {
        TriggerTrackingId = other.TriggerTrackingId;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::shared.TrapConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TrapConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 32: {
            TrapState = (global::shared.TrapState) input.ReadEnum();
            break;
          }
          case 40: {
            FramesInTrapState = input.ReadInt32();
            break;
          }
          case 48: {
            IsCompletelyStatic = input.ReadBool();
            break;
          }
          case 56: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 64: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 72: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 80: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 88: {
            TriggerTrackingId = input.ReadInt32();
            break;
          }
          case 7992: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 8000: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 8008: {
            DirX = input.ReadInt32();
            break;
          }
          case 8016: {
            DirY = input.ReadInt32();
            break;
          }
          case 8024: {
            VelX = input.ReadInt32();
            break;
          }
          case 8032: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 18: {
            if (config_ == null) {
              Config = new global::shared.TrapConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 26: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TrapConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 32: {
            TrapState = (global::shared.TrapState) input.ReadEnum();
            break;
          }
          case 40: {
            FramesInTrapState = input.ReadInt32();
            break;
          }
          case 48: {
            IsCompletelyStatic = input.ReadBool();
            break;
          }
          case 56: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 64: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 72: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 80: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 88: {
            TriggerTrackingId = input.ReadInt32();
            break;
          }
          case 7992: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 8000: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 8008: {
            DirX = input.ReadInt32();
            break;
          }
          case 8016: {
            DirY = input.ReadInt32();
            break;
          }
          case 8024: {
            VelX = input.ReadInt32();
            break;
          }
          case 8032: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerConfig : pb::IMessage<TriggerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerConfig> _parser = new pb::MessageParser<TriggerConfig>(() => new TriggerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig(TriggerConfig other) : this() {
      speciesId_ = other.speciesId_;
      speciesName_ = other.speciesName_;
      triggerMask_ = other.triggerMask_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig Clone() {
      return new TriggerConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "speciesName" field.</summary>
    public const int SpeciesNameFieldNumber = 2;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "triggerMask" field.</summary>
    public const int TriggerMaskFieldNumber = 3;
    private ulong triggerMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TriggerMask {
      get { return triggerMask_; }
      set {
        triggerMask_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 4;
    private ulong collisionTypeMask_;
    /// <summary>
    ///
    ///By now "TRIGGER_MASK_BY_CYCLIC_TIMER" couldn't coexist with others, and here's how the major params work  
    ///
    ///:repeats "quota" times
    ///|&lt;-------------------------------------- recoveryFrames ----------------------------->|&lt;-----------------recoveryFrames ---------->|.......
    ///:repeats "subCycleQuota" times                                                        :repeats "subCycleQuota" times
    ///|&lt;-delayedFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|       |.......
    ///|TReady           |TCoolingDown             |TCoolingDown(replay)     |TCoolingDown(replay)     |TReady |.......
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (SpeciesName != other.SpeciesName) return false;
      if (TriggerMask != other.TriggerMask) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (TriggerMask != 0UL) hash ^= TriggerMask.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (TriggerMask != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TriggerMask);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (TriggerMask != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TriggerMask);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (TriggerMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TriggerMask);
      }
      if (CollisionTypeMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      if (other.TriggerMask != 0UL) {
        TriggerMask = other.TriggerMask;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            TriggerMask = input.ReadUInt64();
            break;
          }
          case 32: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            TriggerMask = input.ReadUInt64();
            break;
          }
          case 32: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CharacterSpawnerConfig : pb::IMessage<CharacterSpawnerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterSpawnerConfig> _parser = new pb::MessageParser<CharacterSpawnerConfig>(() => new CharacterSpawnerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CharacterSpawnerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig(CharacterSpawnerConfig other) : this() {
      cutoffRdfFrameId_ = other.cutoffRdfFrameId_;
      speciesIdList_ = other.speciesIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig Clone() {
      return new CharacterSpawnerConfig(this);
    }

    /// <summary>Field number for the "cutoffRdfFrameId" field.</summary>
    public const int CutoffRdfFrameIdFieldNumber = 1;
    private int cutoffRdfFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CutoffRdfFrameId {
      get { return cutoffRdfFrameId_; }
      set {
        cutoffRdfFrameId_ = value;
      }
    }

    /// <summary>Field number for the "speciesIdList" field.</summary>
    public const int SpeciesIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> speciesIdList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the k-th subcycle tick corresponds to speciesIdList[k]   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SpeciesIdList {
      get { return speciesIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CharacterSpawnerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CharacterSpawnerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfFrameId != other.CutoffRdfFrameId) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfFrameId != 0) hash ^= CutoffRdfFrameId.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(ref output, _repeated_speciesIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfFrameId);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CharacterSpawnerConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfFrameId != 0) {
        CutoffRdfFrameId = other.CutoffRdfFrameId;
      }
      speciesIdList_.Add(other.speciesIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(ref input, _repeated_speciesIdList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerConfigFromTiled : pb::IMessage<TriggerConfigFromTiled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerConfigFromTiled> _parser = new pb::MessageParser<TriggerConfigFromTiled>(() => new TriggerConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled(TriggerConfigFromTiled other) : this() {
      speciesId_ = other.speciesId_;
      delayedFrames_ = other.delayedFrames_;
      recoveryFrames_ = other.recoveryFrames_;
      trackingIdList_ = other.trackingIdList_.Clone();
      initVelX_ = other.initVelX_;
      initVelY_ = other.initVelY_;
      chCollisionTeamId_ = other.chCollisionTeamId_;
      subCycleTriggerFrames_ = other.subCycleTriggerFrames_;
      subCycleQuota_ = other.subCycleQuota_;
      characterSpawnerTimeSeq_ = other.characterSpawnerTimeSeq_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled Clone() {
      return new TriggerConfigFromTiled(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "delayedFrames" field.</summary>
    public const int DelayedFramesFieldNumber = 2;
    private int delayedFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DelayedFrames {
      get { return delayedFrames_; }
      set {
        delayedFrames_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFrames" field.</summary>
    public const int RecoveryFramesFieldNumber = 3;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "trackingIdList" field.</summary>
    public const int TrackingIdListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_trackingIdList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> trackingIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TrackingIdList {
      get { return trackingIdList_; }
    }

    /// <summary>Field number for the "initVelX" field.</summary>
    public const int InitVelXFieldNumber = 5;
    private int initVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitVelX {
      get { return initVelX_; }
      set {
        initVelX_ = value;
      }
    }

    /// <summary>Field number for the "initVelY" field.</summary>
    public const int InitVelYFieldNumber = 6;
    private int initVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitVelY {
      get { return initVelY_; }
      set {
        initVelY_ = value;
      }
    }

    /// <summary>Field number for the "chCollisionTeamId" field.</summary>
    public const int ChCollisionTeamIdFieldNumber = 7;
    private int chCollisionTeamId_;
    /// <summary>
    /// of this trigger
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChCollisionTeamId {
      get { return chCollisionTeamId_; }
      set {
        chCollisionTeamId_ = value;
      }
    }

    /// <summary>Field number for the "subCycleTriggerFrames" field.</summary>
    public const int SubCycleTriggerFramesFieldNumber = 8;
    private int subCycleTriggerFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleTriggerFrames {
      get { return subCycleTriggerFrames_; }
      set {
        subCycleTriggerFrames_ = value;
      }
    }

    /// <summary>Field number for the "subCycleQuota" field.</summary>
    public const int SubCycleQuotaFieldNumber = 9;
    private int subCycleQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleQuota {
      get { return subCycleQuota_; }
      set {
        subCycleQuota_ = value;
      }
    }

    /// <summary>Field number for the "characterSpawnerTimeSeq" field.</summary>
    public const int CharacterSpawnerTimeSeqFieldNumber = 10;
    private static readonly pb::FieldCodec<global::shared.CharacterSpawnerConfig> _repeated_characterSpawnerTimeSeq_codec
        = pb::FieldCodec.ForMessage(82, global::shared.CharacterSpawnerConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterSpawnerConfig> characterSpawnerTimeSeq_ = new pbc::RepeatedField<global::shared.CharacterSpawnerConfig>();
    /// <summary>
    /// MUST Be configured by increasing "cutoffRdfFrameId"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterSpawnerConfig> CharacterSpawnerTimeSeq {
      get { return characterSpawnerTimeSeq_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (DelayedFrames != other.DelayedFrames) return false;
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if(!trackingIdList_.Equals(other.trackingIdList_)) return false;
      if (InitVelX != other.InitVelX) return false;
      if (InitVelY != other.InitVelY) return false;
      if (ChCollisionTeamId != other.ChCollisionTeamId) return false;
      if (SubCycleTriggerFrames != other.SubCycleTriggerFrames) return false;
      if (SubCycleQuota != other.SubCycleQuota) return false;
      if(!characterSpawnerTimeSeq_.Equals(other.characterSpawnerTimeSeq_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (DelayedFrames != 0) hash ^= DelayedFrames.GetHashCode();
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      hash ^= trackingIdList_.GetHashCode();
      if (InitVelX != 0) hash ^= InitVelX.GetHashCode();
      if (InitVelY != 0) hash ^= InitVelY.GetHashCode();
      if (ChCollisionTeamId != 0) hash ^= ChCollisionTeamId.GetHashCode();
      if (SubCycleTriggerFrames != 0) hash ^= SubCycleTriggerFrames.GetHashCode();
      if (SubCycleQuota != 0) hash ^= SubCycleQuota.GetHashCode();
      hash ^= characterSpawnerTimeSeq_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (DelayedFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFrames);
      }
      trackingIdList_.WriteTo(output, _repeated_trackingIdList_codec);
      if (InitVelX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InitVelX);
      }
      if (InitVelY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InitVelY);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubCycleQuota);
      }
      characterSpawnerTimeSeq_.WriteTo(output, _repeated_characterSpawnerTimeSeq_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (DelayedFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFrames);
      }
      trackingIdList_.WriteTo(ref output, _repeated_trackingIdList_codec);
      if (InitVelX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(InitVelX);
      }
      if (InitVelY != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InitVelY);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubCycleQuota);
      }
      characterSpawnerTimeSeq_.WriteTo(ref output, _repeated_characterSpawnerTimeSeq_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (DelayedFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      size += trackingIdList_.CalculateSize(_repeated_trackingIdList_codec);
      if (InitVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVelX);
      }
      if (InitVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVelY);
      }
      if (ChCollisionTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChCollisionTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuota);
      }
      size += characterSpawnerTimeSeq_.CalculateSize(_repeated_characterSpawnerTimeSeq_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.DelayedFrames != 0) {
        DelayedFrames = other.DelayedFrames;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      trackingIdList_.Add(other.trackingIdList_);
      if (other.InitVelX != 0) {
        InitVelX = other.InitVelX;
      }
      if (other.InitVelY != 0) {
        InitVelY = other.InitVelY;
      }
      if (other.ChCollisionTeamId != 0) {
        ChCollisionTeamId = other.ChCollisionTeamId;
      }
      if (other.SubCycleTriggerFrames != 0) {
        SubCycleTriggerFrames = other.SubCycleTriggerFrames;
      }
      if (other.SubCycleQuota != 0) {
        SubCycleQuota = other.SubCycleQuota;
      }
      characterSpawnerTimeSeq_.Add(other.characterSpawnerTimeSeq_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            DelayedFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            trackingIdList_.AddEntriesFrom(input, _repeated_trackingIdList_codec);
            break;
          }
          case 40: {
            InitVelX = input.ReadInt32();
            break;
          }
          case 48: {
            InitVelY = input.ReadInt32();
            break;
          }
          case 56: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 64: {
            SubCycleTriggerFrames = input.ReadInt32();
            break;
          }
          case 72: {
            SubCycleQuota = input.ReadInt32();
            break;
          }
          case 82: {
            characterSpawnerTimeSeq_.AddEntriesFrom(input, _repeated_characterSpawnerTimeSeq_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            DelayedFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            trackingIdList_.AddEntriesFrom(ref input, _repeated_trackingIdList_codec);
            break;
          }
          case 40: {
            InitVelX = input.ReadInt32();
            break;
          }
          case 48: {
            InitVelY = input.ReadInt32();
            break;
          }
          case 56: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 64: {
            SubCycleTriggerFrames = input.ReadInt32();
            break;
          }
          case 72: {
            SubCycleQuota = input.ReadInt32();
            break;
          }
          case 82: {
            characterSpawnerTimeSeq_.AddEntriesFrom(ref input, _repeated_characterSpawnerTimeSeq_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerColliderAttr : pb::IMessage<TriggerColliderAttr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerColliderAttr> _parser = new pb::MessageParser<TriggerColliderAttr>(() => new TriggerColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr(TriggerColliderAttr other) : this() {
      triggerLocalId_ = other.triggerLocalId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr Clone() {
      return new TriggerColliderAttr(this);
    }

    /// <summary>Field number for the "triggerLocalId" field.</summary>
    public const int TriggerLocalIdFieldNumber = 1;
    private int triggerLocalId_;
    /// <summary>
    /// ref-back upon collision, most (actually by now ALL) triggers are static, we use this "TriggerColliderAttr,triggerLocalId" to save the need of dynamically inserting and deleting colliders of each trigger while still being able to be rollback-compatible for "trigger.framesToFire &amp; trigger.framesToRecover"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerLocalId {
      get { return triggerLocalId_; }
      set {
        triggerLocalId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerLocalId != other.TriggerLocalId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerLocalId != 0) hash ^= TriggerLocalId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TriggerLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerLocalId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.TriggerLocalId != 0) {
        TriggerLocalId = other.TriggerLocalId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Trigger : pb::IMessage<Trigger>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trigger> _parser = new pb::MessageParser<Trigger>(() => new Trigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger(Trigger other) : this() {
      triggerLocalId_ = other.triggerLocalId_;
      framesToFire_ = other.framesToFire_;
      framesToRecover_ = other.framesToRecover_;
      quota_ = other.quota_;
      bulletTeamId_ = other.bulletTeamId_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      subCycleQuotaLeft_ = other.subCycleQuotaLeft_;
      state_ = other.state_;
      framesInState_ = other.framesInState_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger Clone() {
      return new Trigger(this);
    }

    /// <summary>Field number for the "triggerLocalId" field.</summary>
    public const int TriggerLocalIdFieldNumber = 1;
    private int triggerLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerLocalId {
      get { return triggerLocalId_; }
      set {
        triggerLocalId_ = value;
      }
    }

    /// <summary>Field number for the "framesToFire" field.</summary>
    public const int FramesToFireFieldNumber = 2;
    private int framesToFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToFire {
      get { return framesToFire_; }
      set {
        framesToFire_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 3;
    private int framesToRecover_;
    /// <summary>
    /// if TRIGGER_MASK_BY_CYCLIC_TIMER, resets whenever "0 &lt; subCycleQuotaLeft" and itself becomes 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 4;
    private int quota_;
    /// <summary>
    /// the initial value is from static config, but decreases upon use 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 5;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 6;
    private global::shared.TriggerConfig config_;
    /// <summary>
    /// static config, unchanged during battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "configFromTiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 7;
    private global::shared.TriggerConfigFromTiled configFromTiled_;
    /// <summary>
    /// static config, unchanged during battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "subCycleQuotaLeft" field.</summary>
    public const int SubCycleQuotaLeftFieldNumber = 8;
    private int subCycleQuotaLeft_;
    /// <summary>
    /// resets whenever "framesToRecover" becomes 0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleQuotaLeft {
      get { return subCycleQuotaLeft_; }
      set {
        subCycleQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private global::shared.TriggerState state_ = global::shared.TriggerState.Tready;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "framesInState" field.</summary>
    public const int FramesInStateFieldNumber = 10;
    private int framesInState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInState {
      get { return framesInState_; }
      set {
        framesInState_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 11;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 12;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerLocalId != other.TriggerLocalId) return false;
      if (FramesToFire != other.FramesToFire) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (Quota != other.Quota) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (SubCycleQuotaLeft != other.SubCycleQuotaLeft) return false;
      if (State != other.State) return false;
      if (FramesInState != other.FramesInState) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerLocalId != 0) hash ^= TriggerLocalId.GetHashCode();
      if (FramesToFire != 0) hash ^= FramesToFire.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (SubCycleQuotaLeft != 0) hash ^= SubCycleQuotaLeft.GetHashCode();
      if (State != global::shared.TriggerState.Tready) hash ^= State.GetHashCode();
      if (FramesInState != 0) hash ^= FramesInState.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesToFire);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (Quota != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quota);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTeamId);
      }
      if (config_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Config);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ConfigFromTiled);
      }
      if (SubCycleQuotaLeft != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        output.WriteRawTag(72);
        output.WriteEnum((int) State);
      }
      if (FramesInState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesInState);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VirtualGridY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesToFire);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (Quota != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Quota);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTeamId);
      }
      if (config_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Config);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ConfigFromTiled);
      }
      if (SubCycleQuotaLeft != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        output.WriteRawTag(72);
        output.WriteEnum((int) State);
      }
      if (FramesInState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesInState);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VirtualGridY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TriggerLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToFire);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (SubCycleQuotaLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (FramesInState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInState);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trigger other) {
      if (other == null) {
        return;
      }
      if (other.TriggerLocalId != 0) {
        TriggerLocalId = other.TriggerLocalId;
      }
      if (other.FramesToFire != 0) {
        FramesToFire = other.FramesToFire;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::shared.TriggerConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::shared.TriggerConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.SubCycleQuotaLeft != 0) {
        SubCycleQuotaLeft = other.SubCycleQuotaLeft;
      }
      if (other.State != global::shared.TriggerState.Tready) {
        State = other.State;
      }
      if (other.FramesInState != 0) {
        FramesInState = other.FramesInState;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            FramesToFire = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            Quota = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 50: {
            if (config_ == null) {
              Config = new global::shared.TriggerConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 58: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TriggerConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 64: {
            SubCycleQuotaLeft = input.ReadInt32();
            break;
          }
          case 72: {
            State = (global::shared.TriggerState) input.ReadEnum();
            break;
          }
          case 80: {
            FramesInState = input.ReadInt32();
            break;
          }
          case 88: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 96: {
            VirtualGridY = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            FramesToFire = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            Quota = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 50: {
            if (config_ == null) {
              Config = new global::shared.TriggerConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 58: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TriggerConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 64: {
            SubCycleQuotaLeft = input.ReadInt32();
            break;
          }
          case 72: {
            State = (global::shared.TriggerState) input.ReadEnum();
            break;
          }
          case 80: {
            FramesInState = input.ReadInt32();
            break;
          }
          case 88: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 96: {
            VirtualGridY = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PeerUdpAddr : pb::IMessage<PeerUdpAddr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeerUdpAddr> _parser = new pb::MessageParser<PeerUdpAddr>(() => new PeerUdpAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PeerUdpAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr(PeerUdpAddr other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      authKey_ = other.authKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr Clone() {
      return new PeerUdpAddr(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "authKey" field.</summary>
    public const int AuthKeyFieldNumber = 3;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PeerUdpAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PeerUdpAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (AuthKey != other.AuthKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PeerUdpAddr other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            AuthKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            AuthKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleColliderInfo : pb::IMessage<BattleColliderInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleColliderInfo> _parser = new pb::MessageParser<BattleColliderInfo>(() => new BattleColliderInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleColliderInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo(BattleColliderInfo other) : this() {
      stageName_ = other.stageName_;
      boundRoomId_ = other.boundRoomId_;
      battleDurationFrames_ = other.battleDurationFrames_;
      inputFrameUpsyncDelayTolerance_ = other.inputFrameUpsyncDelayTolerance_;
      maxChasingRenderFramesPerUpdate_ = other.maxChasingRenderFramesPerUpdate_;
      rollbackEstimatedDtMillis_ = other.rollbackEstimatedDtMillis_;
      rollbackEstimatedDtNanos_ = other.rollbackEstimatedDtNanos_;
      renderBufferSize_ = other.renderBufferSize_;
      collisionMinStep_ = other.collisionMinStep_;
      boundRoomCapacity_ = other.boundRoomCapacity_;
      preallocNpcCapacity_ = other.preallocNpcCapacity_;
      preallocBulletCapacity_ = other.preallocBulletCapacity_;
      battleUdpTunnel_ = other.battleUdpTunnel_ != null ? other.battleUdpTunnel_.Clone() : null;
      frameLogEnabled_ = other.frameLogEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo Clone() {
      return new BattleColliderInfo(this);
    }

    /// <summary>Field number for the "stageName" field.</summary>
    public const int StageNameFieldNumber = 1;
    private string stageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StageName {
      get { return stageName_; }
      set {
        stageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boundRoomId" field.</summary>
    public const int BoundRoomIdFieldNumber = 2;
    private int boundRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoundRoomId {
      get { return boundRoomId_; }
      set {
        boundRoomId_ = value;
      }
    }

    /// <summary>Field number for the "battleDurationFrames" field.</summary>
    public const int BattleDurationFramesFieldNumber = 3;
    private long battleDurationFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BattleDurationFrames {
      get { return battleDurationFrames_; }
      set {
        battleDurationFrames_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameUpsyncDelayTolerance" field.</summary>
    public const int InputFrameUpsyncDelayToleranceFieldNumber = 4;
    private int inputFrameUpsyncDelayTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameUpsyncDelayTolerance {
      get { return inputFrameUpsyncDelayTolerance_; }
      set {
        inputFrameUpsyncDelayTolerance_ = value;
      }
    }

    /// <summary>Field number for the "maxChasingRenderFramesPerUpdate" field.</summary>
    public const int MaxChasingRenderFramesPerUpdateFieldNumber = 5;
    private int maxChasingRenderFramesPerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxChasingRenderFramesPerUpdate {
      get { return maxChasingRenderFramesPerUpdate_; }
      set {
        maxChasingRenderFramesPerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "rollbackEstimatedDtMillis" field.</summary>
    public const int RollbackEstimatedDtMillisFieldNumber = 6;
    private double rollbackEstimatedDtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RollbackEstimatedDtMillis {
      get { return rollbackEstimatedDtMillis_; }
      set {
        rollbackEstimatedDtMillis_ = value;
      }
    }

    /// <summary>Field number for the "rollbackEstimatedDtNanos" field.</summary>
    public const int RollbackEstimatedDtNanosFieldNumber = 7;
    private long rollbackEstimatedDtNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RollbackEstimatedDtNanos {
      get { return rollbackEstimatedDtNanos_; }
      set {
        rollbackEstimatedDtNanos_ = value;
      }
    }

    /// <summary>Field number for the "renderBufferSize" field.</summary>
    public const int RenderBufferSizeFieldNumber = 8;
    private int renderBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RenderBufferSize {
      get { return renderBufferSize_; }
      set {
        renderBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "collisionMinStep" field.</summary>
    public const int CollisionMinStepFieldNumber = 9;
    private int collisionMinStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CollisionMinStep {
      get { return collisionMinStep_; }
      set {
        collisionMinStep_ = value;
      }
    }

    /// <summary>Field number for the "boundRoomCapacity" field.</summary>
    public const int BoundRoomCapacityFieldNumber = 10;
    private int boundRoomCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoundRoomCapacity {
      get { return boundRoomCapacity_; }
      set {
        boundRoomCapacity_ = value;
      }
    }

    /// <summary>Field number for the "preallocNpcCapacity" field.</summary>
    public const int PreallocNpcCapacityFieldNumber = 11;
    private int preallocNpcCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreallocNpcCapacity {
      get { return preallocNpcCapacity_; }
      set {
        preallocNpcCapacity_ = value;
      }
    }

    /// <summary>Field number for the "preallocBulletCapacity" field.</summary>
    public const int PreallocBulletCapacityFieldNumber = 12;
    private int preallocBulletCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreallocBulletCapacity {
      get { return preallocBulletCapacity_; }
      set {
        preallocBulletCapacity_ = value;
      }
    }

    /// <summary>Field number for the "battleUdpTunnel" field.</summary>
    public const int BattleUdpTunnelFieldNumber = 1024;
    private global::shared.PeerUdpAddr battleUdpTunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PeerUdpAddr BattleUdpTunnel {
      get { return battleUdpTunnel_; }
      set {
        battleUdpTunnel_ = value;
      }
    }

    /// <summary>Field number for the "frameLogEnabled" field.</summary>
    public const int FrameLogEnabledFieldNumber = 1025;
    private bool frameLogEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FrameLogEnabled {
      get { return frameLogEnabled_; }
      set {
        frameLogEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleColliderInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleColliderInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageName != other.StageName) return false;
      if (BoundRoomId != other.BoundRoomId) return false;
      if (BattleDurationFrames != other.BattleDurationFrames) return false;
      if (InputFrameUpsyncDelayTolerance != other.InputFrameUpsyncDelayTolerance) return false;
      if (MaxChasingRenderFramesPerUpdate != other.MaxChasingRenderFramesPerUpdate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollbackEstimatedDtMillis, other.RollbackEstimatedDtMillis)) return false;
      if (RollbackEstimatedDtNanos != other.RollbackEstimatedDtNanos) return false;
      if (RenderBufferSize != other.RenderBufferSize) return false;
      if (CollisionMinStep != other.CollisionMinStep) return false;
      if (BoundRoomCapacity != other.BoundRoomCapacity) return false;
      if (PreallocNpcCapacity != other.PreallocNpcCapacity) return false;
      if (PreallocBulletCapacity != other.PreallocBulletCapacity) return false;
      if (!object.Equals(BattleUdpTunnel, other.BattleUdpTunnel)) return false;
      if (FrameLogEnabled != other.FrameLogEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StageName.Length != 0) hash ^= StageName.GetHashCode();
      if (BoundRoomId != 0) hash ^= BoundRoomId.GetHashCode();
      if (BattleDurationFrames != 0L) hash ^= BattleDurationFrames.GetHashCode();
      if (InputFrameUpsyncDelayTolerance != 0) hash ^= InputFrameUpsyncDelayTolerance.GetHashCode();
      if (MaxChasingRenderFramesPerUpdate != 0) hash ^= MaxChasingRenderFramesPerUpdate.GetHashCode();
      if (RollbackEstimatedDtMillis != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollbackEstimatedDtMillis);
      if (RollbackEstimatedDtNanos != 0L) hash ^= RollbackEstimatedDtNanos.GetHashCode();
      if (RenderBufferSize != 0) hash ^= RenderBufferSize.GetHashCode();
      if (CollisionMinStep != 0) hash ^= CollisionMinStep.GetHashCode();
      if (BoundRoomCapacity != 0) hash ^= BoundRoomCapacity.GetHashCode();
      if (PreallocNpcCapacity != 0) hash ^= PreallocNpcCapacity.GetHashCode();
      if (PreallocBulletCapacity != 0) hash ^= PreallocBulletCapacity.GetHashCode();
      if (battleUdpTunnel_ != null) hash ^= BattleUdpTunnel.GetHashCode();
      if (FrameLogEnabled != false) hash ^= FrameLogEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RollbackEstimatedDtMillis);
      }
      if (RollbackEstimatedDtNanos != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(FrameLogEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RollbackEstimatedDtMillis);
      }
      if (RollbackEstimatedDtNanos != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(FrameLogEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageName);
      }
      if (BoundRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        size += 1 + 8;
      }
      if (RollbackEstimatedDtNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleColliderInfo other) {
      if (other == null) {
        return;
      }
      if (other.StageName.Length != 0) {
        StageName = other.StageName;
      }
      if (other.BoundRoomId != 0) {
        BoundRoomId = other.BoundRoomId;
      }
      if (other.BattleDurationFrames != 0L) {
        BattleDurationFrames = other.BattleDurationFrames;
      }
      if (other.InputFrameUpsyncDelayTolerance != 0) {
        InputFrameUpsyncDelayTolerance = other.InputFrameUpsyncDelayTolerance;
      }
      if (other.MaxChasingRenderFramesPerUpdate != 0) {
        MaxChasingRenderFramesPerUpdate = other.MaxChasingRenderFramesPerUpdate;
      }
      if (other.RollbackEstimatedDtMillis != 0D) {
        RollbackEstimatedDtMillis = other.RollbackEstimatedDtMillis;
      }
      if (other.RollbackEstimatedDtNanos != 0L) {
        RollbackEstimatedDtNanos = other.RollbackEstimatedDtNanos;
      }
      if (other.RenderBufferSize != 0) {
        RenderBufferSize = other.RenderBufferSize;
      }
      if (other.CollisionMinStep != 0) {
        CollisionMinStep = other.CollisionMinStep;
      }
      if (other.BoundRoomCapacity != 0) {
        BoundRoomCapacity = other.BoundRoomCapacity;
      }
      if (other.PreallocNpcCapacity != 0) {
        PreallocNpcCapacity = other.PreallocNpcCapacity;
      }
      if (other.PreallocBulletCapacity != 0) {
        PreallocBulletCapacity = other.PreallocBulletCapacity;
      }
      if (other.battleUdpTunnel_ != null) {
        if (battleUdpTunnel_ == null) {
          BattleUdpTunnel = new global::shared.PeerUdpAddr();
        }
        BattleUdpTunnel.MergeFrom(other.BattleUdpTunnel);
      }
      if (other.FrameLogEnabled != false) {
        FrameLogEnabled = other.FrameLogEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 16: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleDurationFrames = input.ReadInt64();
            break;
          }
          case 32: {
            InputFrameUpsyncDelayTolerance = input.ReadInt32();
            break;
          }
          case 40: {
            MaxChasingRenderFramesPerUpdate = input.ReadInt32();
            break;
          }
          case 49: {
            RollbackEstimatedDtMillis = input.ReadDouble();
            break;
          }
          case 56: {
            RollbackEstimatedDtNanos = input.ReadInt64();
            break;
          }
          case 64: {
            RenderBufferSize = input.ReadInt32();
            break;
          }
          case 72: {
            CollisionMinStep = input.ReadInt32();
            break;
          }
          case 80: {
            BoundRoomCapacity = input.ReadInt32();
            break;
          }
          case 88: {
            PreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 96: {
            PreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 8194: {
            if (battleUdpTunnel_ == null) {
              BattleUdpTunnel = new global::shared.PeerUdpAddr();
            }
            input.ReadMessage(BattleUdpTunnel);
            break;
          }
          case 8200: {
            FrameLogEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 16: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleDurationFrames = input.ReadInt64();
            break;
          }
          case 32: {
            InputFrameUpsyncDelayTolerance = input.ReadInt32();
            break;
          }
          case 40: {
            MaxChasingRenderFramesPerUpdate = input.ReadInt32();
            break;
          }
          case 49: {
            RollbackEstimatedDtMillis = input.ReadDouble();
            break;
          }
          case 56: {
            RollbackEstimatedDtNanos = input.ReadInt64();
            break;
          }
          case 64: {
            RenderBufferSize = input.ReadInt32();
            break;
          }
          case 72: {
            CollisionMinStep = input.ReadInt32();
            break;
          }
          case 80: {
            BoundRoomCapacity = input.ReadInt32();
            break;
          }
          case 88: {
            PreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 96: {
            PreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 8194: {
            if (battleUdpTunnel_ == null) {
              BattleUdpTunnel = new global::shared.PeerUdpAddr();
            }
            input.ReadMessage(BattleUdpTunnel);
            break;
          }
          case 8200: {
            FrameLogEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomDownsyncFrame : pb::IMessage<RoomDownsyncFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomDownsyncFrame> _parser = new pb::MessageParser<RoomDownsyncFrame>(() => new RoomDownsyncFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoomDownsyncFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame(RoomDownsyncFrame other) : this() {
      id_ = other.id_;
      playersArr_ = other.playersArr_.Clone();
      countdownNanos_ = other.countdownNanos_;
      bullets_ = other.bullets_.Clone();
      npcsArr_ = other.npcsArr_.Clone();
      trapsArr_ = other.trapsArr_.Clone();
      triggersArr_ = other.triggersArr_.Clone();
      backendUnconfirmedMask_ = other.backendUnconfirmedMask_;
      shouldForceResync_ = other.shouldForceResync_;
      speciesIdList_ = other.speciesIdList_.Clone();
      bulletLocalIdCounter_ = other.bulletLocalIdCounter_;
      npcLocalIdCounter_ = other.npcLocalIdCounter_;
      participantChangeId_ = other.participantChangeId_;
      peerUdpAddrList_ = other.peerUdpAddrList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame Clone() {
      return new RoomDownsyncFrame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "playersArr" field.</summary>
    public const int PlayersArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::shared.CharacterDownsync> _repeated_playersArr_codec
        = pb::FieldCodec.ForMessage(18, global::shared.CharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterDownsync> playersArr_ = new pbc::RepeatedField<global::shared.CharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterDownsync> PlayersArr {
      get { return playersArr_; }
    }

    /// <summary>Field number for the "countdownNanos" field.</summary>
    public const int CountdownNanosFieldNumber = 3;
    private long countdownNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CountdownNanos {
      get { return countdownNanos_; }
      set {
        countdownNanos_ = value;
      }
    }

    /// <summary>Field number for the "bullets" field.</summary>
    public const int BulletsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::shared.Bullet> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(34, global::shared.Bullet.Parser);
    private readonly pbc::RepeatedField<global::shared.Bullet> bullets_ = new pbc::RepeatedField<global::shared.Bullet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Bullet> Bullets {
      get { return bullets_; }
    }

    /// <summary>Field number for the "npcsArr" field.</summary>
    public const int NpcsArrFieldNumber = 5;
    private static readonly pb::FieldCodec<global::shared.CharacterDownsync> _repeated_npcsArr_codec
        = pb::FieldCodec.ForMessage(42, global::shared.CharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterDownsync> npcsArr_ = new pbc::RepeatedField<global::shared.CharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterDownsync> NpcsArr {
      get { return npcsArr_; }
    }

    /// <summary>Field number for the "trapsArr" field.</summary>
    public const int TrapsArrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::shared.Trap> _repeated_trapsArr_codec
        = pb::FieldCodec.ForMessage(50, global::shared.Trap.Parser);
    private readonly pbc::RepeatedField<global::shared.Trap> trapsArr_ = new pbc::RepeatedField<global::shared.Trap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Trap> TrapsArr {
      get { return trapsArr_; }
    }

    /// <summary>Field number for the "triggersArr" field.</summary>
    public const int TriggersArrFieldNumber = 7;
    private static readonly pb::FieldCodec<global::shared.Trigger> _repeated_triggersArr_codec
        = pb::FieldCodec.ForMessage(58, global::shared.Trigger.Parser);
    private readonly pbc::RepeatedField<global::shared.Trigger> triggersArr_ = new pbc::RepeatedField<global::shared.Trigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Trigger> TriggersArr {
      get { return triggersArr_; }
    }

    /// <summary>Field number for the "backendUnconfirmedMask" field.</summary>
    public const int BackendUnconfirmedMaskFieldNumber = 1024;
    private ulong backendUnconfirmedMask_;
    /// <summary>
    /// Indexed by "joinIndex", same compression concern as stated in InputFrameDownsync
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BackendUnconfirmedMask {
      get { return backendUnconfirmedMask_; }
      set {
        backendUnconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "shouldForceResync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 1025;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "speciesIdList" field.</summary>
    public const int SpeciesIdListFieldNumber = 1026;
    private static readonly pb::FieldCodec<int> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForInt32(8210);
    private readonly pbc::RepeatedField<int> speciesIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "bulletLocalIdCounter" field.</summary>
    public const int BulletLocalIdCounterFieldNumber = 1027;
    private int bulletLocalIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletLocalIdCounter {
      get { return bulletLocalIdCounter_; }
      set {
        bulletLocalIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "npcLocalIdCounter" field.</summary>
    public const int NpcLocalIdCounterFieldNumber = 1028;
    private int npcLocalIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NpcLocalIdCounter {
      get { return npcLocalIdCounter_; }
      set {
        npcLocalIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "participantChangeId" field.</summary>
    public const int ParticipantChangeIdFieldNumber = 1029;
    private int participantChangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParticipantChangeId {
      get { return participantChangeId_; }
      set {
        participantChangeId_ = value;
      }
    }

    /// <summary>Field number for the "peerUdpAddrList" field.</summary>
    public const int PeerUdpAddrListFieldNumber = 2048;
    private static readonly pb::FieldCodec<global::shared.PeerUdpAddr> _repeated_peerUdpAddrList_codec
        = pb::FieldCodec.ForMessage(16386, global::shared.PeerUdpAddr.Parser);
    private readonly pbc::RepeatedField<global::shared.PeerUdpAddr> peerUdpAddrList_ = new pbc::RepeatedField<global::shared.PeerUdpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.PeerUdpAddr> PeerUdpAddrList {
      get { return peerUdpAddrList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoomDownsyncFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoomDownsyncFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!playersArr_.Equals(other.playersArr_)) return false;
      if (CountdownNanos != other.CountdownNanos) return false;
      if(!bullets_.Equals(other.bullets_)) return false;
      if(!npcsArr_.Equals(other.npcsArr_)) return false;
      if(!trapsArr_.Equals(other.trapsArr_)) return false;
      if(!triggersArr_.Equals(other.triggersArr_)) return false;
      if (BackendUnconfirmedMask != other.BackendUnconfirmedMask) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if (BulletLocalIdCounter != other.BulletLocalIdCounter) return false;
      if (NpcLocalIdCounter != other.NpcLocalIdCounter) return false;
      if (ParticipantChangeId != other.ParticipantChangeId) return false;
      if(!peerUdpAddrList_.Equals(other.peerUdpAddrList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= playersArr_.GetHashCode();
      if (CountdownNanos != 0L) hash ^= CountdownNanos.GetHashCode();
      hash ^= bullets_.GetHashCode();
      hash ^= npcsArr_.GetHashCode();
      hash ^= trapsArr_.GetHashCode();
      hash ^= triggersArr_.GetHashCode();
      if (BackendUnconfirmedMask != 0UL) hash ^= BackendUnconfirmedMask.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      if (BulletLocalIdCounter != 0) hash ^= BulletLocalIdCounter.GetHashCode();
      if (NpcLocalIdCounter != 0) hash ^= NpcLocalIdCounter.GetHashCode();
      if (ParticipantChangeId != 0) hash ^= ParticipantChangeId.GetHashCode();
      hash ^= peerUdpAddrList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      playersArr_.WriteTo(output, _repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CountdownNanos);
      }
      bullets_.WriteTo(output, _repeated_bullets_codec);
      npcsArr_.WriteTo(output, _repeated_npcsArr_codec);
      trapsArr_.WriteTo(output, _repeated_trapsArr_codec);
      triggersArr_.WriteTo(output, _repeated_triggersArr_codec);
      if (BackendUnconfirmedMask != 0UL) {
        output.WriteRawTag(128, 64);
        output.WriteUInt64(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(ShouldForceResync);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        output.WriteRawTag(168, 64);
        output.WriteInt32(ParticipantChangeId);
      }
      peerUdpAddrList_.WriteTo(output, _repeated_peerUdpAddrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      playersArr_.WriteTo(ref output, _repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CountdownNanos);
      }
      bullets_.WriteTo(ref output, _repeated_bullets_codec);
      npcsArr_.WriteTo(ref output, _repeated_npcsArr_codec);
      trapsArr_.WriteTo(ref output, _repeated_trapsArr_codec);
      triggersArr_.WriteTo(ref output, _repeated_triggersArr_codec);
      if (BackendUnconfirmedMask != 0UL) {
        output.WriteRawTag(128, 64);
        output.WriteUInt64(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(ShouldForceResync);
      }
      speciesIdList_.WriteTo(ref output, _repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        output.WriteRawTag(168, 64);
        output.WriteInt32(ParticipantChangeId);
      }
      peerUdpAddrList_.WriteTo(ref output, _repeated_peerUdpAddrList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += playersArr_.CalculateSize(_repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountdownNanos);
      }
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      size += npcsArr_.CalculateSize(_repeated_npcsArr_codec);
      size += trapsArr_.CalculateSize(_repeated_trapsArr_codec);
      size += triggersArr_.CalculateSize(_repeated_triggersArr_codec);
      if (BackendUnconfirmedMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        size += 2 + 1;
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParticipantChangeId);
      }
      size += peerUdpAddrList_.CalculateSize(_repeated_peerUdpAddrList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoomDownsyncFrame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      playersArr_.Add(other.playersArr_);
      if (other.CountdownNanos != 0L) {
        CountdownNanos = other.CountdownNanos;
      }
      bullets_.Add(other.bullets_);
      npcsArr_.Add(other.npcsArr_);
      trapsArr_.Add(other.trapsArr_);
      triggersArr_.Add(other.triggersArr_);
      if (other.BackendUnconfirmedMask != 0UL) {
        BackendUnconfirmedMask = other.BackendUnconfirmedMask;
      }
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      speciesIdList_.Add(other.speciesIdList_);
      if (other.BulletLocalIdCounter != 0) {
        BulletLocalIdCounter = other.BulletLocalIdCounter;
      }
      if (other.NpcLocalIdCounter != 0) {
        NpcLocalIdCounter = other.NpcLocalIdCounter;
      }
      if (other.ParticipantChangeId != 0) {
        ParticipantChangeId = other.ParticipantChangeId;
      }
      peerUdpAddrList_.Add(other.peerUdpAddrList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            playersArr_.AddEntriesFrom(input, _repeated_playersArr_codec);
            break;
          }
          case 24: {
            CountdownNanos = input.ReadInt64();
            break;
          }
          case 34: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
          case 42: {
            npcsArr_.AddEntriesFrom(input, _repeated_npcsArr_codec);
            break;
          }
          case 50: {
            trapsArr_.AddEntriesFrom(input, _repeated_trapsArr_codec);
            break;
          }
          case 58: {
            triggersArr_.AddEntriesFrom(input, _repeated_triggersArr_codec);
            break;
          }
          case 8192: {
            BackendUnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 8200: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 8210:
          case 8208: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 8216: {
            BulletLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8224: {
            NpcLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8232: {
            ParticipantChangeId = input.ReadInt32();
            break;
          }
          case 16386: {
            peerUdpAddrList_.AddEntriesFrom(input, _repeated_peerUdpAddrList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            playersArr_.AddEntriesFrom(ref input, _repeated_playersArr_codec);
            break;
          }
          case 24: {
            CountdownNanos = input.ReadInt64();
            break;
          }
          case 34: {
            bullets_.AddEntriesFrom(ref input, _repeated_bullets_codec);
            break;
          }
          case 42: {
            npcsArr_.AddEntriesFrom(ref input, _repeated_npcsArr_codec);
            break;
          }
          case 50: {
            trapsArr_.AddEntriesFrom(ref input, _repeated_trapsArr_codec);
            break;
          }
          case 58: {
            triggersArr_.AddEntriesFrom(ref input, _repeated_triggersArr_codec);
            break;
          }
          case 8192: {
            BackendUnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 8200: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 8210:
          case 8208: {
            speciesIdList_.AddEntriesFrom(ref input, _repeated_speciesIdList_codec);
            break;
          }
          case 8216: {
            BulletLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8224: {
            NpcLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8232: {
            ParticipantChangeId = input.ReadInt32();
            break;
          }
          case 16386: {
            peerUdpAddrList_.AddEntriesFrom(ref input, _repeated_peerUdpAddrList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WsResp : pb::IMessage<WsResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WsResp> _parser = new pb::MessageParser<WsResp>(() => new WsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp(WsResp other) : this() {
      ret_ = other.ret_;
      act_ = other.act_;
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      inputFrameDownsyncBatch_ = other.inputFrameDownsyncBatch_.Clone();
      bciFrame_ = other.bciFrame_ != null ? other.bciFrame_.Clone() : null;
      peerJoinIndex_ = other.peerJoinIndex_;
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp Clone() {
      return new WsResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 3;
    private global::shared.RoomDownsyncFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.RoomDownsyncFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameDownsyncBatch" field.</summary>
    public const int InputFrameDownsyncBatchFieldNumber = 4;
    private static readonly pb::FieldCodec<global::shared.InputFrameDownsync> _repeated_inputFrameDownsyncBatch_codec
        = pb::FieldCodec.ForMessage(34, global::shared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameDownsync> inputFrameDownsyncBatch_ = new pbc::RepeatedField<global::shared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameDownsync> InputFrameDownsyncBatch {
      get { return inputFrameDownsyncBatch_; }
    }

    /// <summary>Field number for the "bciFrame" field.</summary>
    public const int BciFrameFieldNumber = 5;
    private global::shared.BattleColliderInfo bciFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BattleColliderInfo BciFrame {
      get { return bciFrame_; }
      set {
        bciFrame_ = value;
      }
    }

    /// <summary>Field number for the "peerJoinIndex" field.</summary>
    public const int PeerJoinIndexFieldNumber = 6;
    private int peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 7;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Act != other.Act) return false;
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if(!inputFrameDownsyncBatch_.Equals(other.inputFrameDownsyncBatch_)) return false;
      if (!object.Equals(BciFrame, other.BciFrame)) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      hash ^= inputFrameDownsyncBatch_.GetHashCode();
      if (bciFrame_ != null) hash ^= BciFrame.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (rdf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rdf);
      }
      inputFrameDownsyncBatch_.WriteTo(output, _repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PeerJoinIndex);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (rdf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rdf);
      }
      inputFrameDownsyncBatch_.WriteTo(ref output, _repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PeerJoinIndex);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      size += inputFrameDownsyncBatch_.CalculateSize(_repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerJoinIndex);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WsResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::shared.RoomDownsyncFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      inputFrameDownsyncBatch_.Add(other.inputFrameDownsyncBatch_);
      if (other.bciFrame_ != null) {
        if (bciFrame_ == null) {
          BciFrame = new global::shared.BattleColliderInfo();
        }
        BciFrame.MergeFrom(other.BciFrame);
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 26: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 34: {
            inputFrameDownsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameDownsyncBatch_codec);
            break;
          }
          case 42: {
            if (bciFrame_ == null) {
              BciFrame = new global::shared.BattleColliderInfo();
            }
            input.ReadMessage(BciFrame);
            break;
          }
          case 48: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
          case 58: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 26: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 34: {
            inputFrameDownsyncBatch_.AddEntriesFrom(ref input, _repeated_inputFrameDownsyncBatch_codec);
            break;
          }
          case 42: {
            if (bciFrame_ == null) {
              BciFrame = new global::shared.BattleColliderInfo();
            }
            input.ReadMessage(BciFrame);
            break;
          }
          case 48: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
          case 58: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Skill : pb::IMessage<Skill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill(Skill other) : this() {
      battleLocalId_ = other.battleLocalId_;
      recoveryFrames_ = other.recoveryFrames_;
      recoveryFramesOnBlock_ = other.recoveryFramesOnBlock_;
      recoveryFramesOnHit_ = other.recoveryFramesOnHit_;
      triggerType_ = other.triggerType_;
      boundChState_ = other.boundChState_;
      mpDelta_ = other.mpDelta_;
      hits_ = other.hits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "battleLocalId" field.</summary>
    public const int BattleLocalIdFieldNumber = 1;
    private int battleLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleLocalId {
      get { return battleLocalId_; }
      set {
        battleLocalId_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFrames" field.</summary>
    public const int RecoveryFramesFieldNumber = 2;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFramesOnBlock" field.</summary>
    public const int RecoveryFramesOnBlockFieldNumber = 3;
    private int recoveryFramesOnBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFramesOnBlock {
      get { return recoveryFramesOnBlock_; }
      set {
        recoveryFramesOnBlock_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFramesOnHit" field.</summary>
    public const int RecoveryFramesOnHitFieldNumber = 4;
    private int recoveryFramesOnHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFramesOnHit {
      get { return recoveryFramesOnHit_; }
      set {
        recoveryFramesOnHit_ = value;
      }
    }

    /// <summary>Field number for the "triggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 5;
    private global::shared.SkillTriggerType triggerType_ = global::shared.SkillTriggerType.RisingEdge;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SkillTriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "boundChState" field.</summary>
    public const int BoundChStateFieldNumber = 6;
    private global::shared.CharacterState boundChState_ = global::shared.CharacterState.Idle1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.CharacterState BoundChState {
      get { return boundChState_; }
      set {
        boundChState_ = value;
      }
    }

    /// <summary>Field number for the "mpDelta" field.</summary>
    public const int MpDeltaFieldNumber = 7;
    private int mpDelta_;
    /// <summary>
    /// Usually used as "mp consumption"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MpDelta {
      get { return mpDelta_; }
      set {
        mpDelta_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 1024;
    private static readonly pb::FieldCodec<global::shared.BulletConfig> _repeated_hits_codec
        = pb::FieldCodec.ForMessage(8194, global::shared.BulletConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.BulletConfig> hits_ = new pbc::RepeatedField<global::shared.BulletConfig>();
    /// <summary>
    /// Hits within a "Skill" are automatically triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.BulletConfig> Hits {
      get { return hits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleLocalId != other.BattleLocalId) return false;
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if (RecoveryFramesOnBlock != other.RecoveryFramesOnBlock) return false;
      if (RecoveryFramesOnHit != other.RecoveryFramesOnHit) return false;
      if (TriggerType != other.TriggerType) return false;
      if (BoundChState != other.BoundChState) return false;
      if (MpDelta != other.MpDelta) return false;
      if(!hits_.Equals(other.hits_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleLocalId != 0) hash ^= BattleLocalId.GetHashCode();
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      if (RecoveryFramesOnBlock != 0) hash ^= RecoveryFramesOnBlock.GetHashCode();
      if (RecoveryFramesOnHit != 0) hash ^= RecoveryFramesOnHit.GetHashCode();
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) hash ^= TriggerType.GetHashCode();
      if (BoundChState != global::shared.CharacterState.Idle1) hash ^= BoundChState.GetHashCode();
      if (MpDelta != 0) hash ^= MpDelta.GetHashCode();
      hash ^= hits_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BattleLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BoundChState);
      }
      if (MpDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MpDelta);
      }
      hits_.WriteTo(output, _repeated_hits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BattleLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BoundChState);
      }
      if (MpDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MpDelta);
      }
      hits_.WriteTo(ref output, _repeated_hits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BattleLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoundChState);
      }
      if (MpDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpDelta);
      }
      size += hits_.CalculateSize(_repeated_hits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.BattleLocalId != 0) {
        BattleLocalId = other.BattleLocalId;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      if (other.RecoveryFramesOnBlock != 0) {
        RecoveryFramesOnBlock = other.RecoveryFramesOnBlock;
      }
      if (other.RecoveryFramesOnHit != 0) {
        RecoveryFramesOnHit = other.RecoveryFramesOnHit;
      }
      if (other.TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        TriggerType = other.TriggerType;
      }
      if (other.BoundChState != global::shared.CharacterState.Idle1) {
        BoundChState = other.BoundChState;
      }
      if (other.MpDelta != 0) {
        MpDelta = other.MpDelta;
      }
      hits_.Add(other.hits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFramesOnBlock = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFramesOnHit = input.ReadInt32();
            break;
          }
          case 40: {
            TriggerType = (global::shared.SkillTriggerType) input.ReadEnum();
            break;
          }
          case 48: {
            BoundChState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 56: {
            MpDelta = input.ReadInt32();
            break;
          }
          case 8194: {
            hits_.AddEntriesFrom(input, _repeated_hits_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BattleLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFramesOnBlock = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFramesOnHit = input.ReadInt32();
            break;
          }
          case 40: {
            TriggerType = (global::shared.SkillTriggerType) input.ReadEnum();
            break;
          }
          case 48: {
            BoundChState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 56: {
            MpDelta = input.ReadInt32();
            break;
          }
          case 8194: {
            hits_.AddEntriesFrom(ref input, _repeated_hits_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FrameLog : pb::IMessage<FrameLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameLog> _parser = new pb::MessageParser<FrameLog>(() => new FrameLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog(FrameLog other) : this() {
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      actuallyUsedIdf_ = other.actuallyUsedIdf_ != null ? other.actuallyUsedIdf_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog Clone() {
      return new FrameLog(this);
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 1;
    private global::shared.RoomDownsyncFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.RoomDownsyncFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "actuallyUsedIdf" field.</summary>
    public const int ActuallyUsedIdfFieldNumber = 2;
    private global::shared.InputFrameDownsync actuallyUsedIdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.InputFrameDownsync ActuallyUsedIdf {
      get { return actuallyUsedIdf_; }
      set {
        actuallyUsedIdf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if (!object.Equals(ActuallyUsedIdf, other.ActuallyUsedIdf)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      if (actuallyUsedIdf_ != null) hash ^= ActuallyUsedIdf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rdf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rdf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameLog other) {
      if (other == null) {
        return;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::shared.RoomDownsyncFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      if (other.actuallyUsedIdf_ != null) {
        if (actuallyUsedIdf_ == null) {
          ActuallyUsedIdf = new global::shared.InputFrameDownsync();
        }
        ActuallyUsedIdf.MergeFrom(other.ActuallyUsedIdf);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 18: {
            if (actuallyUsedIdf_ == null) {
              ActuallyUsedIdf = new global::shared.InputFrameDownsync();
            }
            input.ReadMessage(ActuallyUsedIdf);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 18: {
            if (actuallyUsedIdf_ == null) {
              ActuallyUsedIdf = new global::shared.InputFrameDownsync();
            }
            input.ReadMessage(ActuallyUsedIdf);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleResult : pb::IMessage<BattleResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleResult> _parser = new pb::MessageParser<BattleResult>(() => new BattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult(BattleResult other) : this() {
      winnerJoinIndex_ = other.winnerJoinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult Clone() {
      return new BattleResult(this);
    }

    /// <summary>Field number for the "winnerJoinIndex" field.</summary>
    public const int WinnerJoinIndexFieldNumber = 1;
    private int winnerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinnerJoinIndex {
      get { return winnerJoinIndex_; }
      set {
        winnerJoinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinnerJoinIndex != other.WinnerJoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (WinnerJoinIndex != 0) hash ^= WinnerJoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinnerJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinnerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinnerJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinnerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (WinnerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerJoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleResult other) {
      if (other == null) {
        return;
      }
      if (other.WinnerJoinIndex != 0) {
        WinnerJoinIndex = other.WinnerJoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinnerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinnerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DebuffConfig : pb::IMessage<DebuffConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebuffConfig> _parser = new pb::MessageParser<DebuffConfig>(() => new DebuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DebuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig(DebuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      type_ = other.type_;
      arrIdx_ = other.arrIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig Clone() {
      return new DebuffConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::shared.BuffStockType stockType_ = global::shared.BuffStockType.NoneBf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::shared.DebuffType type_ = global::shared.DebuffType.NoneDbf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.DebuffType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "arrIdx" field.</summary>
    public const int ArrIdxFieldNumber = 5;
    private int arrIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArrIdx {
      get { return arrIdx_; }
      set {
        arrIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DebuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DebuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (Type != other.Type) return false;
      if (ArrIdx != other.ArrIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != global::shared.BuffStockType.NoneBf) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (Type != global::shared.DebuffType.NoneDbf) hash ^= Type.GetHashCode();
      if (ArrIdx != 0) hash ^= ArrIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ArrIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArrIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ArrIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArrIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ArrIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DebuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != global::shared.BuffStockType.NoneBf) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.Type != global::shared.DebuffType.NoneDbf) {
        Type = other.Type;
      }
      if (other.ArrIdx != 0) {
        ArrIdx = other.ArrIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            Type = (global::shared.DebuffType) input.ReadEnum();
            break;
          }
          case 40: {
            ArrIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            Type = (global::shared.DebuffType) input.ReadEnum();
            break;
          }
          case 40: {
            ArrIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuffConfig : pb::IMessage<BuffConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuffConfig> _parser = new pb::MessageParser<BuffConfig>(() => new BuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig(BuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      speedDelta_ = other.speedDelta_;
      hitboxSizeXDelta_ = other.hitboxSizeXDelta_;
      hitboxSizeYDelta_ = other.hitboxSizeYDelta_;
      damageDelta_ = other.damageDelta_;
      damageDeltaByPercentage_ = other.damageDeltaByPercentage_;
      characterHardnessDelta_ = other.characterHardnessDelta_;
      meleeHardnessDelta_ = other.meleeHardnessDelta_;
      fireballHardnessDelta_ = other.fireballHardnessDelta_;
      invinsible_ = other.invinsible_;
      xformChSpeciesId_ = other.xformChSpeciesId_;
      associatedDebuffs_ = other.associatedDebuffs_.Clone();
      characterVfxSpeciesId_ = other.characterVfxSpeciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig Clone() {
      return new BuffConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::shared.BuffStockType stockType_ = global::shared.BuffStockType.NoneBf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "speedDelta" field.</summary>
    public const int SpeedDeltaFieldNumber = 4;
    private int speedDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeedDelta {
      get { return speedDelta_; }
      set {
        speedDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeXDelta" field.</summary>
    public const int HitboxSizeXDeltaFieldNumber = 5;
    private int hitboxSizeXDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeXDelta {
      get { return hitboxSizeXDelta_; }
      set {
        hitboxSizeXDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeYDelta" field.</summary>
    public const int HitboxSizeYDeltaFieldNumber = 6;
    private int hitboxSizeYDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeYDelta {
      get { return hitboxSizeYDelta_; }
      set {
        hitboxSizeYDelta_ = value;
      }
    }

    /// <summary>Field number for the "damageDelta" field.</summary>
    public const int DamageDeltaFieldNumber = 7;
    private int damageDelta_;
    /// <summary>
    /// 
    ///It's not trivial to handle damage after the following sequence
    ///1. Pick up damageDelta=+10 for 600 frames
    ///2. Pick up damageDeltaByPercentage=+10% for 600 frames
    ///3. Buff "damageDelta=+10" expires 
    ///4. Buff "damageDeltaByPercentage=+10%" expires
    ///
    ///Pick a deterministic way :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageDelta {
      get { return damageDelta_; }
      set {
        damageDelta_ = value;
      }
    }

    /// <summary>Field number for the "damageDeltaByPercentage" field.</summary>
    public const int DamageDeltaByPercentageFieldNumber = 8;
    private int damageDeltaByPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageDeltaByPercentage {
      get { return damageDeltaByPercentage_; }
      set {
        damageDeltaByPercentage_ = value;
      }
    }

    /// <summary>Field number for the "characterHardnessDelta" field.</summary>
    public const int CharacterHardnessDeltaFieldNumber = 9;
    private int characterHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharacterHardnessDelta {
      get { return characterHardnessDelta_; }
      set {
        characterHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "meleeHardnessDelta" field.</summary>
    public const int MeleeHardnessDeltaFieldNumber = 10;
    private int meleeHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MeleeHardnessDelta {
      get { return meleeHardnessDelta_; }
      set {
        meleeHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "fireballHardnessDelta" field.</summary>
    public const int FireballHardnessDeltaFieldNumber = 11;
    private int fireballHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FireballHardnessDelta {
      get { return fireballHardnessDelta_; }
      set {
        fireballHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "invinsible" field.</summary>
    public const int InvinsibleFieldNumber = 12;
    private bool invinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Invinsible {
      get { return invinsible_; }
      set {
        invinsible_ = value;
      }
    }

    /// <summary>Field number for the "xformChSpeciesId" field.</summary>
    public const int XformChSpeciesIdFieldNumber = 13;
    private int xformChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int XformChSpeciesId {
      get { return xformChSpeciesId_; }
      set {
        xformChSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "associatedDebuffs" field.</summary>
    public const int AssociatedDebuffsFieldNumber = 1024;
    private static readonly pb::FieldCodec<global::shared.DebuffConfig> _repeated_associatedDebuffs_codec
        = pb::FieldCodec.ForMessage(8194, global::shared.DebuffConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.DebuffConfig> associatedDebuffs_ = new pbc::RepeatedField<global::shared.DebuffConfig>();
    /// <summary>
    /// There's a reason why type "DebuffConfig" instead of just the speciesId is used here, as "BuffConfig" itself is already seeked via heap-RAM dictionary look from "Buff.speciesId", we'd like to reduce the count of heap-RAM access when stepping battle dynamics  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.DebuffConfig> AssociatedDebuffs {
      get { return associatedDebuffs_; }
    }

    /// <summary>Field number for the "characterVfxSpeciesId" field.</summary>
    public const int CharacterVfxSpeciesIdFieldNumber = 2048;
    private int characterVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharacterVfxSpeciesId {
      get { return characterVfxSpeciesId_; }
      set {
        characterVfxSpeciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (SpeedDelta != other.SpeedDelta) return false;
      if (HitboxSizeXDelta != other.HitboxSizeXDelta) return false;
      if (HitboxSizeYDelta != other.HitboxSizeYDelta) return false;
      if (DamageDelta != other.DamageDelta) return false;
      if (DamageDeltaByPercentage != other.DamageDeltaByPercentage) return false;
      if (CharacterHardnessDelta != other.CharacterHardnessDelta) return false;
      if (MeleeHardnessDelta != other.MeleeHardnessDelta) return false;
      if (FireballHardnessDelta != other.FireballHardnessDelta) return false;
      if (Invinsible != other.Invinsible) return false;
      if (XformChSpeciesId != other.XformChSpeciesId) return false;
      if(!associatedDebuffs_.Equals(other.associatedDebuffs_)) return false;
      if (CharacterVfxSpeciesId != other.CharacterVfxSpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != global::shared.BuffStockType.NoneBf) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (SpeedDelta != 0) hash ^= SpeedDelta.GetHashCode();
      if (HitboxSizeXDelta != 0) hash ^= HitboxSizeXDelta.GetHashCode();
      if (HitboxSizeYDelta != 0) hash ^= HitboxSizeYDelta.GetHashCode();
      if (DamageDelta != 0) hash ^= DamageDelta.GetHashCode();
      if (DamageDeltaByPercentage != 0) hash ^= DamageDeltaByPercentage.GetHashCode();
      if (CharacterHardnessDelta != 0) hash ^= CharacterHardnessDelta.GetHashCode();
      if (MeleeHardnessDelta != 0) hash ^= MeleeHardnessDelta.GetHashCode();
      if (FireballHardnessDelta != 0) hash ^= FireballHardnessDelta.GetHashCode();
      if (Invinsible != false) hash ^= Invinsible.GetHashCode();
      if (XformChSpeciesId != 0) hash ^= XformChSpeciesId.GetHashCode();
      hash ^= associatedDebuffs_.GetHashCode();
      if (CharacterVfxSpeciesId != 0) hash ^= CharacterVfxSpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (SpeedDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        output.WriteRawTag(96);
        output.WriteBool(Invinsible);
      }
      if (XformChSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(XformChSpeciesId);
      }
      associatedDebuffs_.WriteTo(output, _repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        output.WriteRawTag(128, 128, 1);
        output.WriteInt32(CharacterVfxSpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (SpeedDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        output.WriteRawTag(96);
        output.WriteBool(Invinsible);
      }
      if (XformChSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(XformChSpeciesId);
      }
      associatedDebuffs_.WriteTo(ref output, _repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        output.WriteRawTag(128, 128, 1);
        output.WriteInt32(CharacterVfxSpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (SpeedDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        size += 1 + 1;
      }
      if (XformChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(XformChSpeciesId);
      }
      size += associatedDebuffs_.CalculateSize(_repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(CharacterVfxSpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != global::shared.BuffStockType.NoneBf) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.SpeedDelta != 0) {
        SpeedDelta = other.SpeedDelta;
      }
      if (other.HitboxSizeXDelta != 0) {
        HitboxSizeXDelta = other.HitboxSizeXDelta;
      }
      if (other.HitboxSizeYDelta != 0) {
        HitboxSizeYDelta = other.HitboxSizeYDelta;
      }
      if (other.DamageDelta != 0) {
        DamageDelta = other.DamageDelta;
      }
      if (other.DamageDeltaByPercentage != 0) {
        DamageDeltaByPercentage = other.DamageDeltaByPercentage;
      }
      if (other.CharacterHardnessDelta != 0) {
        CharacterHardnessDelta = other.CharacterHardnessDelta;
      }
      if (other.MeleeHardnessDelta != 0) {
        MeleeHardnessDelta = other.MeleeHardnessDelta;
      }
      if (other.FireballHardnessDelta != 0) {
        FireballHardnessDelta = other.FireballHardnessDelta;
      }
      if (other.Invinsible != false) {
        Invinsible = other.Invinsible;
      }
      if (other.XformChSpeciesId != 0) {
        XformChSpeciesId = other.XformChSpeciesId;
      }
      associatedDebuffs_.Add(other.associatedDebuffs_);
      if (other.CharacterVfxSpeciesId != 0) {
        CharacterVfxSpeciesId = other.CharacterVfxSpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            SpeedDelta = input.ReadInt32();
            break;
          }
          case 40: {
            HitboxSizeXDelta = input.ReadInt32();
            break;
          }
          case 48: {
            HitboxSizeYDelta = input.ReadInt32();
            break;
          }
          case 56: {
            DamageDelta = input.ReadInt32();
            break;
          }
          case 64: {
            DamageDeltaByPercentage = input.ReadInt32();
            break;
          }
          case 72: {
            CharacterHardnessDelta = input.ReadInt32();
            break;
          }
          case 80: {
            MeleeHardnessDelta = input.ReadInt32();
            break;
          }
          case 88: {
            FireballHardnessDelta = input.ReadInt32();
            break;
          }
          case 96: {
            Invinsible = input.ReadBool();
            break;
          }
          case 104: {
            XformChSpeciesId = input.ReadInt32();
            break;
          }
          case 8194: {
            associatedDebuffs_.AddEntriesFrom(input, _repeated_associatedDebuffs_codec);
            break;
          }
          case 16384: {
            CharacterVfxSpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            SpeedDelta = input.ReadInt32();
            break;
          }
          case 40: {
            HitboxSizeXDelta = input.ReadInt32();
            break;
          }
          case 48: {
            HitboxSizeYDelta = input.ReadInt32();
            break;
          }
          case 56: {
            DamageDelta = input.ReadInt32();
            break;
          }
          case 64: {
            DamageDeltaByPercentage = input.ReadInt32();
            break;
          }
          case 72: {
            CharacterHardnessDelta = input.ReadInt32();
            break;
          }
          case 80: {
            MeleeHardnessDelta = input.ReadInt32();
            break;
          }
          case 88: {
            FireballHardnessDelta = input.ReadInt32();
            break;
          }
          case 96: {
            Invinsible = input.ReadBool();
            break;
          }
          case 104: {
            XformChSpeciesId = input.ReadInt32();
            break;
          }
          case 8194: {
            associatedDebuffs_.AddEntriesFrom(ref input, _repeated_associatedDebuffs_codec);
            break;
          }
          case 16384: {
            CharacterVfxSpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Buff : pb::IMessage<Buff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Buff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff(Buff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      buffConfig_ = other.buffConfig_ != null ? other.buffConfig_.Clone() : null;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      origChSpeciesId_ = other.origChSpeciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff Clone() {
      return new Buff(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    /// <summary>
    /// A redundancy of "buffConfig" for easy termination detection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "buffConfig" field.</summary>
    public const int BuffConfigFieldNumber = 3;
    private global::shared.BuffConfig buffConfig_;
    /// <summary>
    /// Same type concern as "BuffConfig.associatedDebuffs". 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffConfig BuffConfig {
      get { return buffConfig_; }
      set {
        buffConfig_ = value;
      }
    }

    /// <summary>Field number for the "originatedRenderFrameId" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 4;
    private int originatedRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "origChSpeciesId" field.</summary>
    public const int OrigChSpeciesIdFieldNumber = 5;
    private int origChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrigChSpeciesId {
      get { return origChSpeciesId_; }
      set {
        origChSpeciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Buff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Buff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      if (!object.Equals(BuffConfig, other.BuffConfig)) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OrigChSpeciesId != other.OrigChSpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (buffConfig_ != null) hash ^= BuffConfig.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OrigChSpeciesId != 0) hash ^= OrigChSpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BuffConfig);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OrigChSpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BuffConfig);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OrigChSpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (buffConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuffConfig);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrigChSpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Buff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.buffConfig_ != null) {
        if (buffConfig_ == null) {
          BuffConfig = new global::shared.BuffConfig();
        }
        BuffConfig.MergeFrom(other.BuffConfig);
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OrigChSpeciesId != 0) {
        OrigChSpeciesId = other.OrigChSpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 26: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
          case 32: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            OrigChSpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 26: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
          case 32: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            OrigChSpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Debuff : pb::IMessage<Debuff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Debuff> _parser = new pb::MessageParser<Debuff>(() => new Debuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Debuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff(Debuff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      debuffConfig_ = other.debuffConfig_ != null ? other.debuffConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff Clone() {
      return new Debuff(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    /// <summary>
    /// A redundancy of "debuffConfig" for easy termination detection 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "debuffConfig" field.</summary>
    public const int DebuffConfigFieldNumber = 3;
    private global::shared.DebuffConfig debuffConfig_;
    /// <summary>
    /// Same type concern as "BuffConfig.associatedDebuffs". 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.DebuffConfig DebuffConfig {
      get { return debuffConfig_; }
      set {
        debuffConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Debuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Debuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      if (!object.Equals(DebuffConfig, other.DebuffConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (debuffConfig_ != null) hash ^= DebuffConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (debuffConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DebuffConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (debuffConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DebuffConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (debuffConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebuffConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Debuff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.debuffConfig_ != null) {
        if (debuffConfig_ == null) {
          DebuffConfig = new global::shared.DebuffConfig();
        }
        DebuffConfig.MergeFrom(other.DebuffConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 26: {
            if (debuffConfig_ == null) {
              DebuffConfig = new global::shared.DebuffConfig();
            }
            input.ReadMessage(DebuffConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 26: {
            if (debuffConfig_ == null) {
              DebuffConfig = new global::shared.DebuffConfig();
            }
            input.ReadMessage(DebuffConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InventorySlot : pb::IMessage<InventorySlot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InventorySlot> _parser = new pb::MessageParser<InventorySlot>(() => new InventorySlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InventorySlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot(InventorySlot other) : this() {
      stockType_ = other.stockType_;
      quota_ = other.quota_;
      framesToRecover_ = other.framesToRecover_;
      defaultQuota_ = other.defaultQuota_;
      defaultFramesToRecover_ = other.defaultFramesToRecover_;
      buffConfig_ = other.buffConfig_ != null ? other.buffConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot Clone() {
      return new InventorySlot(this);
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 1;
    private global::shared.InventorySlotStockType stockType_ = global::shared.InventorySlotStockType.NoneIv;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.InventorySlotStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private int quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 3;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "defaultQuota" field.</summary>
    public const int DefaultQuotaFieldNumber = 4;
    private int defaultQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultQuota {
      get { return defaultQuota_; }
      set {
        defaultQuota_ = value;
      }
    }

    /// <summary>Field number for the "defaultFramesToRecover" field.</summary>
    public const int DefaultFramesToRecoverFieldNumber = 5;
    private int defaultFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultFramesToRecover {
      get { return defaultFramesToRecover_; }
      set {
        defaultFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "buffConfig" field.</summary>
    public const int BuffConfigFieldNumber = 1024;
    private global::shared.BuffConfig buffConfig_;
    /// <summary>
    /// Same type concern as "BuffConfig.associatedDebuffs".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffConfig BuffConfig {
      get { return buffConfig_; }
      set {
        buffConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InventorySlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InventorySlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockType != other.StockType) return false;
      if (Quota != other.Quota) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (DefaultQuota != other.DefaultQuota) return false;
      if (DefaultFramesToRecover != other.DefaultFramesToRecover) return false;
      if (!object.Equals(BuffConfig, other.BuffConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StockType != global::shared.InventorySlotStockType.NoneIv) hash ^= StockType.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (DefaultQuota != 0) hash ^= DefaultQuota.GetHashCode();
      if (DefaultFramesToRecover != 0) hash ^= DefaultFramesToRecover.GetHashCode();
      if (buffConfig_ != null) hash ^= BuffConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DefaultFramesToRecover);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BuffConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DefaultFramesToRecover);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BuffConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultFramesToRecover);
      }
      if (buffConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InventorySlot other) {
      if (other == null) {
        return;
      }
      if (other.StockType != global::shared.InventorySlotStockType.NoneIv) {
        StockType = other.StockType;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.DefaultQuota != 0) {
        DefaultQuota = other.DefaultQuota;
      }
      if (other.DefaultFramesToRecover != 0) {
        DefaultFramesToRecover = other.DefaultFramesToRecover;
      }
      if (other.buffConfig_ != null) {
        if (buffConfig_ == null) {
          BuffConfig = new global::shared.BuffConfig();
        }
        BuffConfig.MergeFrom(other.BuffConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockType = (global::shared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultQuota = input.ReadInt32();
            break;
          }
          case 40: {
            DefaultFramesToRecover = input.ReadInt32();
            break;
          }
          case 8194: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockType = (global::shared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultQuota = input.ReadInt32();
            break;
          }
          case 40: {
            DefaultFramesToRecover = input.ReadInt32();
            break;
          }
          case 8194: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Inventory : pb::IMessage<Inventory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory(Inventory other) : this() {
      slots_ = other.slots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::shared.InventorySlot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(10, global::shared.InventorySlot.Parser);
    private readonly pbc::RepeatedField<global::shared.InventorySlot> slots_ = new pbc::RepeatedField<global::shared.InventorySlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InventorySlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slots_.Equals(other.slots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      slots_.WriteTo(output, _repeated_slots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      slots_.WriteTo(ref output, _repeated_slots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_repeated_slots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      slots_.Add(other.slots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            slots_.AddEntriesFrom(ref input, _repeated_slots_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
