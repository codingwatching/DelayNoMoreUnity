// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: room_downsync_frame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace shared {

  /// <summary>Holder for reflection information generated from room_downsync_frame.proto</summary>
  public static partial class RoomDownsyncFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for room_downsync_frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RoomDownsyncFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlyb29tX2Rvd25zeW5jX2ZyYW1lLnByb3RvEgZzaGFyZWQieAoKQXV0aFJl",
            "c3VsdBIPCgdyZXRDb2RlGAEgASgFEg0KBXVuYW1lGAIgASgJEg8KB2NhcHRj",
            "aGEYAyABKAkSEQoJZXhwaXJlc0F0GAQgASgDEhAKCHBsYXllcklkGAUgASgJ",
            "EhQKDG5ld0F1dGhUb2tlbhgGIAEoCSLnEAoRQ2hhcmFjdGVyRG93bnN5bmMS",
            "CgoCaWQYASABKAUSFAoMdmlydHVhbEdyaWRYGAIgASgFEhQKDHZpcnR1YWxH",
            "cmlkWRgDIAEoBRIMCgRkaXJYGAQgASgFEgwKBGRpclkYBSABKAUSDAoEdmVs",
            "WBgGIAEoBRIMCgR2ZWxZGAcgASgFEg0KBXNwZWVkGAggASgFEhEKCXNwZWNp",
            "ZXNJZBgJIAEoDRIRCglqb2luSW5kZXgYCiABKAUSFwoPZnJhbWVzVG9SZWNv",
            "dmVyGAsgASgFEh8KF2ZyYW1lc0NhcHR1cmVkQnlJbmVydGlhGAwgASgFEhsK",
            "E2NhcHR1cmVkQnlQYXRyb2xDdWUYDSABKAgSGQoRZnJhbWVzSW5QYXRyb2xD",
            "dWUYDiABKAUSEAoIYmVhdHNDbnQYDyABKA0SEQoJYmVhdGVuQ250GBAgASgN",
            "EgoKAmhwGBEgASgFEgoKAm1wGBIgASgFEhsKE2J0bkJIb2xkaW5nUmRmQ291",
            "bnQYEyABKAUSLgoOY2hhcmFjdGVyU3RhdGUYFiABKA4yFi5zaGFyZWQuQ2hh",
            "cmFjdGVyU3RhdGUSFwoPZnJhbWVzSW5DaFN0YXRlGBcgASgFEg0KBWluQWly",
            "GBggASgIEhUKDWp1bXBUcmlnZ2VyZWQYGSABKAgSDgoGb25XYWxsGBogASgI",
            "EhMKC29uV2FsbE5vcm1YGBsgASgFEhMKC29uV2FsbE5vcm1ZGBwgASgFEhMK",
            "C29taXRHcmF2aXR5GB0gASgIEhgKEG9taXRTb2Z0UHVzaGJhY2sYHiABKAgS",
            "GgoSd2FpdmluZ1BhdHJvbEN1ZUlkGB8gASgFEiIKCWdvYWxBc05wYxggIAEo",
            "DjIPLnNoYXJlZC5OcGNHb2FsEhsKE3Jldml2YWxWaXJ0dWFsR3JpZFgYISAB",
            "KAUSGwoTcmV2aXZhbFZpcnR1YWxHcmlkWRgiIAEoBRITCgtyZXZpdmFsRGly",
            "WBgjIAEoBRITCgtyZXZpdmFsRGlyWRgkIAEoBRIPCgdvblNsb3BlGCUgASgI",
            "EhQKDGZyaWN0aW9uVmVsWBgmIAEoBRIXCg9mb3JjZWRDcm91Y2hpbmcYJyAB",
            "KAgSGQoRc2xpcEp1bXBUcmlnZ2VyZWQYKCABKAgSKAogcHJpbWFyaWx5T25T",
            "bGlwcGFibGVIYXJkUHVzaGJhY2sYKSABKAgSGAoQcHJldldhc0Nyb3VjaGlu",
            "ZxgqIAEoCBIQCghuZXdCaXJ0aBgrIAEoCBIYChBmcmFtZXNJbnZpbnNpYmxl",
            "GCwgASgFEhMKC2p1bXBTdGFydGVkGC0gASgIEhkKEWZyYW1lc1RvU3RhcnRK",
            "dW1wGC4gASgFEhkKEXJlcGVsU29mdFB1c2hiYWNrGC8gASgIEiMKG3B1Ymxp",
            "c2hpbmdFdnRNYXNrVXBvbktpbGxlZBgwIAEoBBIsCiRwdWJsaXNoaW5nVG9U",
            "cmlnZ2VyTG9jYWxJZFVwb25LaWxsZWQYMSABKAUSIgoac3Vic2NyaWJlc1Rv",
            "VHJpZ2dlckxvY2FsSWQYMiABKAUSGQoRanVtcEhvbGRpbmdSZGZDbnQYMyAB",
            "KAUSHQoVcmVtYWluaW5nQWlySnVtcFF1b3RhGDQgASgNEh0KFXJlbWFpbmlu",
            "Z0FpckRhc2hRdW90YRg1IAEoDRInCh9raWxsZWRUb0Ryb3BDb25zdW1hYmxl",
            "U3BlY2llc0lkGDYgASgNEiEKGWtpbGxlZFRvRHJvcEJ1ZmZTcGVjaWVzSWQY",
            "NyABKA0SIQoZa2lsbGVkVG9Ecm9wUGlja3VwU2tpbGxJZBg4IAEoDRIUCgxm",
            "cmljdGlvblZlbFkYOSABKAUSHgoWZnJhbWVzU2luY2VMYXN0RGFtYWdlZBg6",
            "IAEoBRIaChJyZW1haW5pbmdEZWYxUXVvdGEYOyABKA0SEwoLY29tYm9IaXRD",
            "bnQYPCABKA0SGwoTY29tYm9GcmFtZXNSZW1haW5lZBg9IAEoBRIcChRkYW1h",
            "Z2VFbGVtZW50YWxBdHRycxg+IAEoDRIZChFvblNsb3BlRmFjaW5nRG93bhg/",
            "IAEoCBIeChZsYXN0RGFtYWdlZEJ5Sm9pbkluZGV4GEAgASgFEiEKGWxhc3RE",
            "YW1hZ2VkQnlCdWxsZXRUZWFtSWQYQSABKAUSFgoOYWN0aXZhdGVkUmRmSWQY",
            "QiABKAUSFAoMY2FjaGVkQ3VlQ21kGEMgASgEEhUKDWFjdGl2ZVNraWxsSWQY",
            "RCABKA0SFgoOYWN0aXZlU2tpbGxIaXQYRSABKAUSFAoMYnVsbGV0VGVhbUlk",
            "GEYgASgFEhkKEWNoQ29sbGlzaW9uVGVhbUlkGEcgASgFEhsKE2J0bkNIb2xk",
            "aW5nUmRmQ291bnQYSCABKAUSGwoTYnRuREhvbGRpbmdSZGZDb3VudBhJIAEo",
            "BRIbChNidG5FSG9sZGluZ1JkZkNvdW50GEogASgFEhsKE3BhcnJ5UHJlcFJk",
            "ZkNudERvd24YSyABKAUSGwoTbXBSZWdlblJkZkNvdW50ZG93bhhMIAEoBRIa",
            "ChJmbHlpbmdSZGZDb3VudGRvd24YTSABKAUSGgoSbG9ja2luZ09uSm9pbklu",
            "ZGV4GE4gASgFEh4KCGJ1ZmZMaXN0GFogAygLMgwuc2hhcmVkLkJ1ZmYSIgoK",
            "ZGVidWZmTGlzdBhbIAMoCzIOLnNoYXJlZC5EZWJ1ZmYSJAoJaW52ZW50b3J5",
            "GFwgASgLMhEuc2hhcmVkLkludmVudG9yeRI3ChNidWxsZXRJbW11bmVSZWNv",
            "cmRzGF0gAygLMhouc2hhcmVkLkJ1bGxldEltbXVuZVJlY29yZBIWCg5raW5l",
            "bWF0aWNLbm9icxheIAMoAiKKAQoRSW5wdXRGcmFtZURlY29kZWQSCgoCZHgY",
            "ASABKAUSCgoCZHkYAiABKAUSEQoJYnRuQUxldmVsGAMgASgFEhEKCWJ0bkJM",
            "ZXZlbBgEIAEoBRIRCglidG5DTGV2ZWwYBSABKAUSEQoJYnRuRExldmVsGAYg",
            "ASgFEhEKCWJ0bkVMZXZlbBgHIAEoBSJMChBJbnB1dEZyYW1lVXBzeW5jEhQK",
            "DGlucHV0RnJhbWVJZBgBIAEoBRIPCgdlbmNvZGVkGAIgASgEEhEKCWpvaW5J",
            "bmRleBgDIAEoBSJuChJJbnB1dEZyYW1lRG93bnN5bmMSFAoMaW5wdXRGcmFt",
            "ZUlkGAEgASgFEhEKCWlucHV0TGlzdBgCIAMoBBIVCg1jb25maXJtZWRMaXN0",
            "GAMgASgEEhgKEHVkcENvbmZpcm1lZExpc3QYBCABKAQiywYKBVdzUmVxEhAK",
            "CHBsYXllcklkGAEgASgJEgsKA2FjdBgCIAEoBRIRCglqb2luSW5kZXgYAyAB",
            "KAUSFQoNYWNraW5nRnJhbWVJZBgEIAEoBRIaChJhY2tpbmdJbnB1dEZyYW1l",
            "SWQYBSABKAUSDwoHYXV0aEtleRgGIAEoBRI3ChVpbnB1dEZyYW1lVXBzeW5j",
            "QmF0Y2gYByADKAsyGC5zaGFyZWQuSW5wdXRGcmFtZVVwc3luYxIwCg1zZWxm",
            "UGFyc2VkUmRmGAggASgLMhkuc2hhcmVkLlJvb21Eb3duc3luY0ZyYW1lEh8K",
            "F2NvbGxpc2lvblNwYWNlSGFsZldpZHRoGAkgASgFEiAKGGNvbGxpc2lvblNw",
            "YWNlSGFsZkhlaWdodBgKIAEoBRIdChViYXR0bGVEdXJhdGlvblNlY29uZHMY",
            "CyABKAUSRAoZc2VyaWFsaXplZEJhcnJpZXJQb2x5Z29ucxgMIAMoCzIhLnNo",
            "YXJlZC5TZXJpYWxpemFibGVDb252ZXhQb2x5Z29uElcKGnNlcmlhbGl6ZWRT",
            "dGF0aWNQYXRyb2xDdWVzGA0gAygLMjMuc2hhcmVkLlNlcmlhbGl6ZWRDb21w",
            "bGV0ZWx5U3RhdGljUGF0cm9sQ3VlQ29sbGlkZXISVwofc2VyaWFsaXplZENv",
            "bXBsZXRlbHlTdGF0aWNUcmFwcxgOIAMoCzIuLnNoYXJlZC5TZXJpYWxpemVk",
            "Q29tcGxldGVseVN0YXRpY1RyYXBDb2xsaWRlchJTChhzZXJpYWxpemVkU3Rh",
            "dGljVHJpZ2dlcnMYDyADKAsyMS5zaGFyZWQuU2VyaWFsaXplZENvbXBsZXRl",
            "bHlTdGF0aWNUcmlnZ2VyQ29sbGlkZXISWgokc2VyaWFsaXplZFRyYXBMb2Nh",
            "bElkVG9Db2xsaWRlckF0dHJzGBAgASgLMiwuc2hhcmVkLlNlcmlhbGl6ZWRU",
            "cmFwTG9jYWxJZFRvQ29sbGlkZXJBdHRycxJWCiJzZXJpYWxpemVkVHJpZ2dl",
            "ckVkaXRvcklkVG9Mb2NhbElkGBIgASgLMiouc2hhcmVkLlNlcmlhbGl6ZWRU",
            "cmlnZ2VyRWRpdG9ySWRUb0xvY2FsSWQiuQEKE0lucHV0QnVmZmVyU25hcHNo",
            "b3QSGAoQcmVmUmVuZGVyRnJhbWVJZBgBIAEoBRIXCg91bmNvbmZpcm1lZE1h",
            "c2sYAiABKAQSPQoZdG9TZW5kSW5wdXRGcmFtZURvd25zeW5jcxgDIAMoCzIa",
            "LnNoYXJlZC5JbnB1dEZyYW1lRG93bnN5bmMSGQoRc2hvdWxkRm9yY2VSZXN5",
            "bmMYBCABKAgSFQoNcGVlckpvaW5JbmRleBgFIAEoBSLTAQoJUGF0cm9sQ3Vl",
            "EgoKAmlkGAEgASgFEg0KBWZsQWN0GAIgASgEEg0KBWZyQWN0GAMgASgEEhcK",
            "D2ZsQ2FwdHVyZUZyYW1lcxgEIAEoBRIXCg9mckNhcHR1cmVGcmFtZXMYBSAB",
            "KAUSDQoFZmRBY3QYBiABKAQSDQoFZnVBY3QYByABKAQSFwoPZmRDYXB0dXJl",
            "RnJhbWVzGAggASgFEhcKD2Z1Q2FwdHVyZUZyYW1lcxgJIAEoBRIaChFjb2xs",
            "aXNpb25UeXBlTWFzaxiFCCABKAQi1wEKCVZmeENvbmZpZxIRCglzcGVjaWVz",
            "SWQYASABKAUSKQoKbW90aW9uVHlwZRgCIAEoDjIVLnNoYXJlZC5WZnhNb3Rp",
            "b25UeXBlEi0KDGR1cmF0aW9uVHlwZRgDIAEoDjIXLnNoYXJlZC5WZnhEdXJh",
            "dGlvblR5cGUSEwoLb25DaGFyYWN0ZXIYBCABKAgSEAoIb25CdWxsZXQYBSAB",
            "KAgSDgoGb25UcmFwGAYgASgIEhcKD3VzZVBpeGVsYXRlZFZlchgHIAEoCBIN",
            "CgRuYW1lGIAIIAEoCSLBGAoMQnVsbGV0Q29uZmlnEhUKDXN0YXJ0dXBGcmFt",
            "ZXMYASABKAUSGgoSY2FuY2VsbGFibGVTdEZyYW1lGAIgASgFEhoKEmNhbmNl",
            "bGxhYmxlRWRGcmFtZRgDIAEoBRIUCgxhY3RpdmVGcmFtZXMYBCABKAUSFQoN",
            "aGl0U3R1bkZyYW1lcxgFIAEoBRIXCg9ibG9ja1N0dW5GcmFtZXMYBiABKAUS",
            "FAoMcHVzaGJhY2tWZWxYGAcgASgFEhQKDHB1c2hiYWNrVmVsWRgIIAEoBRIO",
            "CgZkYW1hZ2UYCSABKAUSFAoMc2VsZkxvY2tWZWxYGAogASgFEhQKDHNlbGZM",
            "b2NrVmVsWRgLIAEoBRIVCg1oaXRib3hPZmZzZXRYGAwgASgFEhUKDWhpdGJv",
            "eE9mZnNldFkYDSABKAUSEwoLaGl0Ym94U2l6ZVgYDiABKAUSEwoLaGl0Ym94",
            "U2l6ZVkYDyABKAUSDgoGYmxvd1VwGBAgASgIEhEKCXNwZWNpZXNJZBgRIAEo",
            "BRIXCg9leHBsb3Npb25GcmFtZXMYEiABKAUSIQoFYlR5cGUYEyABKA4yEi5z",
            "aGFyZWQuQnVsbGV0VHlwZRIkCgZtaFR5cGUYFCABKA4yFC5zaGFyZWQuTXVs",
            "dGlIaXRUeXBlEh8KF3NpbXVsdGFuZW91c011bHRpSGl0Q250GBUgASgNEg0K",
            "BXNwZWVkGBYgASgFEgwKBGRpclgYFyABKAUSDAoEZGlyWRgYIAEoBRI+Cg1j",
            "YW5jZWxUcmFuc2l0GBkgAygLMicuc2hhcmVkLkJ1bGxldENvbmZpZy5DYW5j",
            "ZWxUcmFuc2l0RW50cnkSEwoLcmVwZWF0UXVvdGEYGiABKAUSGgoSYWN0aXZl",
            "VmZ4U3BlY2llc0lkGBsgASgFEh0KFWV4cGxvc2lvblZmeFNwZWNpZXNJZBgc",
            "IAEoBRIVCg1hbGxvd3NXYWxraW5nGB0gASgIEhcKD2FsbG93c0Nyb3VjaGlu",
            "ZxgeIAEoCBIQCghoYXJkbmVzcxgfIAEoBRIfChdzdGFydHVwSW52aW5zaWJs",
            "ZUZyYW1lcxggIAEoBRIbChNoaXRJbnZpbnNpYmxlRnJhbWVzGCEgASgFEhoK",
            "EmV4cGxvc2lvblNwZWNpZXNJZBgiIAEoBRISCgpwZXJwQWNjTWFnGCMgASgF",
            "EhwKFGRlbGF5U2VsZlZlbFRvQWN0aXZlGCQgASgIEhUKDXNwZWVkSWZOb3RI",
            "aXQYJSABKAUSGAoQb21pdFNvZnRQdXNoYmFjaxgmIAEoCBIWCg5oaXRib3hT",
            "aXplSW5jWBgnIAEoBRIWCg5oaXRib3hTaXplSW5jWRgoIAEoBRIWCg5yZW1h",
            "aW5zVXBvbkhpdBgpIAEoCBIcChRyb3RhdGVzQWxvbmdWZWxvY2l0eRgqIAEo",
            "CBImCh5kZWZhdWx0SGFyZFB1c2hiYWNrQm91bmNlUXVvdGEYKyABKAUSJAoc",
            "aGFyZFB1c2hiYWNrQm91bmNlTm9ybUZhY3RvchgsIAEoAhIlCh1oYXJkUHVz",
            "aGJhY2tCb3VuY2VTaGVlckZhY3RvchgtIAEoAhIcChRpc1BpeGVsYXRlZEFj",
            "dGl2ZVZmeBguIAEoCBIgChhpc1BpeGVsYXRlZEV4cGxvc3Rpb25WZngYLyAB",
            "KAgSGgoSbWhWYW5pc2hPbk1lbGVlSGl0GDAgASgIEhsKE2Rvd25TbG9wZVBy",
            "aW1lclZlbFkYMSABKAUSGgoSbWhVcGRhdGVzT3JpZ2luUG9zGDIgASgIEhUK",
            "DWJlYW1Db2xsaXNpb24YMyABKAgSGgoSYW5ndWxhckZyYW1lVmVsQ29zGDQg",
            "ASgCEhoKEmFuZ3VsYXJGcmFtZVZlbFNpbhg1IAEoAhIVCg12aXNpb25PZmZz",
            "ZXRYGDYgASgFEhUKDXZpc2lvbk9mZnNldFkYNyABKAUSEwoLdmlzaW9uU2l6",
            "ZVgYOCABKAUSEwoLdmlzaW9uU2l6ZVkYOSABKAUSHgoWc2VsZkxvY2tWZWxZ",
            "V2hlbkZseWluZxg6IAEoBRIWCg5lbGVtZW50YWxBdHRycxg7IAEoDRIjChtj",
            "YW5jZWxsYWJsZUJ5SW52ZW50b3J5U2xvdEMYPCABKAgSIwobY2FuY2VsbGFi",
            "bGVCeUludmVudG9yeVNsb3REGD0gASgIEhMKC3NwaW5BbmNob3JYGD4gASgC",
            "EhMKC3NwaW5BbmNob3JZGD8gASgCEhcKD2JlYW1WaXN1YWxTaXplWRhAIAEo",
            "BRIjCht0b3VjaEV4cGxvc2lvbkJvbWJDb2xsaXNpb24YQSABKAgSGwoTYWly",
            "UmlkaW5nR3JvdW5kV2F2ZRhCIAEoCBIiChpncm91bmRJbXBhY3RNZWxlZUNv",
            "bGxpc2lvbhhDIAEoCBIgChh3YWxsSW1wYWN0TWVsZWVDb2xsaXNpb24YRCAB",
            "KAgSFgoObWhJbmhlcml0c1NwaW4YRSABKAgSEwoLaW5pdFNwaW5Db3MYRiAB",
            "KAISEwoLaW5pdFNwaW5TaW4YRyABKAISFwoPZmluaXNoaW5nRnJhbWVzGEgg",
            "ASgFEiEKGW5vRXhwbG9zaW9uT25IYXJkUHVzaGJhY2sYSSABKAgSGwoTc3Rh",
            "cnR1cFZmeFNwZWNpZXNJZBhKIAEoBRIdCgNpZmMYSyABKA4yEC5zaGFyZWQu",
            "SWZhY2VDYXQSIwobcmVmbGVjdEZpcmViYWxsWElmTm90SGFyZGVyGEwgASgI",
            "EioKInJlamVjdHNSZWZsZWN0aW9uRnJvbUFub3RoZXJCdWxsZXQYTSABKAgS",
            "HQoVcHJvdmlkZXNYSGFyZFB1c2hiYWNrGE4gASgIEiAKGHByb3ZpZGVzWUhh",
            "cmRQdXNoYmFja1RvcBhPIAEoCBIjChtwcm92aWRlc1lIYXJkUHVzaGJhY2tC",
            "b3R0b20YUCABKAgSHwoXaWdub3JlU2xvcGVEZWNlbGVyYXRpb24YUSABKAgS",
            "HgoWcm90YXRlT2ZmZW5kZXJXaXRoU3BpbhhSIAEoCBIbChNtaE5vdFRyaWdn",
            "ZXJPbkNoSGl0GFMgASgIEiUKHW1oTm90VHJpZ2dlck9uSGFyZGVyQnVsbGV0",
            "SGl0GFQgASgIEiUKHW1oTm90VHJpZ2dlck9uSGFyZFB1c2hiYWNrSGl0GFUg",
            "ASgIEhUKDWhvcHBlck1pc3NpbGUYViABKAgSFQoNYmVhbVJlbmRlcmluZxhX",
            "IAEoCBInCh9taXNzaWxlU2VhcmNoSW50ZXJ2YWxQb3cyTWludXMxGFggASgN",
            "EikKIXVzZUNoT2Zmc2V0UmVnYXJkbGVzc09mRW1pc3Npb25NaBhZIAEoCBIn",
            "Ch9pbnBsYWNlVmFuaXNoRXhwbG9zaW9uU3BlY2llc0lkGFogASgFEhwKFGFu",
            "aW1Mb29waW5nUmRmT2Zmc2V0GFsgASgFEiUKHWV4cGxvc2lvbkFuaW1Mb29w",
            "aW5nUmRmT2Zmc2V0GFwgASgFEh4KFmdhdWdlSW5jUmVkdWN0aW9uUmF0aW8Y",
            "XSABKAISIQoZbWhJbmhlcml0c0ZyYW1lc0luQmxTdGF0ZRheIAEoCBIfChdn",
            "dWFyZEJyZWFrZXJFeHRyYUhpdENudBhfIAEoDRIfChd0YWtlc0RlZjFBc0hh",
            "cmRQdXNoYmFjaxhgIAEoCBIaChFjb2xsaXNpb25UeXBlTWFzaxiFCCABKAQS",
            "FQoMdGFrZXNHcmF2aXR5GIYIIAEoCBInCgpidWZmQ29uZmlnGIcIIAEoCzIS",
            "LnNoYXJlZC5CdWZmQ29uZmlnEh0KFGNoYXJhY3RlckVtaXRTZnhOYW1lGIAQ",
            "IAEoCRIcChNmaXJlYmFsbEVtaXRTZnhOYW1lGIEQIAEoCRIZChBleHBsb3Np",
            "b25TZnhOYW1lGIIQIAEoCRIWCg1hY3RpdmVTZnhOYW1lGIMQIAEoCRIgChdl",
            "eHBsb3Npb25PbkZsZXNoU2Z4TmFtZRiEECABKAkSHwoWZXhwbG9zaW9uT25S",
            "b2NrU2Z4TmFtZRiFECABKAkSIAoXZXhwbG9zaW9uT25NZXRhbFNmeE5hbWUY",
            "hhAgASgJEh8KFmV4cGxvc2lvbk9uV29vZFNmeE5hbWUYhxAgASgJGjQKEkNh",
            "bmNlbFRyYW5zaXRFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKA06",
            "AjgBIoMFCgZCdWxsZXQSJAoHYmxTdGF0ZRgBIAEoDjITLnNoYXJlZC5CdWxs",
            "ZXRTdGF0ZRIXCg9mcmFtZXNJbkJsU3RhdGUYAiABKAUSFQoNYnVsbGV0TG9j",
            "YWxJZBgDIAEoBRIfChdvcmlnaW5hdGVkUmVuZGVyRnJhbWVJZBgEIAEoBRIZ",
            "ChFvZmZlbmRlckpvaW5JbmRleBgFIAEoBRIbChNvZmZlbmRlclRyYXBMb2Nh",
            "bElkGAYgASgFEg4KBnRlYW1JZBgHIAEoBRInCh92ZXJ0TW92aW5nVHJhcExv",
            "Y2FsSWRVcG9uQWN0aXZlGAggASgFEhcKD3JlcGVhdFF1b3RhTGVmdBgJIAEo",
            "BRIoCiByZW1haW5pbmdIYXJkUHVzaGJhY2tCb3VuY2VRdW90YRgKIAEoBRIg",
            "Chh0YXJnZXRDaGFyYWN0ZXJKb2luSW5kZXgYCyABKAUSFAoMZGFtYWdlRGVh",
            "bGVkGAwgASgFEicKDWV4cGxvZGVkT25JZmMYDSABKA4yEC5zaGFyZWQuSWZh",
            "Y2VDYXQSFAoMdmlydHVhbEdyaWRYGA4gASgFEhQKDHZpcnR1YWxHcmlkWRgP",
            "IAEoBRIMCgRkaXJYGBAgASgFEgwKBGRpclkYESABKAUSDAoEdmVsWBgSIAEo",
            "BRIMCgR2ZWxZGBMgASgFEh4KFm9yaWdpbmF0ZWRWaXJ0dWFsR3JpZFgYFCAB",
            "KAUSHgoWb3JpZ2luYXRlZFZpcnR1YWxHcmlkWRgVIAEoBRIPCgdzcGluQ29z",
            "GBYgASgCEg8KB3NwaW5TaW4YFyABKAISFgoOYWN0aXZlU2tpbGxIaXQYGCAB",
            "KAUSDwoHc2tpbGxJZBgZIAEoDSKeBQoKVHJhcENvbmZpZxIRCglzcGVjaWVz",
            "SWQYASABKAUSGgoSZXhwbG9zaW9uU3BlY2llc0lkGAIgASgFEhcKD2V4cGxv",
            "c2lvbkZyYW1lcxgDIAEoBRIOCgZibG93VXAYBCABKAgSDgoGZGFtYWdlGAUg",
            "ASgFEhUKDWhpdFN0dW5GcmFtZXMYBiABKAUSGwoTaGl0SW52aW5zaWJsZUZy",
            "YW1lcxgHIAEoBRIVCg1kZWFjdGl2YXRhYmxlGAggASgIEhAKCGhhcmRuZXNz",
            "GAkgASgFEh8KF2RlYWN0aXZhdGVVcG9uVHJpZ2dlcmVkGAogASgIEhwKFGNv",
            "bnN0RnJpY3Rpb25WZWxYVG9wGAsgASgFEh8KF2NvbnN0RnJpY3Rpb25WZWxY",
            "Qm90dG9tGAwgASgFEh0KFWNvbnN0RnJpY3Rpb25WZWxZTGVmdBgNIAEoBRIe",
            "ChZjb25zdEZyaWN0aW9uVmVsWVJpZ2h0GA4gASgFEiQKHHBhdHJvbEN1ZVJl",
            "cXVpcmVzRnVsbENvbnRhaW4YDyABKAgSEwoLc3BpbkFuY2hvclgYECABKAIS",
            "EwoLc3BpbkFuY2hvclkYESABKAISGgoSYW5ndWxhckZyYW1lVmVsQ29zGBIg",
            "ASgCEhoKEmFuZ3VsYXJGcmFtZVZlbFNpbhgTIAEoAhIYChBpbnRyaW5zaWNT",
            "cGluQ29zGBQgASgCEhgKEGludHJpbnNpY1NwaW5TaW4YFSABKAISGQoRYXRr",
            "MVVwb25UcmlnZ2VyZWQYFiABKAgSEwoLYXRrMVNraWxsSWQYFyABKA0SEAoI",
            "aXNSb3RhcnkYGCABKAgSGAoQbm9YRmxpcFJlbmRlcmluZxgZIAEoCBIUCgtz",
            "cGVjaWVzTmFtZRiACCABKAki9QEKE1RyYXBDb25maWdGcm9tVGlsZWQSEQoJ",
            "c3BlY2llc0lkGAEgASgFEg0KBXF1b3RhGAIgASgFEg0KBXNwZWVkGAMgASgF",
            "EgwKBGRpclgYBCABKAUSDAoEZGlyWRgFIAEoBRIWCg5zdWJzY3JpYmVzVG9J",
            "ZBgHIAEoBRImCh5zdWJzY3JpYmVzVG9JZEFmdGVySW5pdGlhbEZpcmUYCCAB",
            "KAUSGQoRc3Vic2NyaWJlc1RvSWRBbHQYCSABKAUSDQoFYm94Q3cYCiABKAIS",
            "DQoFYm94Q2gYCyABKAISGAoQaW5pdE5vQW5ndWxhclZlbBgMIAEoCCLDAwoQ",
            "VHJhcENvbGxpZGVyQXR0chIVCg1oaXRib3hPZmZzZXRYGAEgASgFEhUKDWhp",
            "dGJveE9mZnNldFkYAiABKAUSEwoLaGl0Ym94U2l6ZVgYAyABKAUSEwoLaGl0",
            "Ym94U2l6ZVkYBCABKAUSHAoUcHJvdmlkZXNIYXJkUHVzaGJhY2sYBSABKAgS",
            "FgoOcHJvdmlkZXNEYW1hZ2UYBiABKAgSFgoOcHJvdmlkZXNFc2NhcGUYByAB",
            "KAgSGAoQcHJvdmlkZXNTbGlwSnVtcBgIIAEoCBIdChVwcm9oaWJpdHNXYWxs",
            "R3JhYmJpbmcYCSABKAgSFwoPZm9yY2VzQ3JvdWNoaW5nGAogASgIEhEKCXNw",
            "ZWNpZXNJZBgLIAEoBRIdChVvbmx5QWxsb3dzQWxpZ25lZFZlbFgYDCABKAUS",
            "HQoVb25seUFsbG93c0FsaWduZWRWZWxZGA0gASgFEhMKC2FzUGF0cm9sQ3Vl",
            "GA4gASgIEh8KBHRjUGMYDyABKAsyES5zaGFyZWQuUGF0cm9sQ3VlEhQKC3Ry",
            "YXBMb2NhbElkGIAIIAEoBRIaChFjb2xsaXNpb25UeXBlTWFzaxiFCCABKAQi",
            "0gQKBFRyYXASEwoLdHJhcExvY2FsSWQYASABKAUSIwobcGF0cm9sQ3VlQW5n",
            "dWxhclZlbEZsaXBNYXJrGAIgASgFEjQKD2NvbmZpZ0Zyb21UaWxlZBgDIAEo",
            "CzIbLnNoYXJlZC5UcmFwQ29uZmlnRnJvbVRpbGVkEiQKCXRyYXBTdGF0ZRgE",
            "IAEoDjIRLnNoYXJlZC5UcmFwU3RhdGUSGQoRZnJhbWVzSW5UcmFwU3RhdGUY",
            "BSABKAUSGgoSaXNDb21wbGV0ZWx5U3RhdGljGAYgASgIEhsKE2NhcHR1cmVk",
            "QnlQYXRyb2xDdWUYByABKAgSGQoRZnJhbWVzSW5QYXRyb2xDdWUYCCABKAUS",
            "GgoSd2FpdmluZ1BhdHJvbEN1ZUlkGAkgASgFEiAKGHdhaXZpbmdTcG9udGFu",
            "ZW91c1BhdHJvbBgKIAEoCBIiChpzdWJzY3JpYmVzVG9UcmlnZ2VyTG9jYWxJ",
            "ZBgLIAEoBRIlCh1zdWJzY3JpYmVzVG9UcmlnZ2VyTG9jYWxJZEFsdBgMIAEo",
            "BRIPCgdzcGluQ29zGA0gASgCEg8KB3NwaW5TaW4YDiABKAISGgoSYW5ndWxh",
            "ckZyYW1lVmVsQ29zGA8gASgCEhoKEmFuZ3VsYXJGcmFtZVZlbFNpbhgQIAEo",
            "AhIUCgx2aXJ0dWFsR3JpZFgYESABKAUSFAoMdmlydHVhbEdyaWRZGBIgASgF",
            "EgwKBGRpclgYEyABKAUSDAoEZGlyWRgUIAEoBRIMCgR2ZWxYGBUgASgFEgwK",
            "BHZlbFkYFiABKAUifAoNVHJpZ2dlckNvbmZpZxIRCglzcGVjaWVzSWQYASAB",
            "KAUSEwoLc3BlY2llc05hbWUYAiABKAkSKAoLdHJpZ2dlclR5cGUYAyABKA4y",
            "Ey5zaGFyZWQuVHJpZ2dlclR5cGUSGQoRY29sbGlzaW9uVHlwZU1hc2sYBCAB",
            "KAQiOAoLUGVlclVkcEFkZHISCgoCaXAYASABKAkSDAoEcG9ydBgCIAEoBRIP",
            "CgdhdXRoS2V5GAMgASgFIsUDChJCYXR0bGVDb2xsaWRlckluZm8SEQoJc3Rh",
            "Z2VOYW1lGAEgASgJEhMKC2JvdW5kUm9vbUlkGAIgASgFEhwKFGJhdHRsZUR1",
            "cmF0aW9uRnJhbWVzGAMgASgDEiYKHmlucHV0RnJhbWVVcHN5bmNEZWxheVRv",
            "bGVyYW5jZRgEIAEoBRInCh9tYXhDaGFzaW5nUmVuZGVyRnJhbWVzUGVyVXBk",
            "YXRlGAUgASgFEiEKGXJvbGxiYWNrRXN0aW1hdGVkRHRNaWxsaXMYBiABKAES",
            "IAoYcm9sbGJhY2tFc3RpbWF0ZWREdE5hbm9zGAcgASgDEhgKEHJlbmRlckJ1",
            "ZmZlclNpemUYCCABKAUSGAoQY29sbGlzaW9uTWluU3RlcBgJIAEoBRIZChFi",
            "b3VuZFJvb21DYXBhY2l0eRgKIAEoBRIbChNwcmVhbGxvY05wY0NhcGFjaXR5",
            "GAsgASgFEh4KFnByZWFsbG9jQnVsbGV0Q2FwYWNpdHkYDCABKAUSLQoPYmF0",
            "dGxlVWRwVHVubmVsGIAIIAEoCzITLnNoYXJlZC5QZWVyVWRwQWRkchIYCg9m",
            "cmFtZUxvZ0VuYWJsZWQYgQggASgIIu0DChFSb29tRG93bnN5bmNGcmFtZRIK",
            "CgJpZBgBIAEoBRItCgpwbGF5ZXJzQXJyGAIgAygLMhkuc2hhcmVkLkNoYXJh",
            "Y3RlckRvd25zeW5jEhYKDmNvdW50ZG93bk5hbm9zGAMgASgDEh8KB2J1bGxl",
            "dHMYBCADKAsyDi5zaGFyZWQuQnVsbGV0EioKB25wY3NBcnIYBSADKAsyGS5z",
            "aGFyZWQuQ2hhcmFjdGVyRG93bnN5bmMSHgoIdHJhcHNBcnIYBiADKAsyDC5z",
            "aGFyZWQuVHJhcBIkCgt0cmlnZ2Vyc0FychgHIAMoCzIPLnNoYXJlZC5Ucmln",
            "Z2VyEiMKCXBpY2thYmxlcxgKIAMoCzIQLnNoYXJlZC5QaWNrYWJsZRIfChZi",
            "YWNrZW5kVW5jb25maXJtZWRNYXNrGIAIIAEoBBIaChFzaG91bGRGb3JjZVJl",
            "c3luYxiBCCABKAgSFgoNc3BlY2llc0lkTGlzdBiCCCADKAUSHQoUYnVsbGV0",
            "TG9jYWxJZENvdW50ZXIYgwggASgFEhoKEW5wY0xvY2FsSWRDb3VudGVyGIQI",
            "IAEoBRIcChNwYXJ0aWNpcGFudENoYW5nZUlkGIUIIAEoBRIfChZwaWNrYWJs",
            "ZUxvY2FsSWRDb3VudGVyGIYIIAEoBSKLAgoGV3NSZXNwEgsKA3JldBgBIAEo",
            "BRILCgNhY3QYAiABKAUSJgoDcmRmGAMgASgLMhkuc2hhcmVkLlJvb21Eb3du",
            "c3luY0ZyYW1lEjsKF2lucHV0RnJhbWVEb3duc3luY0JhdGNoGAQgAygLMhou",
            "c2hhcmVkLklucHV0RnJhbWVEb3duc3luYxIsCghiY2lGcmFtZRgFIAEoCzIa",
            "LnNoYXJlZC5CYXR0bGVDb2xsaWRlckluZm8SFQoNcGVlckpvaW5JbmRleBgG",
            "IAEoBRIsCg9wZWVyVWRwQWRkckxpc3QYByADKAsyEy5zaGFyZWQuUGVlclVk",
            "cEFkZHISDwoGZXJyTXNnGIAQIAEoCSLzAgoFU2tpbGwSFQoNYmF0dGxlTG9j",
            "YWxJZBgBIAEoBRIWCg5yZWNvdmVyeUZyYW1lcxgCIAEoBRIdChVyZWNvdmVy",
            "eUZyYW1lc09uQmxvY2sYAyABKAUSGwoTcmVjb3ZlcnlGcmFtZXNPbkhpdBgE",
            "IAEoBRItCgt0cmlnZ2VyVHlwZRgFIAEoDjIYLnNoYXJlZC5Ta2lsbFRyaWdn",
            "ZXJUeXBlEiwKDGJvdW5kQ2hTdGF0ZRgGIAEoDjIWLnNoYXJlZC5DaGFyYWN0",
            "ZXJTdGF0ZRIxChFib3VuZENoU3RhdGVPbkhpdBgHIAEoDjIWLnNoYXJlZC5D",
            "aGFyYWN0ZXJTdGF0ZRIPCgdtcERlbHRhGAggASgFEgoKAmlkGAkgASgNEiMK",
            "BGhpdHMYgAggAygLMhQuc2hhcmVkLkJ1bGxldENvbmZpZxItChBzZWxmTm9u",
            "U3RvY2tCdWZmGIEIIAEoCzISLnNoYXJlZC5CdWZmQ29uZmlnImcKCEZyYW1l",
            "TG9nEiYKA3JkZhgBIAEoCzIZLnNoYXJlZC5Sb29tRG93bnN5bmNGcmFtZRIz",
            "Cg9hY3R1YWxseVVzZWRJZGYYAiABKAsyGi5zaGFyZWQuSW5wdXRGcmFtZURv",
            "d25zeW5jIkMKDEJhdHRsZVJlc3VsdBIXCg93aW5uZXJKb2luSW5kZXgYASAB",
            "KAUSGgoSd2lubmVyQnVsbGV0VGVhbUlkGAIgASgFIpcCCgxEZWJ1ZmZDb25m",
            "aWcSEQoJc3BlY2llc0lkGAEgASgNEigKCXN0b2NrVHlwZRgCIAEoDjIVLnNo",
            "YXJlZC5CdWZmU3RvY2tUeXBlEg0KBXN0b2NrGAMgASgFEiAKBHR5cGUYBCAB",
            "KA4yEi5zaGFyZWQuRGVidWZmVHlwZRIOCgZhcnJJZHgYBSABKAUSGQoRaW1w",
            "YWN0UGVySW50ZXJ2YWwYBiABKAUSFgoOaW1wYWN0SW50ZXJ2YWwYByABKAUS",
            "FAoMZnJpY3Rpb25WZWxYGAggASgFEhQKDGZyaWN0aW9uVmVsWRgJIAEoBRIU",
            "CgxmcmljdGlvbkFjY1gYCiABKAUSFAoMZnJpY3Rpb25BY2NZGAsgASgFIv4D",
            "CgpCdWZmQ29uZmlnEhEKCXNwZWNpZXNJZBgBIAEoDRIoCglzdG9ja1R5cGUY",
            "AiABKA4yFS5zaGFyZWQuQnVmZlN0b2NrVHlwZRINCgVzdG9jaxgDIAEoBRIS",
            "CgpzcGVlZERlbHRhGAQgASgFEhgKEGhpdGJveFNpemVYRGVsdGEYBSABKAUS",
            "GAoQaGl0Ym94U2l6ZVlEZWx0YRgGIAEoBRITCgtkYW1hZ2VEZWx0YRgHIAEo",
            "BRIfChdkYW1hZ2VEZWx0YUJ5UGVyY2VudGFnZRgIIAEoBRIeChZjaGFyYWN0",
            "ZXJIYXJkbmVzc0RlbHRhGAkgASgFEhoKEm1lbGVlSGFyZG5lc3NEZWx0YRgK",
            "IAEoBRIdChVmaXJlYmFsbEhhcmRuZXNzRGVsdGEYCyABKAUSEgoKaW52aW5z",
            "aWJsZRgMIAEoCBIYChB4Zm9ybUNoU3BlY2llc0lkGA0gASgNEhkKEXJlcGVs",
            "U29mdFB1c2hiYWNrGA4gASgIEhMKC29taXRHcmF2aXR5GA8gASgIEhAKCGF1",
            "dG9EZWYxGBAgASgIEhkKEWFzc29jaWF0ZWREZWJ1ZmZzGBEgAygNEh0KFWNo",
            "YXJhY3RlclZmeFNwZWNpZXNJZBgSIAEoBRIhChlpc1BpeGVsYXRlZFZmeE9u",
            "Q2hhcmFjdGVyGBMgASgIIpoBCgRCdWZmEhEKCXNwZWNpZXNJZBgBIAEoDRIN",
            "CgVzdG9jaxgCIAEoBRIfChdvcmlnaW5hdGVkUmVuZGVyRnJhbWVJZBgDIAEo",
            "BRIXCg9vcmlnQ2hTcGVjaWVzSWQYBCABKA0SHQoVb3JpZ1JlcGVsU29mdFB1",
            "c2hiYWNrGAUgASgIEhcKD29yaWdPbWl0R3Jhdml0eRgGIAEoCCIqCgZEZWJ1",
            "ZmYSEQoJc3BlY2llc0lkGAEgASgNEg0KBXN0b2NrGAIgASgFIk4KEkJ1bGxl",
            "dEltbXVuZVJlY29yZBIVCg1idWxsZXRMb2NhbElkGAEgASgFEiEKGXJlbWFp",
            "bmluZ0xpZmV0aW1lUmRmQ291bnQYAiABKAUicQoQQ29uc3VtYWJsZUNvbmZp",
            "ZxIRCglzcGVjaWVzSWQYASABKA0SEwoLcmVmaWxsRGVsdGEYAiABKAUSFQoN",
            "dmZ4SWRPblBpY2tlchgDIAEoBRIeChZpc1BpeGVsYXRlZFZmeE9uUGlja2Vy",
            "GAQgASgIIl0KE1BpY2thYmxlU2tpbGxDb25maWcSDwoHc2tpbGxJZBgBIAEo",
            "DRIVCg12ZnhJZE9uUGlja2VyGAIgASgFEh4KFmlzUGl4ZWxhdGVkVmZ4T25Q",
            "aWNrZXIYAyABKAgixQIKDUludmVudG9yeVNsb3QSMQoJc3RvY2tUeXBlGAEg",
            "ASgOMh4uc2hhcmVkLkludmVudG9yeVNsb3RTdG9ja1R5cGUSDQoFcXVvdGEY",
            "AiABKA0SFwoPZnJhbWVzVG9SZWNvdmVyGAMgASgFEhQKDGRlZmF1bHRRdW90",
            "YRgEIAEoDRIeChZkZWZhdWx0RnJhbWVzVG9SZWNvdmVyGAUgASgFEhUKDWJ1",
            "ZmZTcGVjaWVzSWQYBiABKA0SDwoHc2tpbGxJZBgHIAEoDRISCgpza2lsbElk",
            "QWlyGAggASgNEhQKDGdhdWdlQ2hhcmdlZBgJIAEoBRIVCg1nYXVnZVJlcXVp",
            "cmVkGAogASgFEh8KF2Z1bGxDaGFyZ2VCdWZmU3BlY2llc0lkGAsgASgNEhkK",
            "EWZ1bGxDaGFyZ2VTa2lsbElkGAwgASgNIjEKCUludmVudG9yeRIkCgVzbG90",
            "cxgBIAMoCzIVLnNoYXJlZC5JbnZlbnRvcnlTbG90IiQKD0JhdHRsZUVxdWlw",
            "bWVudBIRCglzcGVjaWVzSWQYASABKA0iJQoOUGxheWVyU2V0dGluZ3MSEwoL",
            "c291bmRWb2x1bWUYASABKAUi6wIKFFBsYXllclJlZ2lvblByb2dyZXNzEhAK",
            "CHJlZ2lvbklkGAEgASgFEhsKE2NvbXBsZXRlZExldmVsQ291bnQYAiABKAUS",
            "VgoVcmVtYWluaW5nRGVwZW5kZW5jaWVzGAMgAygLMjcuc2hhcmVkLlBsYXll",
            "clJlZ2lvblByb2dyZXNzLlJlbWFpbmluZ0RlcGVuZGVuY2llc0VudHJ5ElIK",
            "E3JlbW92ZWREZXBlbmRlbmNpZXMYBCADKAsyNS5zaGFyZWQuUGxheWVyUmVn",
            "aW9uUHJvZ3Jlc3MuUmVtb3ZlZERlcGVuZGVuY2llc0VudHJ5GjwKGlJlbWFp",
            "bmluZ0RlcGVuZGVuY2llc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
            "IAEoCDoCOAEaOgoYUmVtb3ZlZERlcGVuZGVuY2llc0VudHJ5EgsKA2tleRgB",
            "IAEoBRINCgV2YWx1ZRgCIAEoCDoCOAEitQQKE1BsYXllckxldmVsUHJvZ3Jl",
            "c3MSEAoIcmVnaW9uSWQYASABKAUSDwoHbGV2ZWxJZBgCIAEoBRIUCgxoaWdo",
            "ZXN0U2NvcmUYAyABKAUSKAogc2hvcnRlc3RGaW5pc2hUaW1lQXRIaWdoZXN0",
            "U2NvcmUYBCABKAUSKAogY2hhcmFjdGVyU3BlY2llc0lkQXRIaWdoZXN0U2Nv",
            "cmUYBSABKA0SGgoSc2hvcnRlc3RGaW5pc2hUaW1lGAYgASgFEiEKGXNjb3Jl",
            "QXRTaG9ydGVzdEZpbmlzaFRpbWUYByABKAUSLgomY2hhcmFjdGVyU3BlY2ll",
            "c0lkQXRTaG9ydGVzdEZpbmlzaFRpbWUYCCABKA0SVQoVcmVtYWluaW5nRGVw",
            "ZW5kZW5jaWVzGAkgAygLMjYuc2hhcmVkLlBsYXllckxldmVsUHJvZ3Jlc3Mu",
            "UmVtYWluaW5nRGVwZW5kZW5jaWVzRW50cnkSUQoTcmVtb3ZlZERlcGVuZGVu",
            "Y2llcxgKIAMoCzI0LnNoYXJlZC5QbGF5ZXJMZXZlbFByb2dyZXNzLlJlbW92",
            "ZWREZXBlbmRlbmNpZXNFbnRyeRo8ChpSZW1haW5pbmdEZXBlbmRlbmNpZXNF",
            "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAg6AjgBGjoKGFJlbW92",
            "ZWREZXBlbmRlbmNpZXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
            "KAg6AjgBIoMFChNQbGF5ZXJTdG9yeVByb2dyZXNzEk8KEnJlZ2lvblByb2dy",
            "ZXNzRGljdBgBIAMoCzIzLnNoYXJlZC5QbGF5ZXJTdG9yeVByb2dyZXNzLlJl",
            "Z2lvblByb2dyZXNzRGljdEVudHJ5Ek0KEWxldmVsUHJvZ3Jlc3NEaWN0GAIg",
            "AygLMjIuc2hhcmVkLlBsYXllclN0b3J5UHJvZ3Jlc3MuTGV2ZWxQcm9ncmVz",
            "c0RpY3RFbnRyeRIWCg5jdXJzb3JSZWdpb25JZBgDIAEoBRIVCg1jdXJzb3JM",
            "ZXZlbElkGAQgASgFEi8KBHZpZXcYBSABKA4yIS5zaGFyZWQuUGxheWVyU3Rv",
            "cnlNb2RlU2VsZWN0VmlldxIYChBzYXZlZEF0R210TWlsbGlzGAYgASgEEl8K",
            "GnVubG9ja2VkUGxheWFibGVDaGFyYWN0ZXJzGAcgAygLMjsuc2hhcmVkLlBs",
            "YXllclN0b3J5UHJvZ3Jlc3MuVW5sb2NrZWRQbGF5YWJsZUNoYXJhY3RlcnNF",
            "bnRyeRpXChdSZWdpb25Qcm9ncmVzc0RpY3RFbnRyeRILCgNrZXkYASABKAUS",
            "KwoFdmFsdWUYAiABKAsyHC5zaGFyZWQuUGxheWVyUmVnaW9uUHJvZ3Jlc3M6",
            "AjgBGlUKFkxldmVsUHJvZ3Jlc3NEaWN0RW50cnkSCwoDa2V5GAEgASgFEioK",
            "BXZhbHVlGAIgASgLMhsuc2hhcmVkLlBsYXllckxldmVsUHJvZ3Jlc3M6AjgB",
            "GkEKH1VubG9ja2VkUGxheWFibGVDaGFyYWN0ZXJzRW50cnkSCwoDa2V5GAEg",
            "ASgNEg0KBXZhbHVlGAIgASgIOgI4ASJwChRTdG9yeVBvaW50RGlhbG9nTGlu",
            "ZRIZChFuYXJyYXRvckpvaW5JbmRleBgBIAEoBRIZChFuYXJyYXRvclNwZWNp",
            "ZXNJZBgCIAEoDRIPCgdjb250ZW50GAMgASgJEhEKCWRvd25Pck5vdBgEIAEo",
            "CCJbCg5TdG9yeVBvaW50U3RlcBIrCgVsaW5lcxgBIAMoCzIcLnNoYXJlZC5T",
            "dG9yeVBvaW50RGlhbG9nTGluZRIcChRub25jdHJsQWxpdmVSZGZDb3VudBgC",
            "IAEoBSJaCgpTdG9yeVBvaW50EiUKBXN0ZXBzGAEgAygLMhYuc2hhcmVkLlN0",
            "b3J5UG9pbnRTdGVwEg8KB25vbmN0cmwYAiABKAgSFAoMY3V0c2NlbmVOYW1l",
            "GAMgASgJIn8KCkxldmVsU3RvcnkSLgoGcG9pbnRzGAEgAygLMh4uc2hhcmVk",
            "LkxldmVsU3RvcnkuUG9pbnRzRW50cnkaQQoLUG9pbnRzRW50cnkSCwoDa2V5",
            "GAEgASgFEiEKBXZhbHVlGAIgASgLMhIuc2hhcmVkLlN0b3J5UG9pbnQ6AjgB",
            "Ik0KGVNlcmlhbGl6YWJsZUNvbnZleFBvbHlnb24SDwoHYW5jaG9yWBgBIAEo",
            "AhIPCgdhbmNob3JZGAIgASgCEg4KBnBvaW50cxgDIAMoAiKCAQorU2VyaWFs",
            "aXplZENvbXBsZXRlbHlTdGF0aWNQYXRyb2xDdWVDb2xsaWRlchIfCgRhdHRy",
            "GAEgASgLMhEuc2hhcmVkLlBhdHJvbEN1ZRIyCgdwb2x5Z29uGAIgASgLMiEu",
            "c2hhcmVkLlNlcmlhbGl6YWJsZUNvbnZleFBvbHlnb24ihAEKJlNlcmlhbGl6",
            "ZWRDb21wbGV0ZWx5U3RhdGljVHJhcENvbGxpZGVyEiYKBGF0dHIYASABKAsy",
            "GC5zaGFyZWQuVHJhcENvbGxpZGVyQXR0chIyCgdwb2x5Z29uGAIgASgLMiEu",
            "c2hhcmVkLlNlcmlhbGl6YWJsZUNvbnZleFBvbHlnb24iigEKKVNlcmlhbGl6",
            "ZWRDb21wbGV0ZWx5U3RhdGljVHJpZ2dlckNvbGxpZGVyEikKBGF0dHIYASAB",
            "KAsyGy5zaGFyZWQuVHJpZ2dlckNvbGxpZGVyQXR0chIyCgdwb2x5Z29uGAIg",
            "ASgLMiEuc2hhcmVkLlNlcmlhbGl6YWJsZUNvbnZleFBvbHlnb24iPwoVVHJh",
            "cENvbGxpZGVyQXR0ckFycmF5EiYKBGxpc3QYASADKAsyGC5zaGFyZWQuVHJh",
            "cENvbGxpZGVyQXR0ciK4AQokU2VyaWFsaXplZFRyYXBMb2NhbElkVG9Db2xs",
            "aWRlckF0dHJzEkQKBGRpY3QYASADKAsyNi5zaGFyZWQuU2VyaWFsaXplZFRy",
            "YXBMb2NhbElkVG9Db2xsaWRlckF0dHJzLkRpY3RFbnRyeRpKCglEaWN0RW50",
            "cnkSCwoDa2V5GAEgASgFEiwKBXZhbHVlGAIgASgLMh0uc2hhcmVkLlRyYXBD",
            "b2xsaWRlckF0dHJBcnJheToCOAEiqQIKIlNlcmlhbGl6ZWRUcmlnZ2VyRWRp",
            "dG9ySWRUb0xvY2FsSWQSQgoEZGljdBgBIAMoCzI0LnNoYXJlZC5TZXJpYWxp",
            "emVkVHJpZ2dlckVkaXRvcklkVG9Mb2NhbElkLkRpY3RFbnRyeRJECgVkaWN0",
            "MhgCIAMoCzI1LnNoYXJlZC5TZXJpYWxpemVkVHJpZ2dlckVkaXRvcklkVG9M",
            "b2NhbElkLkRpY3QyRW50cnkaKwoJRGljdEVudHJ5EgsKA2tleRgBIAEoBRIN",
            "CgV2YWx1ZRgCIAEoBToCOAEaTAoKRGljdDJFbnRyeRILCgNrZXkYASABKAUS",
            "LQoFdmFsdWUYAiABKAsyHi5zaGFyZWQuVHJpZ2dlckNvbmZpZ0Zyb21UaWxl",
            "ZDoCOAEilAMKF1BpY2thYmxlQ29uZmlnRnJvbVRpbGVkEhgKEGluaXRWaXJ0",
            "dWFsR3JpZFgYASABKAUSGAoQaW5pdFZpcnR1YWxHcmlkWRgCIAEoBRIUCgx0",
            "YWtlc0dyYXZpdHkYAyABKAgSFgoOZmlyc3RTaG93UmRmSWQYBCABKAUSEgoK",
            "cmVjdXJRdW90YRgFIAEoBRIdChVyZWN1ckludGVydmFsUmRmQ291bnQYBiAB",
            "KA0SJQodbGlmZXRpbWVSZGZDb3VudFBlck9jY3VycmVuY2UYByABKA0SJgoK",
            "cGlja3VwVHlwZRgIIAEoDjISLnNoYXJlZC5QaWNrdXBUeXBlEh8KF3N0b2Nr",
            "UXVvdGFQZXJPY2N1cnJlbmNlGAkgASgNEhYKDnN1YnNjcmlwdGlvbklkGAog",
            "ASgFEhQKDHZmeFNwZWNpZXNJZBgLIAEoBRIcChNjb25zdW1hYmxlU3BlY2ll",
            "c0lkGIAIIAEoDRIWCg1idWZmU3BlY2llc0lkGIEIIAEoDRIQCgdza2lsbElk",
            "GIIIIAEoDSLBAgoIUGlja2FibGUSFwoPcGlja2FibGVMb2NhbElkGAEgASgF",
            "EhQKDHZpcnR1YWxHcmlkWBgCIAEoBRIUCgx2aXJ0dWFsR3JpZFkYAyABKAUS",
            "OAoPY29uZmlnRnJvbVRpbGVkGAQgASgLMh8uc2hhcmVkLlBpY2thYmxlQ29u",
            "ZmlnRnJvbVRpbGVkEiEKGXJlbWFpbmluZ0xpZmV0aW1lUmRmQ291bnQYBSAB",
            "KAUSGwoTcmVtYWluaW5nUmVjdXJRdW90YRgGIAEoBRIMCgR2ZWxYGAcgASgF",
            "EgwKBHZlbFkYCCABKAUSJgoHcGtTdGF0ZRgJIAEoDjIVLnNoYXJlZC5QaWNr",
            "YWJsZVN0YXRlEhcKD2ZyYW1lc0luUGtTdGF0ZRgKIAEoBRIZChFwaWNrZWRC",
            "eUpvaW5JbmRleBgLIAEoBSJdChZDaGFyYWN0ZXJTcGF3bmVyQ29uZmlnEhgK",
            "EGN1dG9mZlJkZkZyYW1lSWQYASABKAUSFQoNc3BlY2llc0lkTGlzdBgCIAMo",
            "DRISCgppbml0T3BMaXN0GAMgAygEIogBChVQaWNrYWJsZVNwYXduZXJDb25m",
            "aWcSGAoQY3V0b2ZmUmRmRnJhbWVJZBgBIAEoBRIVCg1zcGVjaWVzSWRMaXN0",
            "GAIgAygNEhIKCmluaXRPcExpc3QYAyADKAQSKgoOcGlja3VwVHlwZUxpc3QY",
            "BCADKA4yEi5zaGFyZWQuUGlja3VwVHlwZSJAChNUcmlnZ2VyQ29sbGlkZXJB",
            "dHRyEhYKDnRyaWdnZXJMb2NhbElkGAEgASgFEhEKCXNwZWNpZXNJZBgCIAEo",
            "BSKaBgoWVHJpZ2dlckNvbmZpZ0Zyb21UaWxlZBIQCghlZGl0b3JJZBgBIAEo",
            "BRIRCglzcGVjaWVzSWQYAiABKAUSFQoNZGVsYXllZEZyYW1lcxgDIAEoBRIW",
            "Cg5yZWNvdmVyeUZyYW1lcxgEIAEoBRIUCgxidWxsZXRUZWFtSWQYBSABKAUS",
            "HQoVc3ViQ3ljbGVUcmlnZ2VyRnJhbWVzGAYgASgFEhUKDXN1YkN5Y2xlUXVv",
            "dGEYByABKAUSEAoIcXVvdGFDYXAYCCABKAUSGgoSc3Vic2NyaWJlc1RvSWRM",
            "aXN0GAkgAygFEiMKG3N1YnNjcmliZXNUb0V4aGF1c3RlZElkTGlzdBgKIAMo",
            "BRITCgtuZXdSZXZpdmFsWBgLIAEoBRITCgtuZXdSZXZpdmFsWRgMIAEoBRIQ",
            "Cghpbml0RGlyWBgNIAEoBRIQCghpbml0RGlyWRgOIAEoBRImCh5wdWJsaXNo",
            "aW5nRXZ0TWFza1Vwb25FeGhhdXN0ZWQYDyABKAQSPwoXY2hhcmFjdGVyU3Bh",
            "d25lclRpbWVTZXEYECADKAsyHi5zaGFyZWQuQ2hhcmFjdGVyU3Bhd25lckNv",
            "bmZpZxI9ChZwaWNrYWJsZVNwYXduZXJUaW1lU2VxGBEgAygLMh0uc2hhcmVk",
            "LlBpY2thYmxlU3Bhd25lckNvbmZpZxIZChFmb3JjZUN0cmxSZGZDb3VudBgS",
            "IAEoBRIUCgxmb3JjZUN0cmxDbWQYEyABKAQSIQoZcmVsb2FkQ29sbGlkZXJz",
            "SW5OZXdQaGFzZRgUIAEoCBIVCgxzdG9yeVBvaW50SWQYgAggASgFEg4KBWJn",
            "bUlkGIEIIAEoBRJLCg5ib3NzU3BlY2llc1NldBiCCCADKAsyMi5zaGFyZWQu",
            "VHJpZ2dlckNvbmZpZ0Zyb21UaWxlZC5Cb3NzU3BlY2llc1NldEVudHJ5EhgK",
            "D2lzQm9zc1NhdmVwb2ludBiDCCABKAgaNQoTQm9zc1NwZWNpZXNTZXRFbnRy",
            "eRILCgNrZXkYASABKA0SDQoFdmFsdWUYAiABKAg6AjgBIvADCgdUcmlnZ2Vy",
            "EhAKCGVkaXRvcklkGAEgASgFEhYKDnRyaWdnZXJMb2NhbElkGAIgASgFEhQK",
            "DGZyYW1lc1RvRmlyZRgDIAEoBRIXCg9mcmFtZXNUb1JlY292ZXIYBCABKAUS",
            "DQoFcXVvdGEYBSABKAUSFAoMYnVsbGV0VGVhbUlkGAYgASgFEgwKBGRpclgY",
            "ByABKAUSGQoRc3ViQ3ljbGVRdW90YUxlZnQYCSABKAUSIwoFc3RhdGUYCiAB",
            "KA4yFC5zaGFyZWQuVHJpZ2dlclN0YXRlEhUKDWZyYW1lc0luU3RhdGUYCyAB",
            "KAUSFAoMdmlydHVhbEdyaWRYGAwgASgFEhQKDHZpcnR1YWxHcmlkWRgNIAEo",
            "BRIXCg9kZW1hbmRlZEV2dE1hc2sYDiABKAQSGAoQZnVsZmlsbGVkRXZ0TWFz",
            "axgPIAEoBBIjCht3YXZlTnBjS2lsbGVkRXZ0TWFza0NvdW50ZXIYECABKAQS",
            "HgoWc3Vic2NyaWJlckxvY2FsSWRzTWFzaxgRIAEoBBIlCh1leGhhdXN0U3Vi",
            "c2NyaWJlckxvY2FsSWRzTWFzaxgSIAEoBBIZChFvZmZlbmRlckpvaW5JbmRl",
            "eBgTIAEoBRIcChRvZmZlbmRlckJ1bGxldFRlYW1JZBgUIAEoBSJuCg5QbGF5",
            "ZXJNZXRhSW5mbxIQCghwbGF5ZXJJZBgBIAEoCRIRCglqb2luSW5kZXgYAiAB",
            "KAUSFAoMYnVsbGV0VGVhbUlkGAMgASgFEhEKCXNwZWNpZXNJZBgEIAEoDRIO",
            "CgZyb29tSWQYBSABKAUqNAoUQm94SW50ZXJwb2xhdGlvblR5cGUSCwoHVXNl",
            "UHJldhAAEg8KC0ludGVycG9sYXRlEAEqVQoISWZhY2VDYXQSCQoFRU1QVFkQ",
            "ABIJCgVGTEVTSBABEgkKBU1FVEFMEAISCQoFRkxVSUQQAxIICgRST0NLEAQS",
            "CQoFR1JBU1MQBRIICgRXT09EEAYqRAoLQnVsbGV0U3RhdGUSCwoHU3RhcnRV",
            "cBAAEgoKBkFjdGl2ZRABEg0KCUV4cGxvZGluZxACEg0KCVZhbmlzaGluZxAD",
            "KrgHCg5DaGFyYWN0ZXJTdGF0ZRIJCgVJZGxlMRAAEgsKB1dhbGtpbmcQARIO",
            "CgpUdXJuQXJvdW5kEAISCgoGQXRrZWQxEAMSFAoQSW5BaXJJZGxlMU5vSnVt",
            "cBAEEhQKEEluQWlySWRsZTFCeUp1bXAQBRIUChBJbkFpcklkbGUyQnlKdW1w",
            "EAYSGAoUSW5BaXJJZGxlMUJ5V2FsbEp1bXAQBxIPCgtJbkFpckF0a2VkMRAI",
            "EgwKCEJsb3duVXAxEAkSDAoITGF5RG93bjEQChIKCgZHZXRVcDEQCxIJCgVE",
            "eWluZxAMEgsKB0Rhc2hpbmcQDRILCgdTbGlkaW5nEA4SCgoGRGltbWVkEA8S",
            "FAoQVHJhbnNmb3JtaW5nSW50bxAQEg8KC0JhY2tEYXNoaW5nEBESEAoMSW5B",
            "aXJXYWxraW5nEBISHQoZVHJhbnNmb3JtaW5nSW50b0Zyb21EZWF0aBATEhAK",
            "DFdhbGtTdG9wcGluZxAUEhUKEUluQWlyV2Fsa1N0b3BwaW5nEBUSCwoHUGFy",
            "cmllZBAWEgsKB0F3YWtpbmcQFxIQCgxHcm91bmREb2RnZWQQGBIPCgtCYWNr",
            "V2Fsa2luZxAZEhAKC09uV2FsbElkbGUxEIABEhAKC0Nyb3VjaElkbGUxEIAC",
            "Eg8KCkNyb3VjaEF0azEQgQISEgoNQ3JvdWNoV2Fsa2luZxCCAhIRCgxDcm91",
            "Y2hBdGtlZDEQgwISCQoERGVmMRCEAhIPCgpEZWYxQXRrZWQxEIUCEg8KCkRl",
            "ZjFCcm9rZW4QhgISCQoEQXRrMRCACBIJCgRBdGsyEIEIEgkKBEF0azMQgggS",
            "CQoEQXRrNBCDCBIJCgRBdGs1EIQIEgkKBEF0azYQhQgSCQoEQXRrNxCGCBIS",
            "Cg1BdGs3X0NoYXJnaW5nEIcIEhcKEkF0azdfQ2hhcmdlUmVsZWFzZRCICBIJ",
            "CgRBdGs4EIkIEg4KCUluQWlyQXRrMRCAEBIOCglJbkFpckF0azIQgRASEAoL",
            "V2Fsa2luZ0F0azEQghASEAoLV2Fsa2luZ0F0azQQgxASDgoJSW5BaXJBdGs2",
            "EIQQEg8KCk9uV2FsbEF0azEQgBgSEwoOSWRsZTFfQ2hhcmdpbmcQgRgSGQoU",
            "V2Fsa2luZ0F0azFfQ2hhcmdpbmcQghgSFwoSSW5BaXJBdGsxX0NoYXJnaW5n",
            "EIMYEhgKE09uV2FsbEF0azFfQ2hhcmdpbmcQhBgSGAoTQ3JvdWNoQXRrMV9D",
            "aGFyZ2luZxCFGCqTAQoHTnBjR29hbBIJCgVOSWRsZRAAEg8KC05Gb2xsb3dB",
            "bGx5EAESCwoHTlBhdHJvbBACEhEKDU5IdW50VGhlbklkbGUQAxITCg9OSHVu",
            "dFRoZW5QYXRyb2wQBBIXChNOSHVudFRoZW5Gb2xsb3dBbGx5EAUSHgoaTklk",
            "bGVJZkdvSHVudGluZ1RoZW5QYXRyb2wQBipOCglUcmFwU3RhdGUSCQoFVElk",
            "bGUQABIMCghUV2Fsa2luZxABEgkKBVRBdGsxEAISCwoHVEF0a2VkMRADEhAK",
            "DFREZWFjdGl2YXRlZBAEKiwKDFRyaWdnZXJTdGF0ZRIKCgZUUmVhZHkQABIQ",
            "CgxUQ29vbGluZ0Rvd24QASo8Cg1QaWNrYWJsZVN0YXRlEgkKBVBJZGxlEAAS",
            "EQoNUERpc2FwcGVhcmluZxABEg0KCVBDb25zdW1lZBACKnYKCkJ1bGxldFR5",
            "cGUSEAoMVW5kZXRlcm1pbmVkEAASCQoFTWVsZWUQARIMCghGaXJlYmFsbBAC",
            "Eg4KCkdyb3VuZFdhdmUQAxIRCg1NaXNzaWxlTGluZWFyEAQSGgoWTWlzc2ls",
            "ZVF1YWRyYXRpY0JlemllchAFKuYBCgxNdWx0aUhpdFR5cGUSCAoETm9uZRAA",
            "EhAKDEZyb21FbWlzc2lvbhABEhYKEkZyb21GaXJzdEhpdEFjdHVhbBACEhYK",
            "EkZyb21GaXJzdEhpdEFueXdheRADEhUKEUZyb21QcmV2SGl0QWN0dWFsEAQS",
            "FQoRRnJvbVByZXZIaXRBbnl3YXkQBRIbChdGcm9tVmlzaW9uU2Vla09yRGVm",
            "YXVsdBAGEiMKH0Zyb21QcmV2SGl0QWN0dWFsT3JBY3RpdmVUaW1lVXAQBxIa",
            "ChZGcm9tRW1pc3Npb25KdXN0QWN0aXZlEAgqMwoQU2tpbGxUcmlnZ2VyVHlw",
            "ZRIOCgpSaXNpbmdFZGdlEAASDwoLRmFsbGluZ0VkZ2UQASosCg9WZnhEdXJh",
            "dGlvblR5cGUSCgoGT25lT2ZmEAASDQoJUmVwZWF0aW5nEAEqNwoNVmZ4TW90",
            "aW9uVHlwZRIMCghOb01vdGlvbhAAEgsKB0Ryb3BwZWQQARILCgdUcmFjaW5n",
            "EAIqeQoLVHJpZ2dlclR5cGUSCgoGVHROb25lEAASDQoJVHRUcml2aWFsEAES",
            "EQoNVHRDeWNsaWNUaW1lZBACEg4KClR0SW5kaVdhdmUQAxIOCgpUdFN5bmNX",
            "YXZlEAQSDgoKVHRNb3ZlbWVudBAFEgwKCFR0QXR0YWNrEAYqMQoNQnVmZlN0",
            "b2NrVHlwZRIKCgZOb25lQmYQABIJCgVUaW1lZBABEgkKBVF1b3RhEAIqcQoK",
            "RGVidWZmVHlwZRILCgdOb25lRGJmEAASEQoNU3BlZWREb3duT25seRABEhEK",
            "DUNvbGRTcGVlZERvd24QAhIWChJQb3NpdGlvbkxvY2tlZE9ubHkQAxIYChRG",
            "cm96ZW5Qb3NpdGlvbkxvY2tlZBAEKjYKDkNvbnN1bWFibGVUeXBlEgwKCE5v",
            "bmVDc21iEAASCgoGUmVmaWxsEAESCgoGRGJmUmN2EAIqnwEKFkludmVudG9y",
            "eVNsb3RTdG9ja1R5cGUSCgoGTm9uZUl2EAASCwoHRHVtbXlJdhABEgwKCFBv",
            "Y2tldEl2EAISCwoHVGltZWRJdhADEgsKB1F1b3RhSXYQBBITCg9UaW1lZE1h",
            "Z2F6aW5lSXYQBRIUChBHYXVnZWRNYWdhemluZUl2EAYSGQoVR2F1Z2VkVGlt",
            "ZWRNYWdhemluZUl2EAcqPAoZUGxheWVyU3RvcnlNb2RlU2VsZWN0VmlldxII",
            "CgROT05FEAASCgoGUkVHSU9OEAESCQoFTEVWRUwQAio1ChBGaW5pc2hlZEx2",
            "T3B0aW9uEg0KCUJPU1NfT05MWRAAEhIKDlNUT1JZX0FORF9CT1NTEAEqMQoK",
            "UGlja3VwVHlwZRINCglJbW1lZGlhdGUQABIUChBQdXRJbnRvSW52ZW50b3J5",
            "EAFCCaoCBnNoYXJlZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::shared.BoxInterpolationType), typeof(global::shared.IfaceCat), typeof(global::shared.BulletState), typeof(global::shared.CharacterState), typeof(global::shared.NpcGoal), typeof(global::shared.TrapState), typeof(global::shared.TriggerState), typeof(global::shared.PickableState), typeof(global::shared.BulletType), typeof(global::shared.MultiHitType), typeof(global::shared.SkillTriggerType), typeof(global::shared.VfxDurationType), typeof(global::shared.VfxMotionType), typeof(global::shared.TriggerType), typeof(global::shared.BuffStockType), typeof(global::shared.DebuffType), typeof(global::shared.ConsumableType), typeof(global::shared.InventorySlotStockType), typeof(global::shared.PlayerStoryModeSelectView), typeof(global::shared.FinishedLvOption), typeof(global::shared.PickupType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.AuthResult), global::shared.AuthResult.Parser, new[]{ "RetCode", "Uname", "Captcha", "ExpiresAt", "PlayerId", "NewAuthToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.CharacterDownsync), global::shared.CharacterDownsync.Parser, new[]{ "Id", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY", "Speed", "SpeciesId", "JoinIndex", "FramesToRecover", "FramesCapturedByInertia", "CapturedByPatrolCue", "FramesInPatrolCue", "BeatsCnt", "BeatenCnt", "Hp", "Mp", "BtnBHoldingRdfCount", "CharacterState", "FramesInChState", "InAir", "JumpTriggered", "OnWall", "OnWallNormX", "OnWallNormY", "OmitGravity", "OmitSoftPushback", "WaivingPatrolCueId", "GoalAsNpc", "RevivalVirtualGridX", "RevivalVirtualGridY", "RevivalDirX", "RevivalDirY", "OnSlope", "FrictionVelX", "ForcedCrouching", "SlipJumpTriggered", "PrimarilyOnSlippableHardPushback", "PrevWasCrouching", "NewBirth", "FramesInvinsible", "JumpStarted", "FramesToStartJump", "RepelSoftPushback", "PublishingEvtMaskUponKilled", "PublishingToTriggerLocalIdUponKilled", "SubscribesToTriggerLocalId", "JumpHoldingRdfCnt", "RemainingAirJumpQuota", "RemainingAirDashQuota", "KilledToDropConsumableSpeciesId", "KilledToDropBuffSpeciesId", "KilledToDropPickupSkillId", "FrictionVelY", "FramesSinceLastDamaged", "RemainingDef1Quota", "ComboHitCnt", "ComboFramesRemained", "DamageElementalAttrs", "OnSlopeFacingDown", "LastDamagedByJoinIndex", "LastDamagedByBulletTeamId", "ActivatedRdfId", "CachedCueCmd", "ActiveSkillId", "ActiveSkillHit", "BulletTeamId", "ChCollisionTeamId", "BtnCHoldingRdfCount", "BtnDHoldingRdfCount", "BtnEHoldingRdfCount", "ParryPrepRdfCntDown", "MpRegenRdfCountdown", "FlyingRdfCountdown", "LockingOnJoinIndex", "BuffList", "DebuffList", "Inventory", "BulletImmuneRecords", "KinematicKnobs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameDecoded), global::shared.InputFrameDecoded.Parser, new[]{ "Dx", "Dy", "BtnALevel", "BtnBLevel", "BtnCLevel", "BtnDLevel", "BtnELevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameUpsync), global::shared.InputFrameUpsync.Parser, new[]{ "InputFrameId", "Encoded", "JoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputFrameDownsync), global::shared.InputFrameDownsync.Parser, new[]{ "InputFrameId", "InputList", "ConfirmedList", "UdpConfirmedList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.WsReq), global::shared.WsReq.Parser, new[]{ "PlayerId", "Act", "JoinIndex", "AckingFrameId", "AckingInputFrameId", "AuthKey", "InputFrameUpsyncBatch", "SelfParsedRdf", "CollisionSpaceHalfWidth", "CollisionSpaceHalfHeight", "BattleDurationSeconds", "SerializedBarrierPolygons", "SerializedStaticPatrolCues", "SerializedCompletelyStaticTraps", "SerializedStaticTriggers", "SerializedTrapLocalIdToColliderAttrs", "SerializedTriggerEditorIdToLocalId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InputBufferSnapshot), global::shared.InputBufferSnapshot.Parser, new[]{ "RefRenderFrameId", "UnconfirmedMask", "ToSendInputFrameDownsyncs", "ShouldForceResync", "PeerJoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PatrolCue), global::shared.PatrolCue.Parser, new[]{ "Id", "FlAct", "FrAct", "FlCaptureFrames", "FrCaptureFrames", "FdAct", "FuAct", "FdCaptureFrames", "FuCaptureFrames", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.VfxConfig), global::shared.VfxConfig.Parser, new[]{ "SpeciesId", "MotionType", "DurationType", "OnCharacter", "OnBullet", "OnTrap", "UsePixelatedVer", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BulletConfig), global::shared.BulletConfig.Parser, new[]{ "StartupFrames", "CancellableStFrame", "CancellableEdFrame", "ActiveFrames", "HitStunFrames", "BlockStunFrames", "PushbackVelX", "PushbackVelY", "Damage", "SelfLockVelX", "SelfLockVelY", "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "BlowUp", "SpeciesId", "ExplosionFrames", "BType", "MhType", "SimultaneousMultiHitCnt", "Speed", "DirX", "DirY", "CancelTransit", "RepeatQuota", "ActiveVfxSpeciesId", "ExplosionVfxSpeciesId", "AllowsWalking", "AllowsCrouching", "Hardness", "StartupInvinsibleFrames", "HitInvinsibleFrames", "ExplosionSpeciesId", "PerpAccMag", "DelaySelfVelToActive", "SpeedIfNotHit", "OmitSoftPushback", "HitboxSizeIncX", "HitboxSizeIncY", "RemainsUponHit", "RotatesAlongVelocity", "DefaultHardPushbackBounceQuota", "HardPushbackBounceNormFactor", "HardPushbackBounceSheerFactor", "IsPixelatedActiveVfx", "IsPixelatedExplostionVfx", "MhVanishOnMeleeHit", "DownSlopePrimerVelY", "MhUpdatesOriginPos", "BeamCollision", "AngularFrameVelCos", "AngularFrameVelSin", "VisionOffsetX", "VisionOffsetY", "VisionSizeX", "VisionSizeY", "SelfLockVelYWhenFlying", "ElementalAttrs", "CancellableByInventorySlotC", "CancellableByInventorySlotD", "SpinAnchorX", "SpinAnchorY", "BeamVisualSizeY", "TouchExplosionBombCollision", "AirRidingGroundWave", "GroundImpactMeleeCollision", "WallImpactMeleeCollision", "MhInheritsSpin", "InitSpinCos", "InitSpinSin", "FinishingFrames", "NoExplosionOnHardPushback", "StartupVfxSpeciesId", "Ifc", "ReflectFireballXIfNotHarder", "RejectsReflectionFromAnotherBullet", "ProvidesXHardPushback", "ProvidesYHardPushbackTop", "ProvidesYHardPushbackBottom", "IgnoreSlopeDeceleration", "RotateOffenderWithSpin", "MhNotTriggerOnChHit", "MhNotTriggerOnHarderBulletHit", "MhNotTriggerOnHardPushbackHit", "HopperMissile", "BeamRendering", "MissileSearchIntervalPow2Minus1", "UseChOffsetRegardlessOfEmissionMh", "InplaceVanishExplosionSpeciesId", "AnimLoopingRdfOffset", "ExplosionAnimLoopingRdfOffset", "GaugeIncReductionRatio", "MhInheritsFramesInBlState", "GuardBreakerExtraHitCnt", "TakesDef1AsHardPushback", "CollisionTypeMask", "TakesGravity", "BuffConfig", "CharacterEmitSfxName", "FireballEmitSfxName", "ExplosionSfxName", "ActiveSfxName", "ExplosionOnFleshSfxName", "ExplosionOnRockSfxName", "ExplosionOnMetalSfxName", "ExplosionOnWoodSfxName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Bullet), global::shared.Bullet.Parser, new[]{ "BlState", "FramesInBlState", "BulletLocalId", "OriginatedRenderFrameId", "OffenderJoinIndex", "OffenderTrapLocalId", "TeamId", "VertMovingTrapLocalIdUponActive", "RepeatQuotaLeft", "RemainingHardPushbackBounceQuota", "TargetCharacterJoinIndex", "DamageDealed", "ExplodedOnIfc", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY", "OriginatedVirtualGridX", "OriginatedVirtualGridY", "SpinCos", "SpinSin", "ActiveSkillHit", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapConfig), global::shared.TrapConfig.Parser, new[]{ "SpeciesId", "ExplosionSpeciesId", "ExplosionFrames", "BlowUp", "Damage", "HitStunFrames", "HitInvinsibleFrames", "Deactivatable", "Hardness", "DeactivateUponTriggered", "ConstFrictionVelXTop", "ConstFrictionVelXBottom", "ConstFrictionVelYLeft", "ConstFrictionVelYRight", "PatrolCueRequiresFullContain", "SpinAnchorX", "SpinAnchorY", "AngularFrameVelCos", "AngularFrameVelSin", "IntrinsicSpinCos", "IntrinsicSpinSin", "Atk1UponTriggered", "Atk1SkillId", "IsRotary", "NoXFlipRendering", "SpeciesName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapConfigFromTiled), global::shared.TrapConfigFromTiled.Parser, new[]{ "SpeciesId", "Quota", "Speed", "DirX", "DirY", "SubscribesToId", "SubscribesToIdAfterInitialFire", "SubscribesToIdAlt", "BoxCw", "BoxCh", "InitNoAngularVel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapColliderAttr), global::shared.TrapColliderAttr.Parser, new[]{ "HitboxOffsetX", "HitboxOffsetY", "HitboxSizeX", "HitboxSizeY", "ProvidesHardPushback", "ProvidesDamage", "ProvidesEscape", "ProvidesSlipJump", "ProhibitsWallGrabbing", "ForcesCrouching", "SpeciesId", "OnlyAllowsAlignedVelX", "OnlyAllowsAlignedVelY", "AsPatrolCue", "TcPc", "TrapLocalId", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Trap), global::shared.Trap.Parser, new[]{ "TrapLocalId", "PatrolCueAngularVelFlipMark", "ConfigFromTiled", "TrapState", "FramesInTrapState", "IsCompletelyStatic", "CapturedByPatrolCue", "FramesInPatrolCue", "WaivingPatrolCueId", "WaivingSpontaneousPatrol", "SubscribesToTriggerLocalId", "SubscribesToTriggerLocalIdAlt", "SpinCos", "SpinSin", "AngularFrameVelCos", "AngularFrameVelSin", "VirtualGridX", "VirtualGridY", "DirX", "DirY", "VelX", "VelY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerConfig), global::shared.TriggerConfig.Parser, new[]{ "SpeciesId", "SpeciesName", "TriggerType", "CollisionTypeMask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PeerUdpAddr), global::shared.PeerUdpAddr.Parser, new[]{ "Ip", "Port", "AuthKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BattleColliderInfo), global::shared.BattleColliderInfo.Parser, new[]{ "StageName", "BoundRoomId", "BattleDurationFrames", "InputFrameUpsyncDelayTolerance", "MaxChasingRenderFramesPerUpdate", "RollbackEstimatedDtMillis", "RollbackEstimatedDtNanos", "RenderBufferSize", "CollisionMinStep", "BoundRoomCapacity", "PreallocNpcCapacity", "PreallocBulletCapacity", "BattleUdpTunnel", "FrameLogEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.RoomDownsyncFrame), global::shared.RoomDownsyncFrame.Parser, new[]{ "Id", "PlayersArr", "CountdownNanos", "Bullets", "NpcsArr", "TrapsArr", "TriggersArr", "Pickables", "BackendUnconfirmedMask", "ShouldForceResync", "SpeciesIdList", "BulletLocalIdCounter", "NpcLocalIdCounter", "ParticipantChangeId", "PickableLocalIdCounter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.WsResp), global::shared.WsResp.Parser, new[]{ "Ret", "Act", "Rdf", "InputFrameDownsyncBatch", "BciFrame", "PeerJoinIndex", "PeerUdpAddrList", "ErrMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Skill), global::shared.Skill.Parser, new[]{ "BattleLocalId", "RecoveryFrames", "RecoveryFramesOnBlock", "RecoveryFramesOnHit", "TriggerType", "BoundChState", "BoundChStateOnHit", "MpDelta", "Id", "Hits", "SelfNonStockBuff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.FrameLog), global::shared.FrameLog.Parser, new[]{ "Rdf", "ActuallyUsedIdf" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BattleResult), global::shared.BattleResult.Parser, new[]{ "WinnerJoinIndex", "WinnerBulletTeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.DebuffConfig), global::shared.DebuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "Type", "ArrIdx", "ImpactPerInterval", "ImpactInterval", "FrictionVelX", "FrictionVelY", "FrictionAccX", "FrictionAccY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BuffConfig), global::shared.BuffConfig.Parser, new[]{ "SpeciesId", "StockType", "Stock", "SpeedDelta", "HitboxSizeXDelta", "HitboxSizeYDelta", "DamageDelta", "DamageDeltaByPercentage", "CharacterHardnessDelta", "MeleeHardnessDelta", "FireballHardnessDelta", "Invinsible", "XformChSpeciesId", "RepelSoftPushback", "OmitGravity", "AutoDef1", "AssociatedDebuffs", "CharacterVfxSpeciesId", "IsPixelatedVfxOnCharacter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Buff), global::shared.Buff.Parser, new[]{ "SpeciesId", "Stock", "OriginatedRenderFrameId", "OrigChSpeciesId", "OrigRepelSoftPushback", "OrigOmitGravity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Debuff), global::shared.Debuff.Parser, new[]{ "SpeciesId", "Stock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BulletImmuneRecord), global::shared.BulletImmuneRecord.Parser, new[]{ "BulletLocalId", "RemainingLifetimeRdfCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.ConsumableConfig), global::shared.ConsumableConfig.Parser, new[]{ "SpeciesId", "RefillDelta", "VfxIdOnPicker", "IsPixelatedVfxOnPicker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PickableSkillConfig), global::shared.PickableSkillConfig.Parser, new[]{ "SkillId", "VfxIdOnPicker", "IsPixelatedVfxOnPicker" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.InventorySlot), global::shared.InventorySlot.Parser, new[]{ "StockType", "Quota", "FramesToRecover", "DefaultQuota", "DefaultFramesToRecover", "BuffSpeciesId", "SkillId", "SkillIdAir", "GaugeCharged", "GaugeRequired", "FullChargeBuffSpeciesId", "FullChargeSkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Inventory), global::shared.Inventory.Parser, new[]{ "Slots" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.BattleEquipment), global::shared.BattleEquipment.Parser, new[]{ "SpeciesId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PlayerSettings), global::shared.PlayerSettings.Parser, new[]{ "SoundVolume" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PlayerRegionProgress), global::shared.PlayerRegionProgress.Parser, new[]{ "RegionId", "CompletedLevelCount", "RemainingDependencies", "RemovedDependencies" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PlayerLevelProgress), global::shared.PlayerLevelProgress.Parser, new[]{ "RegionId", "LevelId", "HighestScore", "ShortestFinishTimeAtHighestScore", "CharacterSpeciesIdAtHighestScore", "ShortestFinishTime", "ScoreAtShortestFinishTime", "CharacterSpeciesIdAtShortestFinishTime", "RemainingDependencies", "RemovedDependencies" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PlayerStoryProgress), global::shared.PlayerStoryProgress.Parser, new[]{ "RegionProgressDict", "LevelProgressDict", "CursorRegionId", "CursorLevelId", "View", "SavedAtGmtMillis", "UnlockedPlayableCharacters" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.StoryPointDialogLine), global::shared.StoryPointDialogLine.Parser, new[]{ "NarratorJoinIndex", "NarratorSpeciesId", "Content", "DownOrNot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.StoryPointStep), global::shared.StoryPointStep.Parser, new[]{ "Lines", "NonctrlAliveRdfCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.StoryPoint), global::shared.StoryPoint.Parser, new[]{ "Steps", "Nonctrl", "CutsceneName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.LevelStory), global::shared.LevelStory.Parser, new[]{ "Points" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializableConvexPolygon), global::shared.SerializableConvexPolygon.Parser, new[]{ "AnchorX", "AnchorY", "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializedCompletelyStaticPatrolCueCollider), global::shared.SerializedCompletelyStaticPatrolCueCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializedCompletelyStaticTrapCollider), global::shared.SerializedCompletelyStaticTrapCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializedCompletelyStaticTriggerCollider), global::shared.SerializedCompletelyStaticTriggerCollider.Parser, new[]{ "Attr", "Polygon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TrapColliderAttrArray), global::shared.TrapColliderAttrArray.Parser, new[]{ "List" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializedTrapLocalIdToColliderAttrs), global::shared.SerializedTrapLocalIdToColliderAttrs.Parser, new[]{ "Dict" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.SerializedTriggerEditorIdToLocalId), global::shared.SerializedTriggerEditorIdToLocalId.Parser, new[]{ "Dict", "Dict2" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PickableConfigFromTiled), global::shared.PickableConfigFromTiled.Parser, new[]{ "InitVirtualGridX", "InitVirtualGridY", "TakesGravity", "FirstShowRdfId", "RecurQuota", "RecurIntervalRdfCount", "LifetimeRdfCountPerOccurrence", "PickupType", "StockQuotaPerOccurrence", "SubscriptionId", "VfxSpeciesId", "ConsumableSpeciesId", "BuffSpeciesId", "SkillId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Pickable), global::shared.Pickable.Parser, new[]{ "PickableLocalId", "VirtualGridX", "VirtualGridY", "ConfigFromTiled", "RemainingLifetimeRdfCount", "RemainingRecurQuota", "VelX", "VelY", "PkState", "FramesInPkState", "PickedByJoinIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.CharacterSpawnerConfig), global::shared.CharacterSpawnerConfig.Parser, new[]{ "CutoffRdfFrameId", "SpeciesIdList", "InitOpList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PickableSpawnerConfig), global::shared.PickableSpawnerConfig.Parser, new[]{ "CutoffRdfFrameId", "SpeciesIdList", "InitOpList", "PickupTypeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerColliderAttr), global::shared.TriggerColliderAttr.Parser, new[]{ "TriggerLocalId", "SpeciesId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.TriggerConfigFromTiled), global::shared.TriggerConfigFromTiled.Parser, new[]{ "EditorId", "SpeciesId", "DelayedFrames", "RecoveryFrames", "BulletTeamId", "SubCycleTriggerFrames", "SubCycleQuota", "QuotaCap", "SubscribesToIdList", "SubscribesToExhaustedIdList", "NewRevivalX", "NewRevivalY", "InitDirX", "InitDirY", "PublishingEvtMaskUponExhausted", "CharacterSpawnerTimeSeq", "PickableSpawnerTimeSeq", "ForceCtrlRdfCount", "ForceCtrlCmd", "ReloadCollidersInNewPhase", "StoryPointId", "BgmId", "BossSpeciesSet", "IsBossSavepoint" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.Trigger), global::shared.Trigger.Parser, new[]{ "EditorId", "TriggerLocalId", "FramesToFire", "FramesToRecover", "Quota", "BulletTeamId", "DirX", "SubCycleQuotaLeft", "State", "FramesInState", "VirtualGridX", "VirtualGridY", "DemandedEvtMask", "FulfilledEvtMask", "WaveNpcKilledEvtMaskCounter", "SubscriberLocalIdsMask", "ExhaustSubscriberLocalIdsMask", "OffenderJoinIndex", "OffenderBulletTeamId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::shared.PlayerMetaInfo), global::shared.PlayerMetaInfo.Parser, new[]{ "PlayerId", "JoinIndex", "BulletTeamId", "SpeciesId", "RoomId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BoxInterpolationType {
    [pbr::OriginalName("UsePrev")] UsePrev = 0,
    [pbr::OriginalName("Interpolate")] Interpolate = 1,
  }

  /// <summary>
  ///
  ///[WARNING] On the use of unsigned int.
  ///
  ///RdfId (as well as all configured "frames"), xxxLocalId, skillHit offset and joinIndex will be used as array index which doesn't support "uint", just use 0 as their TERMINATING value to save bandwidth.
  ///
  ///We should reduce runtime typecasting as much as possible!
  /// </summary>
  public enum IfaceCat {
    /// <summary>
    /// Sound effect basis
    /// </summary>
    [pbr::OriginalName("EMPTY")] Empty = 0,
    [pbr::OriginalName("FLESH")] Flesh = 1,
    [pbr::OriginalName("METAL")] Metal = 2,
    [pbr::OriginalName("FLUID")] Fluid = 3,
    [pbr::OriginalName("ROCK")] Rock = 4,
    [pbr::OriginalName("GRASS")] Grass = 5,
    [pbr::OriginalName("WOOD")] Wood = 6,
  }

  public enum BulletState {
    [pbr::OriginalName("StartUp")] StartUp = 0,
    [pbr::OriginalName("Active")] Active = 1,
    [pbr::OriginalName("Exploding")] Exploding = 2,
    [pbr::OriginalName("Vanishing")] Vanishing = 3,
  }

  public enum CharacterState {
    [pbr::OriginalName("Idle1")] Idle1 = 0,
    [pbr::OriginalName("Walking")] Walking = 1,
    [pbr::OriginalName("TurnAround")] TurnAround = 2,
    [pbr::OriginalName("Atked1")] Atked1 = 3,
    [pbr::OriginalName("InAirIdle1NoJump")] InAirIdle1NoJump = 4,
    [pbr::OriginalName("InAirIdle1ByJump")] InAirIdle1ByJump = 5,
    [pbr::OriginalName("InAirIdle2ByJump")] InAirIdle2ByJump = 6,
    [pbr::OriginalName("InAirIdle1ByWallJump")] InAirIdle1ByWallJump = 7,
    [pbr::OriginalName("InAirAtked1")] InAirAtked1 = 8,
    [pbr::OriginalName("BlownUp1")] BlownUp1 = 9,
    [pbr::OriginalName("LayDown1")] LayDown1 = 10,
    [pbr::OriginalName("GetUp1")] GetUp1 = 11,
    [pbr::OriginalName("Dying")] Dying = 12,
    [pbr::OriginalName("Dashing")] Dashing = 13,
    [pbr::OriginalName("Sliding")] Sliding = 14,
    /// <summary>
    /// Pre-activated state for evtsub-based NPC 
    /// </summary>
    [pbr::OriginalName("Dimmed")] Dimmed = 15,
    /// <summary>
    /// When at this state, the character has already completed transform, i.e. in new speciesId
    /// </summary>
    [pbr::OriginalName("TransformingInto")] TransformingInto = 16,
    [pbr::OriginalName("BackDashing")] BackDashing = 17,
    [pbr::OriginalName("InAirWalking")] InAirWalking = 18,
    /// <summary>
    /// When at this state, the character has already completed transform, i.e. in new speciesId
    /// </summary>
    [pbr::OriginalName("TransformingIntoFromDeath")] TransformingIntoFromDeath = 19,
    [pbr::OriginalName("WalkStopping")] WalkStopping = 20,
    [pbr::OriginalName("InAirWalkStopping")] InAirWalkStopping = 21,
    [pbr::OriginalName("Parried")] Parried = 22,
    [pbr::OriginalName("Awaking")] Awaking = 23,
    [pbr::OriginalName("GroundDodged")] GroundDodged = 24,
    [pbr::OriginalName("BackWalking")] BackWalking = 25,
    [pbr::OriginalName("OnWallIdle1")] OnWallIdle1 = 128,
    [pbr::OriginalName("CrouchIdle1")] CrouchIdle1 = 256,
    [pbr::OriginalName("CrouchAtk1")] CrouchAtk1 = 257,
    [pbr::OriginalName("CrouchWalking")] CrouchWalking = 258,
    [pbr::OriginalName("CrouchAtked1")] CrouchAtked1 = 259,
    [pbr::OriginalName("Def1")] Def1 = 260,
    [pbr::OriginalName("Def1Atked1")] Def1Atked1 = 261,
    [pbr::OriginalName("Def1Broken")] Def1Broken = 262,
    [pbr::OriginalName("Atk1")] Atk1 = 1024,
    [pbr::OriginalName("Atk2")] Atk2 = 1025,
    [pbr::OriginalName("Atk3")] Atk3 = 1026,
    [pbr::OriginalName("Atk4")] Atk4 = 1027,
    [pbr::OriginalName("Atk5")] Atk5 = 1028,
    [pbr::OriginalName("Atk6")] Atk6 = 1029,
    [pbr::OriginalName("Atk7")] Atk7 = 1030,
    [pbr::OriginalName("Atk7_Charging")] Atk7Charging = 1031,
    [pbr::OriginalName("Atk7_ChargeRelease")] Atk7ChargeRelease = 1032,
    [pbr::OriginalName("Atk8")] Atk8 = 1033,
    [pbr::OriginalName("InAirAtk1")] InAirAtk1 = 2048,
    [pbr::OriginalName("InAirAtk2")] InAirAtk2 = 2049,
    [pbr::OriginalName("WalkingAtk1")] WalkingAtk1 = 2050,
    [pbr::OriginalName("WalkingAtk4")] WalkingAtk4 = 2051,
    [pbr::OriginalName("InAirAtk6")] InAirAtk6 = 2052,
    [pbr::OriginalName("OnWallAtk1")] OnWallAtk1 = 3072,
    [pbr::OriginalName("Idle1_Charging")] Idle1Charging = 3073,
    [pbr::OriginalName("WalkingAtk1_Charging")] WalkingAtk1Charging = 3074,
    [pbr::OriginalName("InAirAtk1_Charging")] InAirAtk1Charging = 3075,
    [pbr::OriginalName("OnWallAtk1_Charging")] OnWallAtk1Charging = 3076,
    [pbr::OriginalName("CrouchAtk1_Charging")] CrouchAtk1Charging = 3077,
  }

  public enum NpcGoal {
    [pbr::OriginalName("NIdle")] Nidle = 0,
    [pbr::OriginalName("NFollowAlly")] NfollowAlly = 1,
    [pbr::OriginalName("NPatrol")] Npatrol = 2,
    [pbr::OriginalName("NHuntThenIdle")] NhuntThenIdle = 3,
    [pbr::OriginalName("NHuntThenPatrol")] NhuntThenPatrol = 4,
    [pbr::OriginalName("NHuntThenFollowAlly")] NhuntThenFollowAlly = 5,
    [pbr::OriginalName("NIdleIfGoHuntingThenPatrol")] NidleIfGoHuntingThenPatrol = 6,
  }

  public enum TrapState {
    [pbr::OriginalName("TIdle")] Tidle = 0,
    [pbr::OriginalName("TWalking")] Twalking = 1,
    [pbr::OriginalName("TAtk1")] Tatk1 = 2,
    [pbr::OriginalName("TAtked1")] Tatked1 = 3,
    [pbr::OriginalName("TDeactivated")] Tdeactivated = 4,
  }

  public enum TriggerState {
    [pbr::OriginalName("TReady")] Tready = 0,
    [pbr::OriginalName("TCoolingDown")] TcoolingDown = 1,
  }

  public enum PickableState {
    [pbr::OriginalName("PIdle")] Pidle = 0,
    [pbr::OriginalName("PDisappearing")] Pdisappearing = 1,
    [pbr::OriginalName("PConsumed")] Pconsumed = 2,
  }

  public enum BulletType {
    [pbr::OriginalName("Undetermined")] Undetermined = 0,
    [pbr::OriginalName("Melee")] Melee = 1,
    [pbr::OriginalName("Fireball")] Fireball = 2,
    [pbr::OriginalName("GroundWave")] GroundWave = 3,
    [pbr::OriginalName("MissileLinear")] MissileLinear = 4,
    /// <summary>
    /// by default using "(ed-st)" rotated around "z-axis at st" toward upper y-axis and length 0.25*|ed-st| as an intermediate relay 
    /// </summary>
    [pbr::OriginalName("MissileQuadraticBezier")] MissileQuadraticBezier = 5,
  }

  public enum MultiHitType {
    /// <summary>
    ///*
    ///[WARN] Multihit of a fireball (determined in turn by the "BulletType bType" field) is more difficult to handle than that of melee, because we have to count from the fireball's first hit; the situation becomes even more complicated when a multihit fireball is in a crowd -- remains to be designed
    ///
    ///Types of fireball multihit-singlebullet
    ///a. References the emission frame
    ///b. References the first hit only when actually hit
    ///c. References the first hit even if blocked
    ///d. References the prev hit only when actually hit
    ///e. References the prev hit even if blocked
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("FromEmission")] FromEmission = 1,
    [pbr::OriginalName("FromFirstHitActual")] FromFirstHitActual = 2,
    [pbr::OriginalName("FromFirstHitAnyway")] FromFirstHitAnyway = 3,
    [pbr::OriginalName("FromPrevHitActual")] FromPrevHitActual = 4,
    [pbr::OriginalName("FromPrevHitAnyway")] FromPrevHitAnyway = 5,
    [pbr::OriginalName("FromVisionSeekOrDefault")] FromVisionSeekOrDefault = 6,
    [pbr::OriginalName("FromPrevHitActualOrActiveTimeUp")] FromPrevHitActualOrActiveTimeUp = 7,
    [pbr::OriginalName("FromEmissionJustActive")] FromEmissionJustActive = 8,
  }

  public enum SkillTriggerType {
    [pbr::OriginalName("RisingEdge")] RisingEdge = 0,
    [pbr::OriginalName("FallingEdge")] FallingEdge = 1,
  }

  public enum VfxDurationType {
    [pbr::OriginalName("OneOff")] OneOff = 0,
    [pbr::OriginalName("Repeating")] Repeating = 1,
  }

  public enum VfxMotionType {
    [pbr::OriginalName("NoMotion")] NoMotion = 0,
    [pbr::OriginalName("Dropped")] Dropped = 1,
    [pbr::OriginalName("Tracing")] Tracing = 2,
  }

  public enum TriggerType {
    [pbr::OriginalName("TtNone")] TtNone = 0,
    /// <summary>
    /// Just by "demandedEvtMask == fulfilledEvtMask" without any other timer or collision requirement 
    /// </summary>
    [pbr::OriginalName("TtTrivial")] TtTrivial = 1,
    [pbr::OriginalName("TtCyclicTimed")] TtCyclicTimed = 2,
    [pbr::OriginalName("TtIndiWave")] TtIndiWave = 3,
    [pbr::OriginalName("TtSyncWave")] TtSyncWave = 4,
    [pbr::OriginalName("TtMovement")] TtMovement = 5,
    [pbr::OriginalName("TtAttack")] TtAttack = 6,
  }

  public enum BuffStockType {
    [pbr::OriginalName("NoneBf")] NoneBf = 0,
    /// <summary>
    /// Would be calculated in number of renderFrames, not actual time in seconds or milliseconds
    /// </summary>
    [pbr::OriginalName("Timed")] Timed = 1,
    [pbr::OriginalName("Quota")] Quota = 2,
  }

  public enum DebuffType {
    [pbr::OriginalName("NoneDbf")] NoneDbf = 0,
    [pbr::OriginalName("SpeedDownOnly")] SpeedDownOnly = 1,
    [pbr::OriginalName("ColdSpeedDown")] ColdSpeedDown = 2,
    [pbr::OriginalName("PositionLockedOnly")] PositionLockedOnly = 3,
    [pbr::OriginalName("FrozenPositionLocked")] FrozenPositionLocked = 4,
  }

  public enum ConsumableType {
    [pbr::OriginalName("NoneCsmb")] NoneCsmb = 0,
    [pbr::OriginalName("Refill")] Refill = 1,
    /// <summary>
    /// Debuff recovery
    /// </summary>
    [pbr::OriginalName("DbfRcv")] DbfRcv = 2,
  }

  public enum InventorySlotStockType {
    [pbr::OriginalName("NoneIv")] NoneIv = 0,
    /// <summary>
    /// For "slot D", just skip everything for this type
    /// </summary>
    [pbr::OriginalName("DummyIv")] DummyIv = 1,
    /// <summary>
    /// For "slot D", reserved for pickables
    /// </summary>
    [pbr::OriginalName("PocketIv")] PocketIv = 2,
    /// <summary>
    /// Reusable after cooldown
    /// </summary>
    [pbr::OriginalName("TimedIv")] TimedIv = 3,
    [pbr::OriginalName("QuotaIv")] QuotaIv = 4,
    /// <summary>
    /// Has certain quotas before required to cooldown
    /// </summary>
    [pbr::OriginalName("TimedMagazineIv")] TimedMagazineIv = 5,
    [pbr::OriginalName("GaugedMagazineIv")] GaugedMagazineIv = 6,
    /// <summary>
    /// NOT IMPLEMENTED!  
    /// </summary>
    [pbr::OriginalName("GaugedTimedMagazineIv")] GaugedTimedMagazineIv = 7,
  }

  public enum PlayerStoryModeSelectView {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("REGION")] Region = 1,
    [pbr::OriginalName("LEVEL")] Level = 2,
  }

  public enum FinishedLvOption {
    [pbr::OriginalName("BOSS_ONLY")] BossOnly = 0,
    [pbr::OriginalName("STORY_AND_BOSS")] StoryAndBoss = 1,
  }

  public enum PickupType {
    [pbr::OriginalName("Immediate")] Immediate = 0,
    [pbr::OriginalName("PutIntoInventory")] PutIntoInventory = 1,
  }

  #endregion

  #region Messages
  public sealed partial class AuthResult : pb::IMessage<AuthResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthResult> _parser = new pb::MessageParser<AuthResult>(() => new AuthResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuthResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResult(AuthResult other) : this() {
      retCode_ = other.retCode_;
      uname_ = other.uname_;
      captcha_ = other.captcha_;
      expiresAt_ = other.expiresAt_;
      playerId_ = other.playerId_;
      newAuthToken_ = other.newAuthToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResult Clone() {
      return new AuthResult(this);
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "uname" field.</summary>
    public const int UnameFieldNumber = 2;
    private string uname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uname {
      get { return uname_; }
      set {
        uname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "captcha" field.</summary>
    public const int CaptchaFieldNumber = 3;
    private string captcha_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Captcha {
      get { return captcha_; }
      set {
        captcha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiresAt" field.</summary>
    public const int ExpiresAtFieldNumber = 4;
    private long expiresAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "newAuthToken" field.</summary>
    public const int NewAuthTokenFieldNumber = 6;
    private string newAuthToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NewAuthToken {
      get { return newAuthToken_; }
      set {
        newAuthToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuthResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuthResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      if (Uname != other.Uname) return false;
      if (Captcha != other.Captcha) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (PlayerId != other.PlayerId) return false;
      if (NewAuthToken != other.NewAuthToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RetCode != 0) hash ^= RetCode.GetHashCode();
      if (Uname.Length != 0) hash ^= Uname.GetHashCode();
      if (Captcha.Length != 0) hash ^= Captcha.GetHashCode();
      if (ExpiresAt != 0L) hash ^= ExpiresAt.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (NewAuthToken.Length != 0) hash ^= NewAuthToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (Uname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uname);
      }
      if (Captcha.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Captcha);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiresAt);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerId);
      }
      if (NewAuthToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NewAuthToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (Uname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uname);
      }
      if (Captcha.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Captcha);
      }
      if (ExpiresAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiresAt);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerId);
      }
      if (NewAuthToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NewAuthToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (Uname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uname);
      }
      if (Captcha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Captcha);
      }
      if (ExpiresAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresAt);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (NewAuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAuthToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuthResult other) {
      if (other == null) {
        return;
      }
      if (other.RetCode != 0) {
        RetCode = other.RetCode;
      }
      if (other.Uname.Length != 0) {
        Uname = other.Uname;
      }
      if (other.Captcha.Length != 0) {
        Captcha = other.Captcha;
      }
      if (other.ExpiresAt != 0L) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.NewAuthToken.Length != 0) {
        NewAuthToken = other.NewAuthToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            Uname = input.ReadString();
            break;
          }
          case 26: {
            Captcha = input.ReadString();
            break;
          }
          case 32: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 42: {
            PlayerId = input.ReadString();
            break;
          }
          case 50: {
            NewAuthToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            Uname = input.ReadString();
            break;
          }
          case 26: {
            Captcha = input.ReadString();
            break;
          }
          case 32: {
            ExpiresAt = input.ReadInt64();
            break;
          }
          case 42: {
            PlayerId = input.ReadString();
            break;
          }
          case 50: {
            NewAuthToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CharacterDownsync : pb::IMessage<CharacterDownsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterDownsync> _parser = new pb::MessageParser<CharacterDownsync>(() => new CharacterDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CharacterDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync(CharacterDownsync other) : this() {
      id_ = other.id_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      speed_ = other.speed_;
      speciesId_ = other.speciesId_;
      joinIndex_ = other.joinIndex_;
      framesToRecover_ = other.framesToRecover_;
      framesCapturedByInertia_ = other.framesCapturedByInertia_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      beatsCnt_ = other.beatsCnt_;
      beatenCnt_ = other.beatenCnt_;
      hp_ = other.hp_;
      mp_ = other.mp_;
      btnBHoldingRdfCount_ = other.btnBHoldingRdfCount_;
      characterState_ = other.characterState_;
      framesInChState_ = other.framesInChState_;
      inAir_ = other.inAir_;
      jumpTriggered_ = other.jumpTriggered_;
      onWall_ = other.onWall_;
      onWallNormX_ = other.onWallNormX_;
      onWallNormY_ = other.onWallNormY_;
      omitGravity_ = other.omitGravity_;
      omitSoftPushback_ = other.omitSoftPushback_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      goalAsNpc_ = other.goalAsNpc_;
      revivalVirtualGridX_ = other.revivalVirtualGridX_;
      revivalVirtualGridY_ = other.revivalVirtualGridY_;
      revivalDirX_ = other.revivalDirX_;
      revivalDirY_ = other.revivalDirY_;
      onSlope_ = other.onSlope_;
      frictionVelX_ = other.frictionVelX_;
      forcedCrouching_ = other.forcedCrouching_;
      slipJumpTriggered_ = other.slipJumpTriggered_;
      primarilyOnSlippableHardPushback_ = other.primarilyOnSlippableHardPushback_;
      prevWasCrouching_ = other.prevWasCrouching_;
      newBirth_ = other.newBirth_;
      framesInvinsible_ = other.framesInvinsible_;
      jumpStarted_ = other.jumpStarted_;
      framesToStartJump_ = other.framesToStartJump_;
      repelSoftPushback_ = other.repelSoftPushback_;
      publishingEvtMaskUponKilled_ = other.publishingEvtMaskUponKilled_;
      publishingToTriggerLocalIdUponKilled_ = other.publishingToTriggerLocalIdUponKilled_;
      subscribesToTriggerLocalId_ = other.subscribesToTriggerLocalId_;
      jumpHoldingRdfCnt_ = other.jumpHoldingRdfCnt_;
      remainingAirJumpQuota_ = other.remainingAirJumpQuota_;
      remainingAirDashQuota_ = other.remainingAirDashQuota_;
      killedToDropConsumableSpeciesId_ = other.killedToDropConsumableSpeciesId_;
      killedToDropBuffSpeciesId_ = other.killedToDropBuffSpeciesId_;
      killedToDropPickupSkillId_ = other.killedToDropPickupSkillId_;
      frictionVelY_ = other.frictionVelY_;
      framesSinceLastDamaged_ = other.framesSinceLastDamaged_;
      remainingDef1Quota_ = other.remainingDef1Quota_;
      comboHitCnt_ = other.comboHitCnt_;
      comboFramesRemained_ = other.comboFramesRemained_;
      damageElementalAttrs_ = other.damageElementalAttrs_;
      onSlopeFacingDown_ = other.onSlopeFacingDown_;
      lastDamagedByJoinIndex_ = other.lastDamagedByJoinIndex_;
      lastDamagedByBulletTeamId_ = other.lastDamagedByBulletTeamId_;
      activatedRdfId_ = other.activatedRdfId_;
      cachedCueCmd_ = other.cachedCueCmd_;
      activeSkillId_ = other.activeSkillId_;
      activeSkillHit_ = other.activeSkillHit_;
      bulletTeamId_ = other.bulletTeamId_;
      chCollisionTeamId_ = other.chCollisionTeamId_;
      btnCHoldingRdfCount_ = other.btnCHoldingRdfCount_;
      btnDHoldingRdfCount_ = other.btnDHoldingRdfCount_;
      btnEHoldingRdfCount_ = other.btnEHoldingRdfCount_;
      parryPrepRdfCntDown_ = other.parryPrepRdfCntDown_;
      mpRegenRdfCountdown_ = other.mpRegenRdfCountdown_;
      flyingRdfCountdown_ = other.flyingRdfCountdown_;
      lockingOnJoinIndex_ = other.lockingOnJoinIndex_;
      buffList_ = other.buffList_.Clone();
      debuffList_ = other.debuffList_.Clone();
      inventory_ = other.inventory_ != null ? other.inventory_.Clone() : null;
      bulletImmuneRecords_ = other.bulletImmuneRecords_.Clone();
      kinematicKnobs_ = other.kinematicKnobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterDownsync Clone() {
      return new CharacterDownsync(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 2;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 3;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 6;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 7;
    private int velY_;
    /// <summary>
    /// "velX" and "velY" is used to record the accumulated effect by inertia and accelerations (including gravity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 8;
    private int speed_;
    /// <summary>
    /// this is the instantaneous scalar attribute of a character, different from but will be accounted in "velX" and "velY"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 9;
    private uint speciesId_;
    /// <summary>
    /// For evolution during battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 10;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 11;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "framesCapturedByInertia" field.</summary>
    public const int FramesCapturedByInertiaFieldNumber = 12;
    private int framesCapturedByInertia_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesCapturedByInertia {
      get { return framesCapturedByInertia_; }
      set {
        framesCapturedByInertia_ = value;
      }
    }

    /// <summary>Field number for the "capturedByPatrolCue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 13;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "framesInPatrolCue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 14;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "beatsCnt" field.</summary>
    public const int BeatsCntFieldNumber = 15;
    private uint beatsCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BeatsCnt {
      get { return beatsCnt_; }
      set {
        beatsCnt_ = value;
      }
    }

    /// <summary>Field number for the "beatenCnt" field.</summary>
    public const int BeatenCntFieldNumber = 16;
    private uint beatenCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BeatenCnt {
      get { return beatenCnt_; }
      set {
        beatenCnt_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 17;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "mp" field.</summary>
    public const int MpFieldNumber = 18;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "btnBHoldingRdfCount" field.</summary>
    public const int BtnBHoldingRdfCountFieldNumber = 19;
    private int btnBHoldingRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnBHoldingRdfCount {
      get { return btnBHoldingRdfCount_; }
      set {
        btnBHoldingRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "characterState" field.</summary>
    public const int CharacterStateFieldNumber = 22;
    private global::shared.CharacterState characterState_ = global::shared.CharacterState.Idle1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.CharacterState CharacterState {
      get { return characterState_; }
      set {
        characterState_ = value;
      }
    }

    /// <summary>Field number for the "framesInChState" field.</summary>
    public const int FramesInChStateFieldNumber = 23;
    private int framesInChState_;
    /// <summary>
    /// number of frames elapsed in the current character state   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInChState {
      get { return framesInChState_; }
      set {
        framesInChState_ = value;
      }
    }

    /// <summary>Field number for the "inAir" field.</summary>
    public const int InAirFieldNumber = 24;
    private bool inAir_;
    /// <summary>
    /// by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "inAir (prev -> curr)"  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InAir {
      get { return inAir_; }
      set {
        inAir_ = value;
      }
    }

    /// <summary>Field number for the "jumpTriggered" field.</summary>
    public const int JumpTriggeredFieldNumber = 25;
    private bool jumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool JumpTriggered {
      get { return jumpTriggered_; }
      set {
        jumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "onWall" field.</summary>
    public const int OnWallFieldNumber = 26;
    private bool onWall_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "onWall (prev -> curr)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnWall {
      get { return onWall_; }
      set {
        onWall_ = value;
      }
    }

    /// <summary>Field number for the "onWallNormX" field.</summary>
    public const int OnWallNormXFieldNumber = 27;
    private int onWallNormX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnWallNormX {
      get { return onWallNormX_; }
      set {
        onWallNormX_ = value;
      }
    }

    /// <summary>Field number for the "onWallNormY" field.</summary>
    public const int OnWallNormYFieldNumber = 28;
    private int onWallNormY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnWallNormY {
      get { return onWallNormY_; }
      set {
        onWallNormY_ = value;
      }
    }

    /// <summary>Field number for the "omitGravity" field.</summary>
    public const int OmitGravityFieldNumber = 29;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "omitSoftPushback" field.</summary>
    public const int OmitSoftPushbackFieldNumber = 30;
    private bool omitSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitSoftPushback {
      get { return omitSoftPushback_; }
      set {
        omitSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "waivingPatrolCueId" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 31;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "goalAsNpc" field.</summary>
    public const int GoalAsNpcFieldNumber = 32;
    private global::shared.NpcGoal goalAsNpc_ = global::shared.NpcGoal.Nidle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.NpcGoal GoalAsNpc {
      get { return goalAsNpc_; }
      set {
        goalAsNpc_ = value;
      }
    }

    /// <summary>Field number for the "revivalVirtualGridX" field.</summary>
    public const int RevivalVirtualGridXFieldNumber = 33;
    private int revivalVirtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalVirtualGridX {
      get { return revivalVirtualGridX_; }
      set {
        revivalVirtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "revivalVirtualGridY" field.</summary>
    public const int RevivalVirtualGridYFieldNumber = 34;
    private int revivalVirtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalVirtualGridY {
      get { return revivalVirtualGridY_; }
      set {
        revivalVirtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "revivalDirX" field.</summary>
    public const int RevivalDirXFieldNumber = 35;
    private int revivalDirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalDirX {
      get { return revivalDirX_; }
      set {
        revivalDirX_ = value;
      }
    }

    /// <summary>Field number for the "revivalDirY" field.</summary>
    public const int RevivalDirYFieldNumber = 36;
    private int revivalDirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RevivalDirY {
      get { return revivalDirY_; }
      set {
        revivalDirY_ = value;
      }
    }

    /// <summary>Field number for the "onSlope" field.</summary>
    public const int OnSlopeFieldNumber = 37;
    private bool onSlope_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnSlope {
      get { return onSlope_; }
      set {
        onSlope_ = value;
      }
    }

    /// <summary>Field number for the "frictionVelX" field.</summary>
    public const int FrictionVelXFieldNumber = 38;
    private int frictionVelX_;
    /// <summary>
    /// Mostly from a dynamic trap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionVelX {
      get { return frictionVelX_; }
      set {
        frictionVelX_ = value;
      }
    }

    /// <summary>Field number for the "forcedCrouching" field.</summary>
    public const int ForcedCrouchingFieldNumber = 39;
    private bool forcedCrouching_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "forcedCrouching (prev -> curr)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForcedCrouching {
      get { return forcedCrouching_; }
      set {
        forcedCrouching_ = value;
      }
    }

    /// <summary>Field number for the "slipJumpTriggered" field.</summary>
    public const int SlipJumpTriggeredFieldNumber = 40;
    private bool slipJumpTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SlipJumpTriggered {
      get { return slipJumpTriggered_; }
      set {
        slipJumpTriggered_ = value;
      }
    }

    /// <summary>Field number for the "primarilyOnSlippableHardPushback" field.</summary>
    public const int PrimarilyOnSlippableHardPushbackFieldNumber = 41;
    private bool primarilyOnSlippableHardPushback_;
    /// <summary>
    /// like "inAir", it’s by design a standalone field only inferred by the calc result of "Battle.Step" instead of "characterState"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrimarilyOnSlippableHardPushback {
      get { return primarilyOnSlippableHardPushback_; }
      set {
        primarilyOnSlippableHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "prevWasCrouching" field.</summary>
    public const int PrevWasCrouchingFieldNumber = 42;
    private bool prevWasCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrevWasCrouching {
      get { return prevWasCrouching_; }
      set {
        prevWasCrouching_ = value;
      }
    }

    /// <summary>Field number for the "newBirth" field.</summary>
    public const int NewBirthFieldNumber = 43;
    private bool newBirth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NewBirth {
      get { return newBirth_; }
      set {
        newBirth_ = value;
      }
    }

    /// <summary>Field number for the "framesInvinsible" field.</summary>
    public const int FramesInvinsibleFieldNumber = 44;
    private int framesInvinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInvinsible {
      get { return framesInvinsible_; }
      set {
        framesInvinsible_ = value;
      }
    }

    /// <summary>Field number for the "jumpStarted" field.</summary>
    public const int JumpStartedFieldNumber = 45;
    private bool jumpStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool JumpStarted {
      get { return jumpStarted_; }
      set {
        jumpStarted_ = value;
      }
    }

    /// <summary>Field number for the "framesToStartJump" field.</summary>
    public const int FramesToStartJumpFieldNumber = 46;
    private int framesToStartJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToStartJump {
      get { return framesToStartJump_; }
      set {
        framesToStartJump_ = value;
      }
    }

    /// <summary>Field number for the "repelSoftPushback" field.</summary>
    public const int RepelSoftPushbackFieldNumber = 47;
    private bool repelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RepelSoftPushback {
      get { return repelSoftPushback_; }
      set {
        repelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "publishingEvtMaskUponKilled" field.</summary>
    public const int PublishingEvtMaskUponKilledFieldNumber = 48;
    private ulong publishingEvtMaskUponKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PublishingEvtMaskUponKilled {
      get { return publishingEvtMaskUponKilled_; }
      set {
        publishingEvtMaskUponKilled_ = value;
      }
    }

    /// <summary>Field number for the "publishingToTriggerLocalIdUponKilled" field.</summary>
    public const int PublishingToTriggerLocalIdUponKilledFieldNumber = 49;
    private int publishingToTriggerLocalIdUponKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PublishingToTriggerLocalIdUponKilled {
      get { return publishingToTriggerLocalIdUponKilled_; }
      set {
        publishingToTriggerLocalIdUponKilled_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToTriggerLocalId" field.</summary>
    public const int SubscribesToTriggerLocalIdFieldNumber = 50;
    private int subscribesToTriggerLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToTriggerLocalId {
      get { return subscribesToTriggerLocalId_; }
      set {
        subscribesToTriggerLocalId_ = value;
      }
    }

    /// <summary>Field number for the "jumpHoldingRdfCnt" field.</summary>
    public const int JumpHoldingRdfCntFieldNumber = 51;
    private int jumpHoldingRdfCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JumpHoldingRdfCnt {
      get { return jumpHoldingRdfCnt_; }
      set {
        jumpHoldingRdfCnt_ = value;
      }
    }

    /// <summary>Field number for the "remainingAirJumpQuota" field.</summary>
    public const int RemainingAirJumpQuotaFieldNumber = 52;
    private uint remainingAirJumpQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RemainingAirJumpQuota {
      get { return remainingAirJumpQuota_; }
      set {
        remainingAirJumpQuota_ = value;
      }
    }

    /// <summary>Field number for the "remainingAirDashQuota" field.</summary>
    public const int RemainingAirDashQuotaFieldNumber = 53;
    private uint remainingAirDashQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RemainingAirDashQuota {
      get { return remainingAirDashQuota_; }
      set {
        remainingAirDashQuota_ = value;
      }
    }

    /// <summary>Field number for the "killedToDropConsumableSpeciesId" field.</summary>
    public const int KilledToDropConsumableSpeciesIdFieldNumber = 54;
    private uint killedToDropConsumableSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KilledToDropConsumableSpeciesId {
      get { return killedToDropConsumableSpeciesId_; }
      set {
        killedToDropConsumableSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "killedToDropBuffSpeciesId" field.</summary>
    public const int KilledToDropBuffSpeciesIdFieldNumber = 55;
    private uint killedToDropBuffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KilledToDropBuffSpeciesId {
      get { return killedToDropBuffSpeciesId_; }
      set {
        killedToDropBuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "killedToDropPickupSkillId" field.</summary>
    public const int KilledToDropPickupSkillIdFieldNumber = 56;
    private uint killedToDropPickupSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KilledToDropPickupSkillId {
      get { return killedToDropPickupSkillId_; }
      set {
        killedToDropPickupSkillId_ = value;
      }
    }

    /// <summary>Field number for the "frictionVelY" field.</summary>
    public const int FrictionVelYFieldNumber = 57;
    private int frictionVelY_;
    /// <summary>
    /// Mostly from a dynamic trap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionVelY {
      get { return frictionVelY_; }
      set {
        frictionVelY_ = value;
      }
    }

    /// <summary>Field number for the "framesSinceLastDamaged" field.</summary>
    public const int FramesSinceLastDamagedFieldNumber = 58;
    private int framesSinceLastDamaged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesSinceLastDamaged {
      get { return framesSinceLastDamaged_; }
      set {
        framesSinceLastDamaged_ = value;
      }
    }

    /// <summary>Field number for the "remainingDef1Quota" field.</summary>
    public const int RemainingDef1QuotaFieldNumber = 59;
    private uint remainingDef1Quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RemainingDef1Quota {
      get { return remainingDef1Quota_; }
      set {
        remainingDef1Quota_ = value;
      }
    }

    /// <summary>Field number for the "comboHitCnt" field.</summary>
    public const int ComboHitCntFieldNumber = 60;
    private uint comboHitCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ComboHitCnt {
      get { return comboHitCnt_; }
      set {
        comboHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "comboFramesRemained" field.</summary>
    public const int ComboFramesRemainedFieldNumber = 61;
    private int comboFramesRemained_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ComboFramesRemained {
      get { return comboFramesRemained_; }
      set {
        comboFramesRemained_ = value;
      }
    }

    /// <summary>Field number for the "damageElementalAttrs" field.</summary>
    public const int DamageElementalAttrsFieldNumber = 62;
    private uint damageElementalAttrs_;
    /// <summary>
    /// Should be cleared whenever entering a non-attacked chState
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DamageElementalAttrs {
      get { return damageElementalAttrs_; }
      set {
        damageElementalAttrs_ = value;
      }
    }

    /// <summary>Field number for the "onSlopeFacingDown" field.</summary>
    public const int OnSlopeFacingDownFieldNumber = 63;
    private bool onSlopeFacingDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnSlopeFacingDown {
      get { return onSlopeFacingDown_; }
      set {
        onSlopeFacingDown_ = value;
      }
    }

    /// <summary>Field number for the "lastDamagedByJoinIndex" field.</summary>
    public const int LastDamagedByJoinIndexFieldNumber = 64;
    private int lastDamagedByJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LastDamagedByJoinIndex {
      get { return lastDamagedByJoinIndex_; }
      set {
        lastDamagedByJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "lastDamagedByBulletTeamId" field.</summary>
    public const int LastDamagedByBulletTeamIdFieldNumber = 65;
    private int lastDamagedByBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LastDamagedByBulletTeamId {
      get { return lastDamagedByBulletTeamId_; }
      set {
        lastDamagedByBulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "activatedRdfId" field.</summary>
    public const int ActivatedRdfIdFieldNumber = 66;
    private int activatedRdfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActivatedRdfId {
      get { return activatedRdfId_; }
      set {
        activatedRdfId_ = value;
      }
    }

    /// <summary>Field number for the "cachedCueCmd" field.</summary>
    public const int CachedCueCmdFieldNumber = 67;
    private ulong cachedCueCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CachedCueCmd {
      get { return cachedCueCmd_; }
      set {
        cachedCueCmd_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillId" field.</summary>
    public const int ActiveSkillIdFieldNumber = 68;
    private uint activeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ActiveSkillId {
      get { return activeSkillId_; }
      set {
        activeSkillId_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillHit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 69;
    private int activeSkillHit_;
    /// <summary>
    /// TODO: change to 1-based in code and uint32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 70;
    private int bulletTeamId_;
    /// <summary>
    /// Kindly note that "collisionTypeMask" is NOT GRANULAR ENOUGH for inter-character collision configuration, e.g. same team omission, thus we'd still need the fields "bulletTeamId" and "chCollisionTeamId" here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "chCollisionTeamId" field.</summary>
    public const int ChCollisionTeamIdFieldNumber = 71;
    private int chCollisionTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChCollisionTeamId {
      get { return chCollisionTeamId_; }
      set {
        chCollisionTeamId_ = value;
      }
    }

    /// <summary>Field number for the "btnCHoldingRdfCount" field.</summary>
    public const int BtnCHoldingRdfCountFieldNumber = 72;
    private int btnCHoldingRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnCHoldingRdfCount {
      get { return btnCHoldingRdfCount_; }
      set {
        btnCHoldingRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "btnDHoldingRdfCount" field.</summary>
    public const int BtnDHoldingRdfCountFieldNumber = 73;
    private int btnDHoldingRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnDHoldingRdfCount {
      get { return btnDHoldingRdfCount_; }
      set {
        btnDHoldingRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "btnEHoldingRdfCount" field.</summary>
    public const int BtnEHoldingRdfCountFieldNumber = 74;
    private int btnEHoldingRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnEHoldingRdfCount {
      get { return btnEHoldingRdfCount_; }
      set {
        btnEHoldingRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "parryPrepRdfCntDown" field.</summary>
    public const int ParryPrepRdfCntDownFieldNumber = 75;
    private int parryPrepRdfCntDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParryPrepRdfCntDown {
      get { return parryPrepRdfCntDown_; }
      set {
        parryPrepRdfCntDown_ = value;
      }
    }

    /// <summary>Field number for the "mpRegenRdfCountdown" field.</summary>
    public const int MpRegenRdfCountdownFieldNumber = 76;
    private int mpRegenRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MpRegenRdfCountdown {
      get { return mpRegenRdfCountdown_; }
      set {
        mpRegenRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "flyingRdfCountdown" field.</summary>
    public const int FlyingRdfCountdownFieldNumber = 77;
    private int flyingRdfCountdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FlyingRdfCountdown {
      get { return flyingRdfCountdown_; }
      set {
        flyingRdfCountdown_ = value;
      }
    }

    /// <summary>Field number for the "lockingOnJoinIndex" field.</summary>
    public const int LockingOnJoinIndexFieldNumber = 78;
    private int lockingOnJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LockingOnJoinIndex {
      get { return lockingOnJoinIndex_; }
      set {
        lockingOnJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 90;
    private static readonly pb::FieldCodec<global::shared.Buff> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(722, global::shared.Buff.Parser);
    private readonly pbc::RepeatedField<global::shared.Buff> buffList_ = new pbc::RepeatedField<global::shared.Buff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Buff> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "debuffList" field.</summary>
    public const int DebuffListFieldNumber = 91;
    private static readonly pb::FieldCodec<global::shared.Debuff> _repeated_debuffList_codec
        = pb::FieldCodec.ForMessage(730, global::shared.Debuff.Parser);
    private readonly pbc::RepeatedField<global::shared.Debuff> debuffList_ = new pbc::RepeatedField<global::shared.Debuff>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Debuff> DebuffList {
      get { return debuffList_; }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 92;
    private global::shared.Inventory inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.Inventory Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    /// <summary>Field number for the "bulletImmuneRecords" field.</summary>
    public const int BulletImmuneRecordsFieldNumber = 93;
    private static readonly pb::FieldCodec<global::shared.BulletImmuneRecord> _repeated_bulletImmuneRecords_codec
        = pb::FieldCodec.ForMessage(746, global::shared.BulletImmuneRecord.Parser);
    private readonly pbc::RepeatedField<global::shared.BulletImmuneRecord> bulletImmuneRecords_ = new pbc::RepeatedField<global::shared.BulletImmuneRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.BulletImmuneRecord> BulletImmuneRecords {
      get { return bulletImmuneRecords_; }
    }

    /// <summary>Field number for the "kinematicKnobs" field.</summary>
    public const int KinematicKnobsFieldNumber = 94;
    private static readonly pb::FieldCodec<float> _repeated_kinematicKnobs_codec
        = pb::FieldCodec.ForFloat(754);
    private readonly pbc::RepeatedField<float> kinematicKnobs_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// including both forward-kinematics and inverse-kinematics   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> KinematicKnobs {
      get { return kinematicKnobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CharacterDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CharacterDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      if (Speed != other.Speed) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (FramesCapturedByInertia != other.FramesCapturedByInertia) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (BeatsCnt != other.BeatsCnt) return false;
      if (BeatenCnt != other.BeatenCnt) return false;
      if (Hp != other.Hp) return false;
      if (Mp != other.Mp) return false;
      if (BtnBHoldingRdfCount != other.BtnBHoldingRdfCount) return false;
      if (CharacterState != other.CharacterState) return false;
      if (FramesInChState != other.FramesInChState) return false;
      if (InAir != other.InAir) return false;
      if (JumpTriggered != other.JumpTriggered) return false;
      if (OnWall != other.OnWall) return false;
      if (OnWallNormX != other.OnWallNormX) return false;
      if (OnWallNormY != other.OnWallNormY) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (OmitSoftPushback != other.OmitSoftPushback) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (GoalAsNpc != other.GoalAsNpc) return false;
      if (RevivalVirtualGridX != other.RevivalVirtualGridX) return false;
      if (RevivalVirtualGridY != other.RevivalVirtualGridY) return false;
      if (RevivalDirX != other.RevivalDirX) return false;
      if (RevivalDirY != other.RevivalDirY) return false;
      if (OnSlope != other.OnSlope) return false;
      if (FrictionVelX != other.FrictionVelX) return false;
      if (ForcedCrouching != other.ForcedCrouching) return false;
      if (SlipJumpTriggered != other.SlipJumpTriggered) return false;
      if (PrimarilyOnSlippableHardPushback != other.PrimarilyOnSlippableHardPushback) return false;
      if (PrevWasCrouching != other.PrevWasCrouching) return false;
      if (NewBirth != other.NewBirth) return false;
      if (FramesInvinsible != other.FramesInvinsible) return false;
      if (JumpStarted != other.JumpStarted) return false;
      if (FramesToStartJump != other.FramesToStartJump) return false;
      if (RepelSoftPushback != other.RepelSoftPushback) return false;
      if (PublishingEvtMaskUponKilled != other.PublishingEvtMaskUponKilled) return false;
      if (PublishingToTriggerLocalIdUponKilled != other.PublishingToTriggerLocalIdUponKilled) return false;
      if (SubscribesToTriggerLocalId != other.SubscribesToTriggerLocalId) return false;
      if (JumpHoldingRdfCnt != other.JumpHoldingRdfCnt) return false;
      if (RemainingAirJumpQuota != other.RemainingAirJumpQuota) return false;
      if (RemainingAirDashQuota != other.RemainingAirDashQuota) return false;
      if (KilledToDropConsumableSpeciesId != other.KilledToDropConsumableSpeciesId) return false;
      if (KilledToDropBuffSpeciesId != other.KilledToDropBuffSpeciesId) return false;
      if (KilledToDropPickupSkillId != other.KilledToDropPickupSkillId) return false;
      if (FrictionVelY != other.FrictionVelY) return false;
      if (FramesSinceLastDamaged != other.FramesSinceLastDamaged) return false;
      if (RemainingDef1Quota != other.RemainingDef1Quota) return false;
      if (ComboHitCnt != other.ComboHitCnt) return false;
      if (ComboFramesRemained != other.ComboFramesRemained) return false;
      if (DamageElementalAttrs != other.DamageElementalAttrs) return false;
      if (OnSlopeFacingDown != other.OnSlopeFacingDown) return false;
      if (LastDamagedByJoinIndex != other.LastDamagedByJoinIndex) return false;
      if (LastDamagedByBulletTeamId != other.LastDamagedByBulletTeamId) return false;
      if (ActivatedRdfId != other.ActivatedRdfId) return false;
      if (CachedCueCmd != other.CachedCueCmd) return false;
      if (ActiveSkillId != other.ActiveSkillId) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (ChCollisionTeamId != other.ChCollisionTeamId) return false;
      if (BtnCHoldingRdfCount != other.BtnCHoldingRdfCount) return false;
      if (BtnDHoldingRdfCount != other.BtnDHoldingRdfCount) return false;
      if (BtnEHoldingRdfCount != other.BtnEHoldingRdfCount) return false;
      if (ParryPrepRdfCntDown != other.ParryPrepRdfCntDown) return false;
      if (MpRegenRdfCountdown != other.MpRegenRdfCountdown) return false;
      if (FlyingRdfCountdown != other.FlyingRdfCountdown) return false;
      if (LockingOnJoinIndex != other.LockingOnJoinIndex) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      if(!debuffList_.Equals(other.debuffList_)) return false;
      if (!object.Equals(Inventory, other.Inventory)) return false;
      if(!bulletImmuneRecords_.Equals(other.bulletImmuneRecords_)) return false;
      if(!kinematicKnobs_.Equals(other.kinematicKnobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (FramesCapturedByInertia != 0) hash ^= FramesCapturedByInertia.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (BeatsCnt != 0) hash ^= BeatsCnt.GetHashCode();
      if (BeatenCnt != 0) hash ^= BeatenCnt.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (BtnBHoldingRdfCount != 0) hash ^= BtnBHoldingRdfCount.GetHashCode();
      if (CharacterState != global::shared.CharacterState.Idle1) hash ^= CharacterState.GetHashCode();
      if (FramesInChState != 0) hash ^= FramesInChState.GetHashCode();
      if (InAir != false) hash ^= InAir.GetHashCode();
      if (JumpTriggered != false) hash ^= JumpTriggered.GetHashCode();
      if (OnWall != false) hash ^= OnWall.GetHashCode();
      if (OnWallNormX != 0) hash ^= OnWallNormX.GetHashCode();
      if (OnWallNormY != 0) hash ^= OnWallNormY.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (OmitSoftPushback != false) hash ^= OmitSoftPushback.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (GoalAsNpc != global::shared.NpcGoal.Nidle) hash ^= GoalAsNpc.GetHashCode();
      if (RevivalVirtualGridX != 0) hash ^= RevivalVirtualGridX.GetHashCode();
      if (RevivalVirtualGridY != 0) hash ^= RevivalVirtualGridY.GetHashCode();
      if (RevivalDirX != 0) hash ^= RevivalDirX.GetHashCode();
      if (RevivalDirY != 0) hash ^= RevivalDirY.GetHashCode();
      if (OnSlope != false) hash ^= OnSlope.GetHashCode();
      if (FrictionVelX != 0) hash ^= FrictionVelX.GetHashCode();
      if (ForcedCrouching != false) hash ^= ForcedCrouching.GetHashCode();
      if (SlipJumpTriggered != false) hash ^= SlipJumpTriggered.GetHashCode();
      if (PrimarilyOnSlippableHardPushback != false) hash ^= PrimarilyOnSlippableHardPushback.GetHashCode();
      if (PrevWasCrouching != false) hash ^= PrevWasCrouching.GetHashCode();
      if (NewBirth != false) hash ^= NewBirth.GetHashCode();
      if (FramesInvinsible != 0) hash ^= FramesInvinsible.GetHashCode();
      if (JumpStarted != false) hash ^= JumpStarted.GetHashCode();
      if (FramesToStartJump != 0) hash ^= FramesToStartJump.GetHashCode();
      if (RepelSoftPushback != false) hash ^= RepelSoftPushback.GetHashCode();
      if (PublishingEvtMaskUponKilled != 0UL) hash ^= PublishingEvtMaskUponKilled.GetHashCode();
      if (PublishingToTriggerLocalIdUponKilled != 0) hash ^= PublishingToTriggerLocalIdUponKilled.GetHashCode();
      if (SubscribesToTriggerLocalId != 0) hash ^= SubscribesToTriggerLocalId.GetHashCode();
      if (JumpHoldingRdfCnt != 0) hash ^= JumpHoldingRdfCnt.GetHashCode();
      if (RemainingAirJumpQuota != 0) hash ^= RemainingAirJumpQuota.GetHashCode();
      if (RemainingAirDashQuota != 0) hash ^= RemainingAirDashQuota.GetHashCode();
      if (KilledToDropConsumableSpeciesId != 0) hash ^= KilledToDropConsumableSpeciesId.GetHashCode();
      if (KilledToDropBuffSpeciesId != 0) hash ^= KilledToDropBuffSpeciesId.GetHashCode();
      if (KilledToDropPickupSkillId != 0) hash ^= KilledToDropPickupSkillId.GetHashCode();
      if (FrictionVelY != 0) hash ^= FrictionVelY.GetHashCode();
      if (FramesSinceLastDamaged != 0) hash ^= FramesSinceLastDamaged.GetHashCode();
      if (RemainingDef1Quota != 0) hash ^= RemainingDef1Quota.GetHashCode();
      if (ComboHitCnt != 0) hash ^= ComboHitCnt.GetHashCode();
      if (ComboFramesRemained != 0) hash ^= ComboFramesRemained.GetHashCode();
      if (DamageElementalAttrs != 0) hash ^= DamageElementalAttrs.GetHashCode();
      if (OnSlopeFacingDown != false) hash ^= OnSlopeFacingDown.GetHashCode();
      if (LastDamagedByJoinIndex != 0) hash ^= LastDamagedByJoinIndex.GetHashCode();
      if (LastDamagedByBulletTeamId != 0) hash ^= LastDamagedByBulletTeamId.GetHashCode();
      if (ActivatedRdfId != 0) hash ^= ActivatedRdfId.GetHashCode();
      if (CachedCueCmd != 0UL) hash ^= CachedCueCmd.GetHashCode();
      if (ActiveSkillId != 0) hash ^= ActiveSkillId.GetHashCode();
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (ChCollisionTeamId != 0) hash ^= ChCollisionTeamId.GetHashCode();
      if (BtnCHoldingRdfCount != 0) hash ^= BtnCHoldingRdfCount.GetHashCode();
      if (BtnDHoldingRdfCount != 0) hash ^= BtnDHoldingRdfCount.GetHashCode();
      if (BtnEHoldingRdfCount != 0) hash ^= BtnEHoldingRdfCount.GetHashCode();
      if (ParryPrepRdfCntDown != 0) hash ^= ParryPrepRdfCntDown.GetHashCode();
      if (MpRegenRdfCountdown != 0) hash ^= MpRegenRdfCountdown.GetHashCode();
      if (FlyingRdfCountdown != 0) hash ^= FlyingRdfCountdown.GetHashCode();
      if (LockingOnJoinIndex != 0) hash ^= LockingOnJoinIndex.GetHashCode();
      hash ^= buffList_.GetHashCode();
      hash ^= debuffList_.GetHashCode();
      if (inventory_ != null) hash ^= Inventory.GetHashCode();
      hash ^= bulletImmuneRecords_.GetHashCode();
      hash ^= kinematicKnobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelY);
      }
      if (Speed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Speed);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SpeciesId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JoinIndex);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(104);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BeatenCnt);
      }
      if (Hp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Mp);
      }
      if (BtnBHoldingRdfCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BtnBHoldingRdfCount);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CharacterState);
      }
      if (FramesInChState != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FramesInChState);
      }
      if (InAir != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(InAir);
      }
      if (JumpTriggered != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(JumpTriggered);
      }
      if (OnWall != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OnWall);
      }
      if (OnWallNormX != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(OnWallNormY);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(OmitGravity);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(OmitSoftPushback);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (GoalAsNpc != global::shared.NpcGoal.Nidle) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) GoalAsNpc);
      }
      if (RevivalVirtualGridX != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RevivalDirY);
      }
      if (OnSlope != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnSlope);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ForcedCrouching);
      }
      if (SlipJumpTriggered != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(SlipJumpTriggered);
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(PrimarilyOnSlippableHardPushback);
      }
      if (PrevWasCrouching != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PrevWasCrouching);
      }
      if (NewBirth != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(NewBirth);
      }
      if (FramesInvinsible != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(FramesInvinsible);
      }
      if (JumpStarted != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(JumpStarted);
      }
      if (FramesToStartJump != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(FramesToStartJump);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(RepelSoftPushback);
      }
      if (PublishingEvtMaskUponKilled != 0UL) {
        output.WriteRawTag(128, 3);
        output.WriteUInt64(PublishingEvtMaskUponKilled);
      }
      if (PublishingToTriggerLocalIdUponKilled != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(PublishingToTriggerLocalIdUponKilled);
      }
      if (SubscribesToTriggerLocalId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(SubscribesToTriggerLocalId);
      }
      if (JumpHoldingRdfCnt != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(JumpHoldingRdfCnt);
      }
      if (RemainingAirJumpQuota != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(RemainingAirJumpQuota);
      }
      if (RemainingAirDashQuota != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(RemainingAirDashQuota);
      }
      if (KilledToDropConsumableSpeciesId != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(KilledToDropConsumableSpeciesId);
      }
      if (KilledToDropBuffSpeciesId != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(KilledToDropBuffSpeciesId);
      }
      if (KilledToDropPickupSkillId != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(KilledToDropPickupSkillId);
      }
      if (FrictionVelY != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(FrictionVelY);
      }
      if (FramesSinceLastDamaged != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(FramesSinceLastDamaged);
      }
      if (RemainingDef1Quota != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(RemainingDef1Quota);
      }
      if (ComboHitCnt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(ComboHitCnt);
      }
      if (ComboFramesRemained != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ComboFramesRemained);
      }
      if (DamageElementalAttrs != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(DamageElementalAttrs);
      }
      if (OnSlopeFacingDown != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(OnSlopeFacingDown);
      }
      if (LastDamagedByJoinIndex != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(LastDamagedByJoinIndex);
      }
      if (LastDamagedByBulletTeamId != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(LastDamagedByBulletTeamId);
      }
      if (ActivatedRdfId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ActivatedRdfId);
      }
      if (CachedCueCmd != 0UL) {
        output.WriteRawTag(152, 4);
        output.WriteUInt64(CachedCueCmd);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ActiveSkillHit);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (BtnCHoldingRdfCount != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(BtnCHoldingRdfCount);
      }
      if (BtnDHoldingRdfCount != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(BtnDHoldingRdfCount);
      }
      if (BtnEHoldingRdfCount != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(BtnEHoldingRdfCount);
      }
      if (ParryPrepRdfCntDown != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ParryPrepRdfCntDown);
      }
      if (MpRegenRdfCountdown != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(MpRegenRdfCountdown);
      }
      if (FlyingRdfCountdown != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(FlyingRdfCountdown);
      }
      if (LockingOnJoinIndex != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(LockingOnJoinIndex);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      debuffList_.WriteTo(output, _repeated_debuffList_codec);
      if (inventory_ != null) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(Inventory);
      }
      bulletImmuneRecords_.WriteTo(output, _repeated_bulletImmuneRecords_codec);
      kinematicKnobs_.WriteTo(output, _repeated_kinematicKnobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelY);
      }
      if (Speed != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Speed);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SpeciesId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JoinIndex);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(104);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BeatenCnt);
      }
      if (Hp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Hp);
      }
      if (Mp != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Mp);
      }
      if (BtnBHoldingRdfCount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(BtnBHoldingRdfCount);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) CharacterState);
      }
      if (FramesInChState != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FramesInChState);
      }
      if (InAir != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(InAir);
      }
      if (JumpTriggered != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(JumpTriggered);
      }
      if (OnWall != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OnWall);
      }
      if (OnWallNormX != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(OnWallNormY);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(OmitGravity);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(OmitSoftPushback);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (GoalAsNpc != global::shared.NpcGoal.Nidle) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) GoalAsNpc);
      }
      if (RevivalVirtualGridX != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(RevivalDirY);
      }
      if (OnSlope != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnSlope);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ForcedCrouching);
      }
      if (SlipJumpTriggered != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(SlipJumpTriggered);
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(PrimarilyOnSlippableHardPushback);
      }
      if (PrevWasCrouching != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(PrevWasCrouching);
      }
      if (NewBirth != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(NewBirth);
      }
      if (FramesInvinsible != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(FramesInvinsible);
      }
      if (JumpStarted != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(JumpStarted);
      }
      if (FramesToStartJump != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(FramesToStartJump);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(RepelSoftPushback);
      }
      if (PublishingEvtMaskUponKilled != 0UL) {
        output.WriteRawTag(128, 3);
        output.WriteUInt64(PublishingEvtMaskUponKilled);
      }
      if (PublishingToTriggerLocalIdUponKilled != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(PublishingToTriggerLocalIdUponKilled);
      }
      if (SubscribesToTriggerLocalId != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(SubscribesToTriggerLocalId);
      }
      if (JumpHoldingRdfCnt != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(JumpHoldingRdfCnt);
      }
      if (RemainingAirJumpQuota != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(RemainingAirJumpQuota);
      }
      if (RemainingAirDashQuota != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(RemainingAirDashQuota);
      }
      if (KilledToDropConsumableSpeciesId != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(KilledToDropConsumableSpeciesId);
      }
      if (KilledToDropBuffSpeciesId != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(KilledToDropBuffSpeciesId);
      }
      if (KilledToDropPickupSkillId != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(KilledToDropPickupSkillId);
      }
      if (FrictionVelY != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(FrictionVelY);
      }
      if (FramesSinceLastDamaged != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(FramesSinceLastDamaged);
      }
      if (RemainingDef1Quota != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(RemainingDef1Quota);
      }
      if (ComboHitCnt != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(ComboHitCnt);
      }
      if (ComboFramesRemained != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(ComboFramesRemained);
      }
      if (DamageElementalAttrs != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(DamageElementalAttrs);
      }
      if (OnSlopeFacingDown != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(OnSlopeFacingDown);
      }
      if (LastDamagedByJoinIndex != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(LastDamagedByJoinIndex);
      }
      if (LastDamagedByBulletTeamId != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(LastDamagedByBulletTeamId);
      }
      if (ActivatedRdfId != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(ActivatedRdfId);
      }
      if (CachedCueCmd != 0UL) {
        output.WriteRawTag(152, 4);
        output.WriteUInt64(CachedCueCmd);
      }
      if (ActiveSkillId != 0) {
        output.WriteRawTag(160, 4);
        output.WriteUInt32(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(ActiveSkillHit);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(ChCollisionTeamId);
      }
      if (BtnCHoldingRdfCount != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(BtnCHoldingRdfCount);
      }
      if (BtnDHoldingRdfCount != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(BtnDHoldingRdfCount);
      }
      if (BtnEHoldingRdfCount != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(BtnEHoldingRdfCount);
      }
      if (ParryPrepRdfCntDown != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(ParryPrepRdfCntDown);
      }
      if (MpRegenRdfCountdown != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(MpRegenRdfCountdown);
      }
      if (FlyingRdfCountdown != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(FlyingRdfCountdown);
      }
      if (LockingOnJoinIndex != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(LockingOnJoinIndex);
      }
      buffList_.WriteTo(ref output, _repeated_buffList_codec);
      debuffList_.WriteTo(ref output, _repeated_debuffList_codec);
      if (inventory_ != null) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(Inventory);
      }
      bulletImmuneRecords_.WriteTo(ref output, _repeated_bulletImmuneRecords_codec);
      kinematicKnobs_.WriteTo(ref output, _repeated_kinematicKnobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (FramesCapturedByInertia != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesCapturedByInertia);
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (BeatsCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeatsCnt);
      }
      if (BeatenCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BeatenCnt);
      }
      if (Hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Mp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (BtnBHoldingRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnBHoldingRdfCount);
      }
      if (CharacterState != global::shared.CharacterState.Idle1) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CharacterState);
      }
      if (FramesInChState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInChState);
      }
      if (InAir != false) {
        size += 2 + 1;
      }
      if (JumpTriggered != false) {
        size += 2 + 1;
      }
      if (OnWall != false) {
        size += 2 + 1;
      }
      if (OnWallNormX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OnWallNormX);
      }
      if (OnWallNormY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OnWallNormY);
      }
      if (OmitGravity != false) {
        size += 2 + 1;
      }
      if (OmitSoftPushback != false) {
        size += 2 + 1;
      }
      if (WaivingPatrolCueId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (GoalAsNpc != global::shared.NpcGoal.Nidle) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GoalAsNpc);
      }
      if (RevivalVirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalVirtualGridX);
      }
      if (RevivalVirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalVirtualGridY);
      }
      if (RevivalDirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirX);
      }
      if (RevivalDirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RevivalDirY);
      }
      if (OnSlope != false) {
        size += 2 + 1;
      }
      if (FrictionVelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelX);
      }
      if (ForcedCrouching != false) {
        size += 2 + 1;
      }
      if (SlipJumpTriggered != false) {
        size += 2 + 1;
      }
      if (PrimarilyOnSlippableHardPushback != false) {
        size += 2 + 1;
      }
      if (PrevWasCrouching != false) {
        size += 2 + 1;
      }
      if (NewBirth != false) {
        size += 2 + 1;
      }
      if (FramesInvinsible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesInvinsible);
      }
      if (JumpStarted != false) {
        size += 2 + 1;
      }
      if (FramesToStartJump != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesToStartJump);
      }
      if (RepelSoftPushback != false) {
        size += 2 + 1;
      }
      if (PublishingEvtMaskUponKilled != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PublishingEvtMaskUponKilled);
      }
      if (PublishingToTriggerLocalIdUponKilled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PublishingToTriggerLocalIdUponKilled);
      }
      if (SubscribesToTriggerLocalId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToTriggerLocalId);
      }
      if (JumpHoldingRdfCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpHoldingRdfCnt);
      }
      if (RemainingAirJumpQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingAirJumpQuota);
      }
      if (RemainingAirDashQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingAirDashQuota);
      }
      if (KilledToDropConsumableSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropConsumableSpeciesId);
      }
      if (KilledToDropBuffSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropBuffSpeciesId);
      }
      if (KilledToDropPickupSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KilledToDropPickupSkillId);
      }
      if (FrictionVelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelY);
      }
      if (FramesSinceLastDamaged != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FramesSinceLastDamaged);
      }
      if (RemainingDef1Quota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemainingDef1Quota);
      }
      if (ComboHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ComboHitCnt);
      }
      if (ComboFramesRemained != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ComboFramesRemained);
      }
      if (DamageElementalAttrs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DamageElementalAttrs);
      }
      if (OnSlopeFacingDown != false) {
        size += 2 + 1;
      }
      if (LastDamagedByJoinIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastDamagedByJoinIndex);
      }
      if (LastDamagedByBulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastDamagedByBulletTeamId);
      }
      if (ActivatedRdfId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActivatedRdfId);
      }
      if (CachedCueCmd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CachedCueCmd);
      }
      if (ActiveSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ActiveSkillId);
      }
      if (ActiveSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (BulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (ChCollisionTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChCollisionTeamId);
      }
      if (BtnCHoldingRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnCHoldingRdfCount);
      }
      if (BtnDHoldingRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnDHoldingRdfCount);
      }
      if (BtnEHoldingRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BtnEHoldingRdfCount);
      }
      if (ParryPrepRdfCntDown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParryPrepRdfCntDown);
      }
      if (MpRegenRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MpRegenRdfCountdown);
      }
      if (FlyingRdfCountdown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FlyingRdfCountdown);
      }
      if (LockingOnJoinIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LockingOnJoinIndex);
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      size += debuffList_.CalculateSize(_repeated_debuffList_codec);
      if (inventory_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Inventory);
      }
      size += bulletImmuneRecords_.CalculateSize(_repeated_bulletImmuneRecords_codec);
      size += kinematicKnobs_.CalculateSize(_repeated_kinematicKnobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CharacterDownsync other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.FramesCapturedByInertia != 0) {
        FramesCapturedByInertia = other.FramesCapturedByInertia;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.BeatsCnt != 0) {
        BeatsCnt = other.BeatsCnt;
      }
      if (other.BeatenCnt != 0) {
        BeatenCnt = other.BeatenCnt;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.BtnBHoldingRdfCount != 0) {
        BtnBHoldingRdfCount = other.BtnBHoldingRdfCount;
      }
      if (other.CharacterState != global::shared.CharacterState.Idle1) {
        CharacterState = other.CharacterState;
      }
      if (other.FramesInChState != 0) {
        FramesInChState = other.FramesInChState;
      }
      if (other.InAir != false) {
        InAir = other.InAir;
      }
      if (other.JumpTriggered != false) {
        JumpTriggered = other.JumpTriggered;
      }
      if (other.OnWall != false) {
        OnWall = other.OnWall;
      }
      if (other.OnWallNormX != 0) {
        OnWallNormX = other.OnWallNormX;
      }
      if (other.OnWallNormY != 0) {
        OnWallNormY = other.OnWallNormY;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.OmitSoftPushback != false) {
        OmitSoftPushback = other.OmitSoftPushback;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.GoalAsNpc != global::shared.NpcGoal.Nidle) {
        GoalAsNpc = other.GoalAsNpc;
      }
      if (other.RevivalVirtualGridX != 0) {
        RevivalVirtualGridX = other.RevivalVirtualGridX;
      }
      if (other.RevivalVirtualGridY != 0) {
        RevivalVirtualGridY = other.RevivalVirtualGridY;
      }
      if (other.RevivalDirX != 0) {
        RevivalDirX = other.RevivalDirX;
      }
      if (other.RevivalDirY != 0) {
        RevivalDirY = other.RevivalDirY;
      }
      if (other.OnSlope != false) {
        OnSlope = other.OnSlope;
      }
      if (other.FrictionVelX != 0) {
        FrictionVelX = other.FrictionVelX;
      }
      if (other.ForcedCrouching != false) {
        ForcedCrouching = other.ForcedCrouching;
      }
      if (other.SlipJumpTriggered != false) {
        SlipJumpTriggered = other.SlipJumpTriggered;
      }
      if (other.PrimarilyOnSlippableHardPushback != false) {
        PrimarilyOnSlippableHardPushback = other.PrimarilyOnSlippableHardPushback;
      }
      if (other.PrevWasCrouching != false) {
        PrevWasCrouching = other.PrevWasCrouching;
      }
      if (other.NewBirth != false) {
        NewBirth = other.NewBirth;
      }
      if (other.FramesInvinsible != 0) {
        FramesInvinsible = other.FramesInvinsible;
      }
      if (other.JumpStarted != false) {
        JumpStarted = other.JumpStarted;
      }
      if (other.FramesToStartJump != 0) {
        FramesToStartJump = other.FramesToStartJump;
      }
      if (other.RepelSoftPushback != false) {
        RepelSoftPushback = other.RepelSoftPushback;
      }
      if (other.PublishingEvtMaskUponKilled != 0UL) {
        PublishingEvtMaskUponKilled = other.PublishingEvtMaskUponKilled;
      }
      if (other.PublishingToTriggerLocalIdUponKilled != 0) {
        PublishingToTriggerLocalIdUponKilled = other.PublishingToTriggerLocalIdUponKilled;
      }
      if (other.SubscribesToTriggerLocalId != 0) {
        SubscribesToTriggerLocalId = other.SubscribesToTriggerLocalId;
      }
      if (other.JumpHoldingRdfCnt != 0) {
        JumpHoldingRdfCnt = other.JumpHoldingRdfCnt;
      }
      if (other.RemainingAirJumpQuota != 0) {
        RemainingAirJumpQuota = other.RemainingAirJumpQuota;
      }
      if (other.RemainingAirDashQuota != 0) {
        RemainingAirDashQuota = other.RemainingAirDashQuota;
      }
      if (other.KilledToDropConsumableSpeciesId != 0) {
        KilledToDropConsumableSpeciesId = other.KilledToDropConsumableSpeciesId;
      }
      if (other.KilledToDropBuffSpeciesId != 0) {
        KilledToDropBuffSpeciesId = other.KilledToDropBuffSpeciesId;
      }
      if (other.KilledToDropPickupSkillId != 0) {
        KilledToDropPickupSkillId = other.KilledToDropPickupSkillId;
      }
      if (other.FrictionVelY != 0) {
        FrictionVelY = other.FrictionVelY;
      }
      if (other.FramesSinceLastDamaged != 0) {
        FramesSinceLastDamaged = other.FramesSinceLastDamaged;
      }
      if (other.RemainingDef1Quota != 0) {
        RemainingDef1Quota = other.RemainingDef1Quota;
      }
      if (other.ComboHitCnt != 0) {
        ComboHitCnt = other.ComboHitCnt;
      }
      if (other.ComboFramesRemained != 0) {
        ComboFramesRemained = other.ComboFramesRemained;
      }
      if (other.DamageElementalAttrs != 0) {
        DamageElementalAttrs = other.DamageElementalAttrs;
      }
      if (other.OnSlopeFacingDown != false) {
        OnSlopeFacingDown = other.OnSlopeFacingDown;
      }
      if (other.LastDamagedByJoinIndex != 0) {
        LastDamagedByJoinIndex = other.LastDamagedByJoinIndex;
      }
      if (other.LastDamagedByBulletTeamId != 0) {
        LastDamagedByBulletTeamId = other.LastDamagedByBulletTeamId;
      }
      if (other.ActivatedRdfId != 0) {
        ActivatedRdfId = other.ActivatedRdfId;
      }
      if (other.CachedCueCmd != 0UL) {
        CachedCueCmd = other.CachedCueCmd;
      }
      if (other.ActiveSkillId != 0) {
        ActiveSkillId = other.ActiveSkillId;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.ChCollisionTeamId != 0) {
        ChCollisionTeamId = other.ChCollisionTeamId;
      }
      if (other.BtnCHoldingRdfCount != 0) {
        BtnCHoldingRdfCount = other.BtnCHoldingRdfCount;
      }
      if (other.BtnDHoldingRdfCount != 0) {
        BtnDHoldingRdfCount = other.BtnDHoldingRdfCount;
      }
      if (other.BtnEHoldingRdfCount != 0) {
        BtnEHoldingRdfCount = other.BtnEHoldingRdfCount;
      }
      if (other.ParryPrepRdfCntDown != 0) {
        ParryPrepRdfCntDown = other.ParryPrepRdfCntDown;
      }
      if (other.MpRegenRdfCountdown != 0) {
        MpRegenRdfCountdown = other.MpRegenRdfCountdown;
      }
      if (other.FlyingRdfCountdown != 0) {
        FlyingRdfCountdown = other.FlyingRdfCountdown;
      }
      if (other.LockingOnJoinIndex != 0) {
        LockingOnJoinIndex = other.LockingOnJoinIndex;
      }
      buffList_.Add(other.buffList_);
      debuffList_.Add(other.debuffList_);
      if (other.inventory_ != null) {
        if (inventory_ == null) {
          Inventory = new global::shared.Inventory();
        }
        Inventory.MergeFrom(other.Inventory);
      }
      bulletImmuneRecords_.Add(other.bulletImmuneRecords_);
      kinematicKnobs_.Add(other.kinematicKnobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            VelX = input.ReadInt32();
            break;
          }
          case 56: {
            VelY = input.ReadInt32();
            break;
          }
          case 64: {
            Speed = input.ReadInt32();
            break;
          }
          case 72: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 80: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 88: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 96: {
            FramesCapturedByInertia = input.ReadInt32();
            break;
          }
          case 104: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 112: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 120: {
            BeatsCnt = input.ReadUInt32();
            break;
          }
          case 128: {
            BeatenCnt = input.ReadUInt32();
            break;
          }
          case 136: {
            Hp = input.ReadInt32();
            break;
          }
          case 144: {
            Mp = input.ReadInt32();
            break;
          }
          case 152: {
            BtnBHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 176: {
            CharacterState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 184: {
            FramesInChState = input.ReadInt32();
            break;
          }
          case 192: {
            InAir = input.ReadBool();
            break;
          }
          case 200: {
            JumpTriggered = input.ReadBool();
            break;
          }
          case 208: {
            OnWall = input.ReadBool();
            break;
          }
          case 216: {
            OnWallNormX = input.ReadInt32();
            break;
          }
          case 224: {
            OnWallNormY = input.ReadInt32();
            break;
          }
          case 232: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 240: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 248: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 256: {
            GoalAsNpc = (global::shared.NpcGoal) input.ReadEnum();
            break;
          }
          case 264: {
            RevivalVirtualGridX = input.ReadInt32();
            break;
          }
          case 272: {
            RevivalVirtualGridY = input.ReadInt32();
            break;
          }
          case 280: {
            RevivalDirX = input.ReadInt32();
            break;
          }
          case 288: {
            RevivalDirY = input.ReadInt32();
            break;
          }
          case 296: {
            OnSlope = input.ReadBool();
            break;
          }
          case 304: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 312: {
            ForcedCrouching = input.ReadBool();
            break;
          }
          case 320: {
            SlipJumpTriggered = input.ReadBool();
            break;
          }
          case 328: {
            PrimarilyOnSlippableHardPushback = input.ReadBool();
            break;
          }
          case 336: {
            PrevWasCrouching = input.ReadBool();
            break;
          }
          case 344: {
            NewBirth = input.ReadBool();
            break;
          }
          case 352: {
            FramesInvinsible = input.ReadInt32();
            break;
          }
          case 360: {
            JumpStarted = input.ReadBool();
            break;
          }
          case 368: {
            FramesToStartJump = input.ReadInt32();
            break;
          }
          case 376: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 384: {
            PublishingEvtMaskUponKilled = input.ReadUInt64();
            break;
          }
          case 392: {
            PublishingToTriggerLocalIdUponKilled = input.ReadInt32();
            break;
          }
          case 400: {
            SubscribesToTriggerLocalId = input.ReadInt32();
            break;
          }
          case 408: {
            JumpHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 416: {
            RemainingAirJumpQuota = input.ReadUInt32();
            break;
          }
          case 424: {
            RemainingAirDashQuota = input.ReadUInt32();
            break;
          }
          case 432: {
            KilledToDropConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 440: {
            KilledToDropBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 448: {
            KilledToDropPickupSkillId = input.ReadUInt32();
            break;
          }
          case 456: {
            FrictionVelY = input.ReadInt32();
            break;
          }
          case 464: {
            FramesSinceLastDamaged = input.ReadInt32();
            break;
          }
          case 472: {
            RemainingDef1Quota = input.ReadUInt32();
            break;
          }
          case 480: {
            ComboHitCnt = input.ReadUInt32();
            break;
          }
          case 488: {
            ComboFramesRemained = input.ReadInt32();
            break;
          }
          case 496: {
            DamageElementalAttrs = input.ReadUInt32();
            break;
          }
          case 504: {
            OnSlopeFacingDown = input.ReadBool();
            break;
          }
          case 512: {
            LastDamagedByJoinIndex = input.ReadInt32();
            break;
          }
          case 520: {
            LastDamagedByBulletTeamId = input.ReadInt32();
            break;
          }
          case 528: {
            ActivatedRdfId = input.ReadInt32();
            break;
          }
          case 536: {
            CachedCueCmd = input.ReadUInt64();
            break;
          }
          case 544: {
            ActiveSkillId = input.ReadUInt32();
            break;
          }
          case 552: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 560: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 568: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 576: {
            BtnCHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 584: {
            BtnDHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 592: {
            BtnEHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 600: {
            ParryPrepRdfCntDown = input.ReadInt32();
            break;
          }
          case 608: {
            MpRegenRdfCountdown = input.ReadInt32();
            break;
          }
          case 616: {
            FlyingRdfCountdown = input.ReadInt32();
            break;
          }
          case 624: {
            LockingOnJoinIndex = input.ReadInt32();
            break;
          }
          case 722: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 730: {
            debuffList_.AddEntriesFrom(input, _repeated_debuffList_codec);
            break;
          }
          case 738: {
            if (inventory_ == null) {
              Inventory = new global::shared.Inventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
          case 746: {
            bulletImmuneRecords_.AddEntriesFrom(input, _repeated_bulletImmuneRecords_codec);
            break;
          }
          case 754:
          case 757: {
            kinematicKnobs_.AddEntriesFrom(input, _repeated_kinematicKnobs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 48: {
            VelX = input.ReadInt32();
            break;
          }
          case 56: {
            VelY = input.ReadInt32();
            break;
          }
          case 64: {
            Speed = input.ReadInt32();
            break;
          }
          case 72: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 80: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 88: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 96: {
            FramesCapturedByInertia = input.ReadInt32();
            break;
          }
          case 104: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 112: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 120: {
            BeatsCnt = input.ReadUInt32();
            break;
          }
          case 128: {
            BeatenCnt = input.ReadUInt32();
            break;
          }
          case 136: {
            Hp = input.ReadInt32();
            break;
          }
          case 144: {
            Mp = input.ReadInt32();
            break;
          }
          case 152: {
            BtnBHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 176: {
            CharacterState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 184: {
            FramesInChState = input.ReadInt32();
            break;
          }
          case 192: {
            InAir = input.ReadBool();
            break;
          }
          case 200: {
            JumpTriggered = input.ReadBool();
            break;
          }
          case 208: {
            OnWall = input.ReadBool();
            break;
          }
          case 216: {
            OnWallNormX = input.ReadInt32();
            break;
          }
          case 224: {
            OnWallNormY = input.ReadInt32();
            break;
          }
          case 232: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 240: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 248: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 256: {
            GoalAsNpc = (global::shared.NpcGoal) input.ReadEnum();
            break;
          }
          case 264: {
            RevivalVirtualGridX = input.ReadInt32();
            break;
          }
          case 272: {
            RevivalVirtualGridY = input.ReadInt32();
            break;
          }
          case 280: {
            RevivalDirX = input.ReadInt32();
            break;
          }
          case 288: {
            RevivalDirY = input.ReadInt32();
            break;
          }
          case 296: {
            OnSlope = input.ReadBool();
            break;
          }
          case 304: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 312: {
            ForcedCrouching = input.ReadBool();
            break;
          }
          case 320: {
            SlipJumpTriggered = input.ReadBool();
            break;
          }
          case 328: {
            PrimarilyOnSlippableHardPushback = input.ReadBool();
            break;
          }
          case 336: {
            PrevWasCrouching = input.ReadBool();
            break;
          }
          case 344: {
            NewBirth = input.ReadBool();
            break;
          }
          case 352: {
            FramesInvinsible = input.ReadInt32();
            break;
          }
          case 360: {
            JumpStarted = input.ReadBool();
            break;
          }
          case 368: {
            FramesToStartJump = input.ReadInt32();
            break;
          }
          case 376: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 384: {
            PublishingEvtMaskUponKilled = input.ReadUInt64();
            break;
          }
          case 392: {
            PublishingToTriggerLocalIdUponKilled = input.ReadInt32();
            break;
          }
          case 400: {
            SubscribesToTriggerLocalId = input.ReadInt32();
            break;
          }
          case 408: {
            JumpHoldingRdfCnt = input.ReadInt32();
            break;
          }
          case 416: {
            RemainingAirJumpQuota = input.ReadUInt32();
            break;
          }
          case 424: {
            RemainingAirDashQuota = input.ReadUInt32();
            break;
          }
          case 432: {
            KilledToDropConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 440: {
            KilledToDropBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 448: {
            KilledToDropPickupSkillId = input.ReadUInt32();
            break;
          }
          case 456: {
            FrictionVelY = input.ReadInt32();
            break;
          }
          case 464: {
            FramesSinceLastDamaged = input.ReadInt32();
            break;
          }
          case 472: {
            RemainingDef1Quota = input.ReadUInt32();
            break;
          }
          case 480: {
            ComboHitCnt = input.ReadUInt32();
            break;
          }
          case 488: {
            ComboFramesRemained = input.ReadInt32();
            break;
          }
          case 496: {
            DamageElementalAttrs = input.ReadUInt32();
            break;
          }
          case 504: {
            OnSlopeFacingDown = input.ReadBool();
            break;
          }
          case 512: {
            LastDamagedByJoinIndex = input.ReadInt32();
            break;
          }
          case 520: {
            LastDamagedByBulletTeamId = input.ReadInt32();
            break;
          }
          case 528: {
            ActivatedRdfId = input.ReadInt32();
            break;
          }
          case 536: {
            CachedCueCmd = input.ReadUInt64();
            break;
          }
          case 544: {
            ActiveSkillId = input.ReadUInt32();
            break;
          }
          case 552: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 560: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 568: {
            ChCollisionTeamId = input.ReadInt32();
            break;
          }
          case 576: {
            BtnCHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 584: {
            BtnDHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 592: {
            BtnEHoldingRdfCount = input.ReadInt32();
            break;
          }
          case 600: {
            ParryPrepRdfCntDown = input.ReadInt32();
            break;
          }
          case 608: {
            MpRegenRdfCountdown = input.ReadInt32();
            break;
          }
          case 616: {
            FlyingRdfCountdown = input.ReadInt32();
            break;
          }
          case 624: {
            LockingOnJoinIndex = input.ReadInt32();
            break;
          }
          case 722: {
            buffList_.AddEntriesFrom(ref input, _repeated_buffList_codec);
            break;
          }
          case 730: {
            debuffList_.AddEntriesFrom(ref input, _repeated_debuffList_codec);
            break;
          }
          case 738: {
            if (inventory_ == null) {
              Inventory = new global::shared.Inventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
          case 746: {
            bulletImmuneRecords_.AddEntriesFrom(ref input, _repeated_bulletImmuneRecords_codec);
            break;
          }
          case 754:
          case 757: {
            kinematicKnobs_.AddEntriesFrom(ref input, _repeated_kinematicKnobs_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameDecoded : pb::IMessage<InputFrameDecoded>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameDecoded> _parser = new pb::MessageParser<InputFrameDecoded>(() => new InputFrameDecoded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameDecoded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded(InputFrameDecoded other) : this() {
      dx_ = other.dx_;
      dy_ = other.dy_;
      btnALevel_ = other.btnALevel_;
      btnBLevel_ = other.btnBLevel_;
      btnCLevel_ = other.btnCLevel_;
      btnDLevel_ = other.btnDLevel_;
      btnELevel_ = other.btnELevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDecoded Clone() {
      return new InputFrameDecoded(this);
    }

    /// <summary>Field number for the "dx" field.</summary>
    public const int DxFieldNumber = 1;
    private int dx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dx {
      get { return dx_; }
      set {
        dx_ = value;
      }
    }

    /// <summary>Field number for the "dy" field.</summary>
    public const int DyFieldNumber = 2;
    private int dy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dy {
      get { return dy_; }
      set {
        dy_ = value;
      }
    }

    /// <summary>Field number for the "btnALevel" field.</summary>
    public const int BtnALevelFieldNumber = 3;
    private int btnALevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnALevel {
      get { return btnALevel_; }
      set {
        btnALevel_ = value;
      }
    }

    /// <summary>Field number for the "btnBLevel" field.</summary>
    public const int BtnBLevelFieldNumber = 4;
    private int btnBLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnBLevel {
      get { return btnBLevel_; }
      set {
        btnBLevel_ = value;
      }
    }

    /// <summary>Field number for the "btnCLevel" field.</summary>
    public const int BtnCLevelFieldNumber = 5;
    private int btnCLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnCLevel {
      get { return btnCLevel_; }
      set {
        btnCLevel_ = value;
      }
    }

    /// <summary>Field number for the "btnDLevel" field.</summary>
    public const int BtnDLevelFieldNumber = 6;
    private int btnDLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnDLevel {
      get { return btnDLevel_; }
      set {
        btnDLevel_ = value;
      }
    }

    /// <summary>Field number for the "btnELevel" field.</summary>
    public const int BtnELevelFieldNumber = 7;
    private int btnELevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BtnELevel {
      get { return btnELevel_; }
      set {
        btnELevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDecoded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameDecoded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dx != other.Dx) return false;
      if (Dy != other.Dy) return false;
      if (BtnALevel != other.BtnALevel) return false;
      if (BtnBLevel != other.BtnBLevel) return false;
      if (BtnCLevel != other.BtnCLevel) return false;
      if (BtnDLevel != other.BtnDLevel) return false;
      if (BtnELevel != other.BtnELevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Dx != 0) hash ^= Dx.GetHashCode();
      if (Dy != 0) hash ^= Dy.GetHashCode();
      if (BtnALevel != 0) hash ^= BtnALevel.GetHashCode();
      if (BtnBLevel != 0) hash ^= BtnBLevel.GetHashCode();
      if (BtnCLevel != 0) hash ^= BtnCLevel.GetHashCode();
      if (BtnDLevel != 0) hash ^= BtnDLevel.GetHashCode();
      if (BtnELevel != 0) hash ^= BtnELevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Dx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dx);
      }
      if (Dy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dy);
      }
      if (BtnALevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtnALevel);
      }
      if (BtnBLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BtnDLevel);
      }
      if (BtnELevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BtnELevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Dx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dx);
      }
      if (Dy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dy);
      }
      if (BtnALevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtnALevel);
      }
      if (BtnBLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BtnDLevel);
      }
      if (BtnELevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BtnELevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Dx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dx);
      }
      if (Dy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dy);
      }
      if (BtnALevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnALevel);
      }
      if (BtnBLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnBLevel);
      }
      if (BtnCLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnCLevel);
      }
      if (BtnDLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnDLevel);
      }
      if (BtnELevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtnELevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameDecoded other) {
      if (other == null) {
        return;
      }
      if (other.Dx != 0) {
        Dx = other.Dx;
      }
      if (other.Dy != 0) {
        Dy = other.Dy;
      }
      if (other.BtnALevel != 0) {
        BtnALevel = other.BtnALevel;
      }
      if (other.BtnBLevel != 0) {
        BtnBLevel = other.BtnBLevel;
      }
      if (other.BtnCLevel != 0) {
        BtnCLevel = other.BtnCLevel;
      }
      if (other.BtnDLevel != 0) {
        BtnDLevel = other.BtnDLevel;
      }
      if (other.BtnELevel != 0) {
        BtnELevel = other.BtnELevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dx = input.ReadInt32();
            break;
          }
          case 16: {
            Dy = input.ReadInt32();
            break;
          }
          case 24: {
            BtnALevel = input.ReadInt32();
            break;
          }
          case 32: {
            BtnBLevel = input.ReadInt32();
            break;
          }
          case 40: {
            BtnCLevel = input.ReadInt32();
            break;
          }
          case 48: {
            BtnDLevel = input.ReadInt32();
            break;
          }
          case 56: {
            BtnELevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Dx = input.ReadInt32();
            break;
          }
          case 16: {
            Dy = input.ReadInt32();
            break;
          }
          case 24: {
            BtnALevel = input.ReadInt32();
            break;
          }
          case 32: {
            BtnBLevel = input.ReadInt32();
            break;
          }
          case 40: {
            BtnCLevel = input.ReadInt32();
            break;
          }
          case 48: {
            BtnDLevel = input.ReadInt32();
            break;
          }
          case 56: {
            BtnELevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameUpsync : pb::IMessage<InputFrameUpsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameUpsync> _parser = new pb::MessageParser<InputFrameUpsync>(() => new InputFrameUpsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameUpsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync(InputFrameUpsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      encoded_ = other.encoded_;
      joinIndex_ = other.joinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameUpsync Clone() {
      return new InputFrameUpsync(this);
    }

    /// <summary>Field number for the "inputFrameId" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 2;
    private ulong encoded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameUpsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameUpsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if (Encoded != other.Encoded) return false;
      if (JoinIndex != other.JoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      if (Encoded != 0UL) hash ^= Encoded.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      if (Encoded != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Encoded);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      if (Encoded != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Encoded);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      if (Encoded != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Encoded);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameUpsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      if (other.Encoded != 0UL) {
        Encoded = other.Encoded;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            Encoded = input.ReadUInt64();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            Encoded = input.ReadUInt64();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputFrameDownsync : pb::IMessage<InputFrameDownsync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputFrameDownsync> _parser = new pb::MessageParser<InputFrameDownsync>(() => new InputFrameDownsync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputFrameDownsync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync(InputFrameDownsync other) : this() {
      inputFrameId_ = other.inputFrameId_;
      inputList_ = other.inputList_.Clone();
      confirmedList_ = other.confirmedList_;
      udpConfirmedList_ = other.udpConfirmedList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputFrameDownsync Clone() {
      return new InputFrameDownsync(this);
    }

    /// <summary>Field number for the "inputFrameId" field.</summary>
    public const int InputFrameIdFieldNumber = 1;
    private int inputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameId {
      get { return inputFrameId_; }
      set {
        inputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "inputList" field.</summary>
    public const int InputListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_inputList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> inputList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// Indexed by "joinIndex", we try to compress the "single player input" into 1 word (64-bit for 64-bit Golang runtime) because atomic compare-and-swap only works on 1 word. Although CAS on custom struct is possible in C# https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=netstandard-2.1, using a single word is still faster whenever possible. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> InputList {
      get { return inputList_; }
    }

    /// <summary>Field number for the "confirmedList" field.</summary>
    public const int ConfirmedListFieldNumber = 3;
    private ulong confirmedList_;
    /// <summary>
    /// Indexed by "joinIndex", same compression concern as above
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ConfirmedList {
      get { return confirmedList_; }
      set {
        confirmedList_ = value;
      }
    }

    /// <summary>Field number for the "udpConfirmedList" field.</summary>
    public const int UdpConfirmedListFieldNumber = 4;
    private ulong udpConfirmedList_;
    /// <summary>
    /// [WARNING] Only used by frontend, i.e. on backend this field can be always zero because backend sets "InputFrameDownsync.ConfirmedList" by UDP packets too while frontend shouldn't. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UdpConfirmedList {
      get { return udpConfirmedList_; }
      set {
        udpConfirmedList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputFrameDownsync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputFrameDownsync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InputFrameId != other.InputFrameId) return false;
      if(!inputList_.Equals(other.inputList_)) return false;
      if (ConfirmedList != other.ConfirmedList) return false;
      if (UdpConfirmedList != other.UdpConfirmedList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InputFrameId != 0) hash ^= InputFrameId.GetHashCode();
      hash ^= inputList_.GetHashCode();
      if (ConfirmedList != 0UL) hash ^= ConfirmedList.GetHashCode();
      if (UdpConfirmedList != 0UL) hash ^= UdpConfirmedList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      inputList_.WriteTo(output, _repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConfirmedList);
      }
      if (UdpConfirmedList != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UdpConfirmedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InputFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InputFrameId);
      }
      inputList_.WriteTo(ref output, _repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ConfirmedList);
      }
      if (UdpConfirmedList != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UdpConfirmedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameId);
      }
      size += inputList_.CalculateSize(_repeated_inputList_codec);
      if (ConfirmedList != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConfirmedList);
      }
      if (UdpConfirmedList != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UdpConfirmedList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputFrameDownsync other) {
      if (other == null) {
        return;
      }
      if (other.InputFrameId != 0) {
        InputFrameId = other.InputFrameId;
      }
      inputList_.Add(other.inputList_);
      if (other.ConfirmedList != 0UL) {
        ConfirmedList = other.ConfirmedList;
      }
      if (other.UdpConfirmedList != 0UL) {
        UdpConfirmedList = other.UdpConfirmedList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            inputList_.AddEntriesFrom(input, _repeated_inputList_codec);
            break;
          }
          case 24: {
            ConfirmedList = input.ReadUInt64();
            break;
          }
          case 32: {
            UdpConfirmedList = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InputFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            inputList_.AddEntriesFrom(ref input, _repeated_inputList_codec);
            break;
          }
          case 24: {
            ConfirmedList = input.ReadUInt64();
            break;
          }
          case 32: {
            UdpConfirmedList = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WsReq : pb::IMessage<WsReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WsReq> _parser = new pb::MessageParser<WsReq>(() => new WsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq(WsReq other) : this() {
      playerId_ = other.playerId_;
      act_ = other.act_;
      joinIndex_ = other.joinIndex_;
      ackingFrameId_ = other.ackingFrameId_;
      ackingInputFrameId_ = other.ackingInputFrameId_;
      authKey_ = other.authKey_;
      inputFrameUpsyncBatch_ = other.inputFrameUpsyncBatch_.Clone();
      selfParsedRdf_ = other.selfParsedRdf_ != null ? other.selfParsedRdf_.Clone() : null;
      collisionSpaceHalfWidth_ = other.collisionSpaceHalfWidth_;
      collisionSpaceHalfHeight_ = other.collisionSpaceHalfHeight_;
      battleDurationSeconds_ = other.battleDurationSeconds_;
      serializedBarrierPolygons_ = other.serializedBarrierPolygons_.Clone();
      serializedStaticPatrolCues_ = other.serializedStaticPatrolCues_.Clone();
      serializedCompletelyStaticTraps_ = other.serializedCompletelyStaticTraps_.Clone();
      serializedStaticTriggers_ = other.serializedStaticTriggers_.Clone();
      serializedTrapLocalIdToColliderAttrs_ = other.serializedTrapLocalIdToColliderAttrs_ != null ? other.serializedTrapLocalIdToColliderAttrs_.Clone() : null;
      serializedTriggerEditorIdToLocalId_ = other.serializedTriggerEditorIdToLocalId_ != null ? other.serializedTriggerEditorIdToLocalId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsReq Clone() {
      return new WsReq(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 3;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "ackingFrameId" field.</summary>
    public const int AckingFrameIdFieldNumber = 4;
    private int ackingFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckingFrameId {
      get { return ackingFrameId_; }
      set {
        ackingFrameId_ = value;
      }
    }

    /// <summary>Field number for the "ackingInputFrameId" field.</summary>
    public const int AckingInputFrameIdFieldNumber = 5;
    private int ackingInputFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckingInputFrameId {
      get { return ackingInputFrameId_; }
      set {
        ackingInputFrameId_ = value;
      }
    }

    /// <summary>Field number for the "authKey" field.</summary>
    public const int AuthKeyFieldNumber = 6;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameUpsyncBatch" field.</summary>
    public const int InputFrameUpsyncBatchFieldNumber = 7;
    private static readonly pb::FieldCodec<global::shared.InputFrameUpsync> _repeated_inputFrameUpsyncBatch_codec
        = pb::FieldCodec.ForMessage(58, global::shared.InputFrameUpsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameUpsync> inputFrameUpsyncBatch_ = new pbc::RepeatedField<global::shared.InputFrameUpsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameUpsync> InputFrameUpsyncBatch {
      get { return inputFrameUpsyncBatch_; }
    }

    /// <summary>Field number for the "selfParsedRdf" field.</summary>
    public const int SelfParsedRdfFieldNumber = 8;
    private global::shared.RoomDownsyncFrame selfParsedRdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.RoomDownsyncFrame SelfParsedRdf {
      get { return selfParsedRdf_; }
      set {
        selfParsedRdf_ = value;
      }
    }

    /// <summary>Field number for the "collisionSpaceHalfWidth" field.</summary>
    public const int CollisionSpaceHalfWidthFieldNumber = 9;
    private int collisionSpaceHalfWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CollisionSpaceHalfWidth {
      get { return collisionSpaceHalfWidth_; }
      set {
        collisionSpaceHalfWidth_ = value;
      }
    }

    /// <summary>Field number for the "collisionSpaceHalfHeight" field.</summary>
    public const int CollisionSpaceHalfHeightFieldNumber = 10;
    private int collisionSpaceHalfHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CollisionSpaceHalfHeight {
      get { return collisionSpaceHalfHeight_; }
      set {
        collisionSpaceHalfHeight_ = value;
      }
    }

    /// <summary>Field number for the "battleDurationSeconds" field.</summary>
    public const int BattleDurationSecondsFieldNumber = 11;
    private int battleDurationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleDurationSeconds {
      get { return battleDurationSeconds_; }
      set {
        battleDurationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "serializedBarrierPolygons" field.</summary>
    public const int SerializedBarrierPolygonsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::shared.SerializableConvexPolygon> _repeated_serializedBarrierPolygons_codec
        = pb::FieldCodec.ForMessage(98, global::shared.SerializableConvexPolygon.Parser);
    private readonly pbc::RepeatedField<global::shared.SerializableConvexPolygon> serializedBarrierPolygons_ = new pbc::RepeatedField<global::shared.SerializableConvexPolygon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.SerializableConvexPolygon> SerializedBarrierPolygons {
      get { return serializedBarrierPolygons_; }
    }

    /// <summary>Field number for the "serializedStaticPatrolCues" field.</summary>
    public const int SerializedStaticPatrolCuesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::shared.SerializedCompletelyStaticPatrolCueCollider> _repeated_serializedStaticPatrolCues_codec
        = pb::FieldCodec.ForMessage(106, global::shared.SerializedCompletelyStaticPatrolCueCollider.Parser);
    private readonly pbc::RepeatedField<global::shared.SerializedCompletelyStaticPatrolCueCollider> serializedStaticPatrolCues_ = new pbc::RepeatedField<global::shared.SerializedCompletelyStaticPatrolCueCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.SerializedCompletelyStaticPatrolCueCollider> SerializedStaticPatrolCues {
      get { return serializedStaticPatrolCues_; }
    }

    /// <summary>Field number for the "serializedCompletelyStaticTraps" field.</summary>
    public const int SerializedCompletelyStaticTrapsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::shared.SerializedCompletelyStaticTrapCollider> _repeated_serializedCompletelyStaticTraps_codec
        = pb::FieldCodec.ForMessage(114, global::shared.SerializedCompletelyStaticTrapCollider.Parser);
    private readonly pbc::RepeatedField<global::shared.SerializedCompletelyStaticTrapCollider> serializedCompletelyStaticTraps_ = new pbc::RepeatedField<global::shared.SerializedCompletelyStaticTrapCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.SerializedCompletelyStaticTrapCollider> SerializedCompletelyStaticTraps {
      get { return serializedCompletelyStaticTraps_; }
    }

    /// <summary>Field number for the "serializedStaticTriggers" field.</summary>
    public const int SerializedStaticTriggersFieldNumber = 15;
    private static readonly pb::FieldCodec<global::shared.SerializedCompletelyStaticTriggerCollider> _repeated_serializedStaticTriggers_codec
        = pb::FieldCodec.ForMessage(122, global::shared.SerializedCompletelyStaticTriggerCollider.Parser);
    private readonly pbc::RepeatedField<global::shared.SerializedCompletelyStaticTriggerCollider> serializedStaticTriggers_ = new pbc::RepeatedField<global::shared.SerializedCompletelyStaticTriggerCollider>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.SerializedCompletelyStaticTriggerCollider> SerializedStaticTriggers {
      get { return serializedStaticTriggers_; }
    }

    /// <summary>Field number for the "serializedTrapLocalIdToColliderAttrs" field.</summary>
    public const int SerializedTrapLocalIdToColliderAttrsFieldNumber = 16;
    private global::shared.SerializedTrapLocalIdToColliderAttrs serializedTrapLocalIdToColliderAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SerializedTrapLocalIdToColliderAttrs SerializedTrapLocalIdToColliderAttrs {
      get { return serializedTrapLocalIdToColliderAttrs_; }
      set {
        serializedTrapLocalIdToColliderAttrs_ = value;
      }
    }

    /// <summary>Field number for the "serializedTriggerEditorIdToLocalId" field.</summary>
    public const int SerializedTriggerEditorIdToLocalIdFieldNumber = 18;
    private global::shared.SerializedTriggerEditorIdToLocalId serializedTriggerEditorIdToLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SerializedTriggerEditorIdToLocalId SerializedTriggerEditorIdToLocalId {
      get { return serializedTriggerEditorIdToLocalId_; }
      set {
        serializedTriggerEditorIdToLocalId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Act != other.Act) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (AckingFrameId != other.AckingFrameId) return false;
      if (AckingInputFrameId != other.AckingInputFrameId) return false;
      if (AuthKey != other.AuthKey) return false;
      if(!inputFrameUpsyncBatch_.Equals(other.inputFrameUpsyncBatch_)) return false;
      if (!object.Equals(SelfParsedRdf, other.SelfParsedRdf)) return false;
      if (CollisionSpaceHalfWidth != other.CollisionSpaceHalfWidth) return false;
      if (CollisionSpaceHalfHeight != other.CollisionSpaceHalfHeight) return false;
      if (BattleDurationSeconds != other.BattleDurationSeconds) return false;
      if(!serializedBarrierPolygons_.Equals(other.serializedBarrierPolygons_)) return false;
      if(!serializedStaticPatrolCues_.Equals(other.serializedStaticPatrolCues_)) return false;
      if(!serializedCompletelyStaticTraps_.Equals(other.serializedCompletelyStaticTraps_)) return false;
      if(!serializedStaticTriggers_.Equals(other.serializedStaticTriggers_)) return false;
      if (!object.Equals(SerializedTrapLocalIdToColliderAttrs, other.SerializedTrapLocalIdToColliderAttrs)) return false;
      if (!object.Equals(SerializedTriggerEditorIdToLocalId, other.SerializedTriggerEditorIdToLocalId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (AckingFrameId != 0) hash ^= AckingFrameId.GetHashCode();
      if (AckingInputFrameId != 0) hash ^= AckingInputFrameId.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      hash ^= inputFrameUpsyncBatch_.GetHashCode();
      if (selfParsedRdf_ != null) hash ^= SelfParsedRdf.GetHashCode();
      if (CollisionSpaceHalfWidth != 0) hash ^= CollisionSpaceHalfWidth.GetHashCode();
      if (CollisionSpaceHalfHeight != 0) hash ^= CollisionSpaceHalfHeight.GetHashCode();
      if (BattleDurationSeconds != 0) hash ^= BattleDurationSeconds.GetHashCode();
      hash ^= serializedBarrierPolygons_.GetHashCode();
      hash ^= serializedStaticPatrolCues_.GetHashCode();
      hash ^= serializedCompletelyStaticTraps_.GetHashCode();
      hash ^= serializedStaticTriggers_.GetHashCode();
      if (serializedTrapLocalIdToColliderAttrs_ != null) hash ^= SerializedTrapLocalIdToColliderAttrs.GetHashCode();
      if (serializedTriggerEditorIdToLocalId_ != null) hash ^= SerializedTriggerEditorIdToLocalId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (AckingFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AuthKey);
      }
      inputFrameUpsyncBatch_.WriteTo(output, _repeated_inputFrameUpsyncBatch_codec);
      if (selfParsedRdf_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SelfParsedRdf);
      }
      if (CollisionSpaceHalfWidth != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionSpaceHalfWidth);
      }
      if (CollisionSpaceHalfHeight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CollisionSpaceHalfHeight);
      }
      if (BattleDurationSeconds != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BattleDurationSeconds);
      }
      serializedBarrierPolygons_.WriteTo(output, _repeated_serializedBarrierPolygons_codec);
      serializedStaticPatrolCues_.WriteTo(output, _repeated_serializedStaticPatrolCues_codec);
      serializedCompletelyStaticTraps_.WriteTo(output, _repeated_serializedCompletelyStaticTraps_codec);
      serializedStaticTriggers_.WriteTo(output, _repeated_serializedStaticTriggers_codec);
      if (serializedTrapLocalIdToColliderAttrs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SerializedTrapLocalIdToColliderAttrs);
      }
      if (serializedTriggerEditorIdToLocalId_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SerializedTriggerEditorIdToLocalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinIndex);
      }
      if (AckingFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AuthKey);
      }
      inputFrameUpsyncBatch_.WriteTo(ref output, _repeated_inputFrameUpsyncBatch_codec);
      if (selfParsedRdf_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SelfParsedRdf);
      }
      if (CollisionSpaceHalfWidth != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionSpaceHalfWidth);
      }
      if (CollisionSpaceHalfHeight != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CollisionSpaceHalfHeight);
      }
      if (BattleDurationSeconds != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BattleDurationSeconds);
      }
      serializedBarrierPolygons_.WriteTo(ref output, _repeated_serializedBarrierPolygons_codec);
      serializedStaticPatrolCues_.WriteTo(ref output, _repeated_serializedStaticPatrolCues_codec);
      serializedCompletelyStaticTraps_.WriteTo(ref output, _repeated_serializedCompletelyStaticTraps_codec);
      serializedStaticTriggers_.WriteTo(ref output, _repeated_serializedStaticTriggers_codec);
      if (serializedTrapLocalIdToColliderAttrs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SerializedTrapLocalIdToColliderAttrs);
      }
      if (serializedTriggerEditorIdToLocalId_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SerializedTriggerEditorIdToLocalId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (AckingFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingFrameId);
      }
      if (AckingInputFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckingInputFrameId);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      size += inputFrameUpsyncBatch_.CalculateSize(_repeated_inputFrameUpsyncBatch_codec);
      if (selfParsedRdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfParsedRdf);
      }
      if (CollisionSpaceHalfWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionSpaceHalfWidth);
      }
      if (CollisionSpaceHalfHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionSpaceHalfHeight);
      }
      if (BattleDurationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleDurationSeconds);
      }
      size += serializedBarrierPolygons_.CalculateSize(_repeated_serializedBarrierPolygons_codec);
      size += serializedStaticPatrolCues_.CalculateSize(_repeated_serializedStaticPatrolCues_codec);
      size += serializedCompletelyStaticTraps_.CalculateSize(_repeated_serializedCompletelyStaticTraps_codec);
      size += serializedStaticTriggers_.CalculateSize(_repeated_serializedStaticTriggers_codec);
      if (serializedTrapLocalIdToColliderAttrs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SerializedTrapLocalIdToColliderAttrs);
      }
      if (serializedTriggerEditorIdToLocalId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SerializedTriggerEditorIdToLocalId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WsReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.AckingFrameId != 0) {
        AckingFrameId = other.AckingFrameId;
      }
      if (other.AckingInputFrameId != 0) {
        AckingInputFrameId = other.AckingInputFrameId;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      inputFrameUpsyncBatch_.Add(other.inputFrameUpsyncBatch_);
      if (other.selfParsedRdf_ != null) {
        if (selfParsedRdf_ == null) {
          SelfParsedRdf = new global::shared.RoomDownsyncFrame();
        }
        SelfParsedRdf.MergeFrom(other.SelfParsedRdf);
      }
      if (other.CollisionSpaceHalfWidth != 0) {
        CollisionSpaceHalfWidth = other.CollisionSpaceHalfWidth;
      }
      if (other.CollisionSpaceHalfHeight != 0) {
        CollisionSpaceHalfHeight = other.CollisionSpaceHalfHeight;
      }
      if (other.BattleDurationSeconds != 0) {
        BattleDurationSeconds = other.BattleDurationSeconds;
      }
      serializedBarrierPolygons_.Add(other.serializedBarrierPolygons_);
      serializedStaticPatrolCues_.Add(other.serializedStaticPatrolCues_);
      serializedCompletelyStaticTraps_.Add(other.serializedCompletelyStaticTraps_);
      serializedStaticTriggers_.Add(other.serializedStaticTriggers_);
      if (other.serializedTrapLocalIdToColliderAttrs_ != null) {
        if (serializedTrapLocalIdToColliderAttrs_ == null) {
          SerializedTrapLocalIdToColliderAttrs = new global::shared.SerializedTrapLocalIdToColliderAttrs();
        }
        SerializedTrapLocalIdToColliderAttrs.MergeFrom(other.SerializedTrapLocalIdToColliderAttrs);
      }
      if (other.serializedTriggerEditorIdToLocalId_ != null) {
        if (serializedTriggerEditorIdToLocalId_ == null) {
          SerializedTriggerEditorIdToLocalId = new global::shared.SerializedTriggerEditorIdToLocalId();
        }
        SerializedTriggerEditorIdToLocalId.MergeFrom(other.SerializedTriggerEditorIdToLocalId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            AckingFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            AckingInputFrameId = input.ReadInt32();
            break;
          }
          case 48: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 58: {
            inputFrameUpsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameUpsyncBatch_codec);
            break;
          }
          case 66: {
            if (selfParsedRdf_ == null) {
              SelfParsedRdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(SelfParsedRdf);
            break;
          }
          case 72: {
            CollisionSpaceHalfWidth = input.ReadInt32();
            break;
          }
          case 80: {
            CollisionSpaceHalfHeight = input.ReadInt32();
            break;
          }
          case 88: {
            BattleDurationSeconds = input.ReadInt32();
            break;
          }
          case 98: {
            serializedBarrierPolygons_.AddEntriesFrom(input, _repeated_serializedBarrierPolygons_codec);
            break;
          }
          case 106: {
            serializedStaticPatrolCues_.AddEntriesFrom(input, _repeated_serializedStaticPatrolCues_codec);
            break;
          }
          case 114: {
            serializedCompletelyStaticTraps_.AddEntriesFrom(input, _repeated_serializedCompletelyStaticTraps_codec);
            break;
          }
          case 122: {
            serializedStaticTriggers_.AddEntriesFrom(input, _repeated_serializedStaticTriggers_codec);
            break;
          }
          case 130: {
            if (serializedTrapLocalIdToColliderAttrs_ == null) {
              SerializedTrapLocalIdToColliderAttrs = new global::shared.SerializedTrapLocalIdToColliderAttrs();
            }
            input.ReadMessage(SerializedTrapLocalIdToColliderAttrs);
            break;
          }
          case 146: {
            if (serializedTriggerEditorIdToLocalId_ == null) {
              SerializedTriggerEditorIdToLocalId = new global::shared.SerializedTriggerEditorIdToLocalId();
            }
            input.ReadMessage(SerializedTriggerEditorIdToLocalId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 24: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 32: {
            AckingFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            AckingInputFrameId = input.ReadInt32();
            break;
          }
          case 48: {
            AuthKey = input.ReadInt32();
            break;
          }
          case 58: {
            inputFrameUpsyncBatch_.AddEntriesFrom(ref input, _repeated_inputFrameUpsyncBatch_codec);
            break;
          }
          case 66: {
            if (selfParsedRdf_ == null) {
              SelfParsedRdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(SelfParsedRdf);
            break;
          }
          case 72: {
            CollisionSpaceHalfWidth = input.ReadInt32();
            break;
          }
          case 80: {
            CollisionSpaceHalfHeight = input.ReadInt32();
            break;
          }
          case 88: {
            BattleDurationSeconds = input.ReadInt32();
            break;
          }
          case 98: {
            serializedBarrierPolygons_.AddEntriesFrom(ref input, _repeated_serializedBarrierPolygons_codec);
            break;
          }
          case 106: {
            serializedStaticPatrolCues_.AddEntriesFrom(ref input, _repeated_serializedStaticPatrolCues_codec);
            break;
          }
          case 114: {
            serializedCompletelyStaticTraps_.AddEntriesFrom(ref input, _repeated_serializedCompletelyStaticTraps_codec);
            break;
          }
          case 122: {
            serializedStaticTriggers_.AddEntriesFrom(ref input, _repeated_serializedStaticTriggers_codec);
            break;
          }
          case 130: {
            if (serializedTrapLocalIdToColliderAttrs_ == null) {
              SerializedTrapLocalIdToColliderAttrs = new global::shared.SerializedTrapLocalIdToColliderAttrs();
            }
            input.ReadMessage(SerializedTrapLocalIdToColliderAttrs);
            break;
          }
          case 146: {
            if (serializedTriggerEditorIdToLocalId_ == null) {
              SerializedTriggerEditorIdToLocalId = new global::shared.SerializedTriggerEditorIdToLocalId();
            }
            input.ReadMessage(SerializedTriggerEditorIdToLocalId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InputBufferSnapshot : pb::IMessage<InputBufferSnapshot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InputBufferSnapshot> _parser = new pb::MessageParser<InputBufferSnapshot>(() => new InputBufferSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InputBufferSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot(InputBufferSnapshot other) : this() {
      refRenderFrameId_ = other.refRenderFrameId_;
      unconfirmedMask_ = other.unconfirmedMask_;
      toSendInputFrameDownsyncs_ = other.toSendInputFrameDownsyncs_.Clone();
      shouldForceResync_ = other.shouldForceResync_;
      peerJoinIndex_ = other.peerJoinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InputBufferSnapshot Clone() {
      return new InputBufferSnapshot(this);
    }

    /// <summary>Field number for the "refRenderFrameId" field.</summary>
    public const int RefRenderFrameIdFieldNumber = 1;
    private int refRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefRenderFrameId {
      get { return refRenderFrameId_; }
      set {
        refRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmedMask" field.</summary>
    public const int UnconfirmedMaskFieldNumber = 2;
    private ulong unconfirmedMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UnconfirmedMask {
      get { return unconfirmedMask_; }
      set {
        unconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "toSendInputFrameDownsyncs" field.</summary>
    public const int ToSendInputFrameDownsyncsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::shared.InputFrameDownsync> _repeated_toSendInputFrameDownsyncs_codec
        = pb::FieldCodec.ForMessage(26, global::shared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameDownsync> toSendInputFrameDownsyncs_ = new pbc::RepeatedField<global::shared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameDownsync> ToSendInputFrameDownsyncs {
      get { return toSendInputFrameDownsyncs_; }
    }

    /// <summary>Field number for the "shouldForceResync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 4;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "peerJoinIndex" field.</summary>
    public const int PeerJoinIndexFieldNumber = 5;
    private int peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InputBufferSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InputBufferSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefRenderFrameId != other.RefRenderFrameId) return false;
      if (UnconfirmedMask != other.UnconfirmedMask) return false;
      if(!toSendInputFrameDownsyncs_.Equals(other.toSendInputFrameDownsyncs_)) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RefRenderFrameId != 0) hash ^= RefRenderFrameId.GetHashCode();
      if (UnconfirmedMask != 0UL) hash ^= UnconfirmedMask.GetHashCode();
      hash ^= toSendInputFrameDownsyncs_.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RefRenderFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnconfirmedMask);
      }
      toSendInputFrameDownsyncs_.WriteTo(output, _repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShouldForceResync);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RefRenderFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnconfirmedMask);
      }
      toSendInputFrameDownsyncs_.WriteTo(ref output, _repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShouldForceResync);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RefRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefRenderFrameId);
      }
      if (UnconfirmedMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnconfirmedMask);
      }
      size += toSendInputFrameDownsyncs_.CalculateSize(_repeated_toSendInputFrameDownsyncs_codec);
      if (ShouldForceResync != false) {
        size += 1 + 1;
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerJoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InputBufferSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.RefRenderFrameId != 0) {
        RefRenderFrameId = other.RefRenderFrameId;
      }
      if (other.UnconfirmedMask != 0UL) {
        UnconfirmedMask = other.UnconfirmedMask;
      }
      toSendInputFrameDownsyncs_.Add(other.toSendInputFrameDownsyncs_);
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefRenderFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 26: {
            toSendInputFrameDownsyncs_.AddEntriesFrom(input, _repeated_toSendInputFrameDownsyncs_codec);
            break;
          }
          case 32: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 40: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RefRenderFrameId = input.ReadInt32();
            break;
          }
          case 16: {
            UnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 26: {
            toSendInputFrameDownsyncs_.AddEntriesFrom(ref input, _repeated_toSendInputFrameDownsyncs_codec);
            break;
          }
          case 32: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 40: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PatrolCue : pb::IMessage<PatrolCue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PatrolCue> _parser = new pb::MessageParser<PatrolCue>(() => new PatrolCue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PatrolCue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue(PatrolCue other) : this() {
      id_ = other.id_;
      flAct_ = other.flAct_;
      frAct_ = other.frAct_;
      flCaptureFrames_ = other.flCaptureFrames_;
      frCaptureFrames_ = other.frCaptureFrames_;
      fdAct_ = other.fdAct_;
      fuAct_ = other.fuAct_;
      fdCaptureFrames_ = other.fdCaptureFrames_;
      fuCaptureFrames_ = other.fuCaptureFrames_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PatrolCue Clone() {
      return new PatrolCue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "flAct" field.</summary>
    public const int FlActFieldNumber = 2;
    private ulong flAct_;
    /// <summary>
    /// "input when colliding from the left side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FlAct {
      get { return flAct_; }
      set {
        flAct_ = value;
      }
    }

    /// <summary>Field number for the "frAct" field.</summary>
    public const int FrActFieldNumber = 3;
    private ulong frAct_;
    /// <summary>
    /// "input when colliding from the right side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrAct {
      get { return frAct_; }
      set {
        frAct_ = value;
      }
    }

    /// <summary>Field number for the "flCaptureFrames" field.</summary>
    public const int FlCaptureFramesFieldNumber = 4;
    private int flCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FlCaptureFrames {
      get { return flCaptureFrames_; }
      set {
        flCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "frCaptureFrames" field.</summary>
    public const int FrCaptureFramesFieldNumber = 5;
    private int frCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrCaptureFrames {
      get { return frCaptureFrames_; }
      set {
        frCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fdAct" field.</summary>
    public const int FdActFieldNumber = 6;
    private ulong fdAct_;
    /// <summary>
    /// "input when colliding from the down side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FdAct {
      get { return fdAct_; }
      set {
        fdAct_ = value;
      }
    }

    /// <summary>Field number for the "fuAct" field.</summary>
    public const int FuActFieldNumber = 7;
    private ulong fuAct_;
    /// <summary>
    /// "input when colliding from the up side"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FuAct {
      get { return fuAct_; }
      set {
        fuAct_ = value;
      }
    }

    /// <summary>Field number for the "fdCaptureFrames" field.</summary>
    public const int FdCaptureFramesFieldNumber = 8;
    private int fdCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FdCaptureFrames {
      get { return fdCaptureFrames_; }
      set {
        fdCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "fuCaptureFrames" field.</summary>
    public const int FuCaptureFramesFieldNumber = 9;
    private int fuCaptureFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FuCaptureFrames {
      get { return fuCaptureFrames_; }
      set {
        fuCaptureFrames_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    /// <summary>
    /// [COLLISION_NPC_PATROL_CUE_INDEX_PREFIX, COLLISION_TRAP_PATROL_CUE_INDEX_PREFIX]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PatrolCue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PatrolCue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FlAct != other.FlAct) return false;
      if (FrAct != other.FrAct) return false;
      if (FlCaptureFrames != other.FlCaptureFrames) return false;
      if (FrCaptureFrames != other.FrCaptureFrames) return false;
      if (FdAct != other.FdAct) return false;
      if (FuAct != other.FuAct) return false;
      if (FdCaptureFrames != other.FdCaptureFrames) return false;
      if (FuCaptureFrames != other.FuCaptureFrames) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FlAct != 0UL) hash ^= FlAct.GetHashCode();
      if (FrAct != 0UL) hash ^= FrAct.GetHashCode();
      if (FlCaptureFrames != 0) hash ^= FlCaptureFrames.GetHashCode();
      if (FrCaptureFrames != 0) hash ^= FrCaptureFrames.GetHashCode();
      if (FdAct != 0UL) hash ^= FdAct.GetHashCode();
      if (FuAct != 0UL) hash ^= FuAct.GetHashCode();
      if (FdCaptureFrames != 0) hash ^= FdCaptureFrames.GetHashCode();
      if (FuCaptureFrames != 0) hash ^= FuCaptureFrames.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FlAct != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FlAct);
      }
      if (FrAct != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrAct);
      }
      if (FlCaptureFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FdAct);
      }
      if (FuAct != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FuAct);
      }
      if (FdCaptureFrames != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FlAct != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FlAct);
      }
      if (FrAct != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrAct);
      }
      if (FlCaptureFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(FdAct);
      }
      if (FuAct != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FuAct);
      }
      if (FdCaptureFrames != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FlAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FlAct);
      }
      if (FrAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrAct);
      }
      if (FlCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlCaptureFrames);
      }
      if (FrCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrCaptureFrames);
      }
      if (FdAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FdAct);
      }
      if (FuAct != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FuAct);
      }
      if (FdCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FdCaptureFrames);
      }
      if (FuCaptureFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuCaptureFrames);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PatrolCue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FlAct != 0UL) {
        FlAct = other.FlAct;
      }
      if (other.FrAct != 0UL) {
        FrAct = other.FrAct;
      }
      if (other.FlCaptureFrames != 0) {
        FlCaptureFrames = other.FlCaptureFrames;
      }
      if (other.FrCaptureFrames != 0) {
        FrCaptureFrames = other.FrCaptureFrames;
      }
      if (other.FdAct != 0UL) {
        FdAct = other.FdAct;
      }
      if (other.FuAct != 0UL) {
        FuAct = other.FuAct;
      }
      if (other.FdCaptureFrames != 0) {
        FdCaptureFrames = other.FdCaptureFrames;
      }
      if (other.FuCaptureFrames != 0) {
        FuCaptureFrames = other.FuCaptureFrames;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FlAct = input.ReadUInt64();
            break;
          }
          case 24: {
            FrAct = input.ReadUInt64();
            break;
          }
          case 32: {
            FlCaptureFrames = input.ReadInt32();
            break;
          }
          case 40: {
            FrCaptureFrames = input.ReadInt32();
            break;
          }
          case 48: {
            FdAct = input.ReadUInt64();
            break;
          }
          case 56: {
            FuAct = input.ReadUInt64();
            break;
          }
          case 64: {
            FdCaptureFrames = input.ReadInt32();
            break;
          }
          case 72: {
            FuCaptureFrames = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FlAct = input.ReadUInt64();
            break;
          }
          case 24: {
            FrAct = input.ReadUInt64();
            break;
          }
          case 32: {
            FlCaptureFrames = input.ReadInt32();
            break;
          }
          case 40: {
            FrCaptureFrames = input.ReadInt32();
            break;
          }
          case 48: {
            FdAct = input.ReadUInt64();
            break;
          }
          case 56: {
            FuAct = input.ReadUInt64();
            break;
          }
          case 64: {
            FdCaptureFrames = input.ReadInt32();
            break;
          }
          case 72: {
            FuCaptureFrames = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VfxConfig : pb::IMessage<VfxConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VfxConfig> _parser = new pb::MessageParser<VfxConfig>(() => new VfxConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VfxConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig(VfxConfig other) : this() {
      speciesId_ = other.speciesId_;
      motionType_ = other.motionType_;
      durationType_ = other.durationType_;
      onCharacter_ = other.onCharacter_;
      onBullet_ = other.onBullet_;
      onTrap_ = other.onTrap_;
      usePixelatedVer_ = other.usePixelatedVer_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VfxConfig Clone() {
      return new VfxConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "motionType" field.</summary>
    public const int MotionTypeFieldNumber = 2;
    private global::shared.VfxMotionType motionType_ = global::shared.VfxMotionType.NoMotion;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.VfxMotionType MotionType {
      get { return motionType_; }
      set {
        motionType_ = value;
      }
    }

    /// <summary>Field number for the "durationType" field.</summary>
    public const int DurationTypeFieldNumber = 3;
    private global::shared.VfxDurationType durationType_ = global::shared.VfxDurationType.OneOff;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.VfxDurationType DurationType {
      get { return durationType_; }
      set {
        durationType_ = value;
      }
    }

    /// <summary>Field number for the "onCharacter" field.</summary>
    public const int OnCharacterFieldNumber = 4;
    private bool onCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnCharacter {
      get { return onCharacter_; }
      set {
        onCharacter_ = value;
      }
    }

    /// <summary>Field number for the "onBullet" field.</summary>
    public const int OnBulletFieldNumber = 5;
    private bool onBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnBullet {
      get { return onBullet_; }
      set {
        onBullet_ = value;
      }
    }

    /// <summary>Field number for the "onTrap" field.</summary>
    public const int OnTrapFieldNumber = 6;
    private bool onTrap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OnTrap {
      get { return onTrap_; }
      set {
        onTrap_ = value;
      }
    }

    /// <summary>Field number for the "usePixelatedVer" field.</summary>
    public const int UsePixelatedVerFieldNumber = 7;
    private bool usePixelatedVer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UsePixelatedVer {
      get { return usePixelatedVer_; }
      set {
        usePixelatedVer_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1024;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VfxConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VfxConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (MotionType != other.MotionType) return false;
      if (DurationType != other.DurationType) return false;
      if (OnCharacter != other.OnCharacter) return false;
      if (OnBullet != other.OnBullet) return false;
      if (OnTrap != other.OnTrap) return false;
      if (UsePixelatedVer != other.UsePixelatedVer) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (MotionType != global::shared.VfxMotionType.NoMotion) hash ^= MotionType.GetHashCode();
      if (DurationType != global::shared.VfxDurationType.OneOff) hash ^= DurationType.GetHashCode();
      if (OnCharacter != false) hash ^= OnCharacter.GetHashCode();
      if (OnBullet != false) hash ^= OnBullet.GetHashCode();
      if (OnTrap != false) hash ^= OnTrap.GetHashCode();
      if (UsePixelatedVer != false) hash ^= UsePixelatedVer.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DurationType);
      }
      if (OnCharacter != false) {
        output.WriteRawTag(32);
        output.WriteBool(OnCharacter);
      }
      if (OnBullet != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnBullet);
      }
      if (OnTrap != false) {
        output.WriteRawTag(48);
        output.WriteBool(OnTrap);
      }
      if (UsePixelatedVer != false) {
        output.WriteRawTag(56);
        output.WriteBool(UsePixelatedVer);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DurationType);
      }
      if (OnCharacter != false) {
        output.WriteRawTag(32);
        output.WriteBool(OnCharacter);
      }
      if (OnBullet != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnBullet);
      }
      if (OnTrap != false) {
        output.WriteRawTag(48);
        output.WriteBool(OnTrap);
      }
      if (UsePixelatedVer != false) {
        output.WriteRawTag(56);
        output.WriteBool(UsePixelatedVer);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (MotionType != global::shared.VfxMotionType.NoMotion) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionType);
      }
      if (DurationType != global::shared.VfxDurationType.OneOff) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DurationType);
      }
      if (OnCharacter != false) {
        size += 1 + 1;
      }
      if (OnBullet != false) {
        size += 1 + 1;
      }
      if (OnTrap != false) {
        size += 1 + 1;
      }
      if (UsePixelatedVer != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VfxConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.MotionType != global::shared.VfxMotionType.NoMotion) {
        MotionType = other.MotionType;
      }
      if (other.DurationType != global::shared.VfxDurationType.OneOff) {
        DurationType = other.DurationType;
      }
      if (other.OnCharacter != false) {
        OnCharacter = other.OnCharacter;
      }
      if (other.OnBullet != false) {
        OnBullet = other.OnBullet;
      }
      if (other.OnTrap != false) {
        OnTrap = other.OnTrap;
      }
      if (other.UsePixelatedVer != false) {
        UsePixelatedVer = other.UsePixelatedVer;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            MotionType = (global::shared.VfxMotionType) input.ReadEnum();
            break;
          }
          case 24: {
            DurationType = (global::shared.VfxDurationType) input.ReadEnum();
            break;
          }
          case 32: {
            OnCharacter = input.ReadBool();
            break;
          }
          case 40: {
            OnBullet = input.ReadBool();
            break;
          }
          case 48: {
            OnTrap = input.ReadBool();
            break;
          }
          case 56: {
            UsePixelatedVer = input.ReadBool();
            break;
          }
          case 8194: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            MotionType = (global::shared.VfxMotionType) input.ReadEnum();
            break;
          }
          case 24: {
            DurationType = (global::shared.VfxDurationType) input.ReadEnum();
            break;
          }
          case 32: {
            OnCharacter = input.ReadBool();
            break;
          }
          case 40: {
            OnBullet = input.ReadBool();
            break;
          }
          case 48: {
            OnTrap = input.ReadBool();
            break;
          }
          case 56: {
            UsePixelatedVer = input.ReadBool();
            break;
          }
          case 8194: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BulletConfig : pb::IMessage<BulletConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BulletConfig> _parser = new pb::MessageParser<BulletConfig>(() => new BulletConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BulletConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig(BulletConfig other) : this() {
      startupFrames_ = other.startupFrames_;
      cancellableStFrame_ = other.cancellableStFrame_;
      cancellableEdFrame_ = other.cancellableEdFrame_;
      activeFrames_ = other.activeFrames_;
      hitStunFrames_ = other.hitStunFrames_;
      blockStunFrames_ = other.blockStunFrames_;
      pushbackVelX_ = other.pushbackVelX_;
      pushbackVelY_ = other.pushbackVelY_;
      damage_ = other.damage_;
      selfLockVelX_ = other.selfLockVelX_;
      selfLockVelY_ = other.selfLockVelY_;
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      blowUp_ = other.blowUp_;
      speciesId_ = other.speciesId_;
      explosionFrames_ = other.explosionFrames_;
      bType_ = other.bType_;
      mhType_ = other.mhType_;
      simultaneousMultiHitCnt_ = other.simultaneousMultiHitCnt_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      cancelTransit_ = other.cancelTransit_.Clone();
      repeatQuota_ = other.repeatQuota_;
      activeVfxSpeciesId_ = other.activeVfxSpeciesId_;
      explosionVfxSpeciesId_ = other.explosionVfxSpeciesId_;
      allowsWalking_ = other.allowsWalking_;
      allowsCrouching_ = other.allowsCrouching_;
      hardness_ = other.hardness_;
      startupInvinsibleFrames_ = other.startupInvinsibleFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      perpAccMag_ = other.perpAccMag_;
      delaySelfVelToActive_ = other.delaySelfVelToActive_;
      speedIfNotHit_ = other.speedIfNotHit_;
      omitSoftPushback_ = other.omitSoftPushback_;
      hitboxSizeIncX_ = other.hitboxSizeIncX_;
      hitboxSizeIncY_ = other.hitboxSizeIncY_;
      remainsUponHit_ = other.remainsUponHit_;
      rotatesAlongVelocity_ = other.rotatesAlongVelocity_;
      defaultHardPushbackBounceQuota_ = other.defaultHardPushbackBounceQuota_;
      hardPushbackBounceNormFactor_ = other.hardPushbackBounceNormFactor_;
      hardPushbackBounceSheerFactor_ = other.hardPushbackBounceSheerFactor_;
      isPixelatedActiveVfx_ = other.isPixelatedActiveVfx_;
      isPixelatedExplostionVfx_ = other.isPixelatedExplostionVfx_;
      mhVanishOnMeleeHit_ = other.mhVanishOnMeleeHit_;
      downSlopePrimerVelY_ = other.downSlopePrimerVelY_;
      mhUpdatesOriginPos_ = other.mhUpdatesOriginPos_;
      beamCollision_ = other.beamCollision_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      visionOffsetX_ = other.visionOffsetX_;
      visionOffsetY_ = other.visionOffsetY_;
      visionSizeX_ = other.visionSizeX_;
      visionSizeY_ = other.visionSizeY_;
      selfLockVelYWhenFlying_ = other.selfLockVelYWhenFlying_;
      elementalAttrs_ = other.elementalAttrs_;
      cancellableByInventorySlotC_ = other.cancellableByInventorySlotC_;
      cancellableByInventorySlotD_ = other.cancellableByInventorySlotD_;
      spinAnchorX_ = other.spinAnchorX_;
      spinAnchorY_ = other.spinAnchorY_;
      beamVisualSizeY_ = other.beamVisualSizeY_;
      touchExplosionBombCollision_ = other.touchExplosionBombCollision_;
      airRidingGroundWave_ = other.airRidingGroundWave_;
      groundImpactMeleeCollision_ = other.groundImpactMeleeCollision_;
      wallImpactMeleeCollision_ = other.wallImpactMeleeCollision_;
      mhInheritsSpin_ = other.mhInheritsSpin_;
      initSpinCos_ = other.initSpinCos_;
      initSpinSin_ = other.initSpinSin_;
      finishingFrames_ = other.finishingFrames_;
      noExplosionOnHardPushback_ = other.noExplosionOnHardPushback_;
      startupVfxSpeciesId_ = other.startupVfxSpeciesId_;
      ifc_ = other.ifc_;
      reflectFireballXIfNotHarder_ = other.reflectFireballXIfNotHarder_;
      rejectsReflectionFromAnotherBullet_ = other.rejectsReflectionFromAnotherBullet_;
      providesXHardPushback_ = other.providesXHardPushback_;
      providesYHardPushbackTop_ = other.providesYHardPushbackTop_;
      providesYHardPushbackBottom_ = other.providesYHardPushbackBottom_;
      ignoreSlopeDeceleration_ = other.ignoreSlopeDeceleration_;
      rotateOffenderWithSpin_ = other.rotateOffenderWithSpin_;
      mhNotTriggerOnChHit_ = other.mhNotTriggerOnChHit_;
      mhNotTriggerOnHarderBulletHit_ = other.mhNotTriggerOnHarderBulletHit_;
      mhNotTriggerOnHardPushbackHit_ = other.mhNotTriggerOnHardPushbackHit_;
      hopperMissile_ = other.hopperMissile_;
      beamRendering_ = other.beamRendering_;
      missileSearchIntervalPow2Minus1_ = other.missileSearchIntervalPow2Minus1_;
      useChOffsetRegardlessOfEmissionMh_ = other.useChOffsetRegardlessOfEmissionMh_;
      inplaceVanishExplosionSpeciesId_ = other.inplaceVanishExplosionSpeciesId_;
      animLoopingRdfOffset_ = other.animLoopingRdfOffset_;
      explosionAnimLoopingRdfOffset_ = other.explosionAnimLoopingRdfOffset_;
      gaugeIncReductionRatio_ = other.gaugeIncReductionRatio_;
      mhInheritsFramesInBlState_ = other.mhInheritsFramesInBlState_;
      guardBreakerExtraHitCnt_ = other.guardBreakerExtraHitCnt_;
      takesDef1AsHardPushback_ = other.takesDef1AsHardPushback_;
      collisionTypeMask_ = other.collisionTypeMask_;
      takesGravity_ = other.takesGravity_;
      buffConfig_ = other.buffConfig_ != null ? other.buffConfig_.Clone() : null;
      characterEmitSfxName_ = other.characterEmitSfxName_;
      fireballEmitSfxName_ = other.fireballEmitSfxName_;
      explosionSfxName_ = other.explosionSfxName_;
      activeSfxName_ = other.activeSfxName_;
      explosionOnFleshSfxName_ = other.explosionOnFleshSfxName_;
      explosionOnRockSfxName_ = other.explosionOnRockSfxName_;
      explosionOnMetalSfxName_ = other.explosionOnMetalSfxName_;
      explosionOnWoodSfxName_ = other.explosionOnWoodSfxName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletConfig Clone() {
      return new BulletConfig(this);
    }

    /// <summary>Field number for the "startupFrames" field.</summary>
    public const int StartupFramesFieldNumber = 1;
    private int startupFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartupFrames {
      get { return startupFrames_; }
      set {
        startupFrames_ = value;
      }
    }

    /// <summary>Field number for the "cancellableStFrame" field.</summary>
    public const int CancellableStFrameFieldNumber = 2;
    private int cancellableStFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CancellableStFrame {
      get { return cancellableStFrame_; }
      set {
        cancellableStFrame_ = value;
      }
    }

    /// <summary>Field number for the "cancellableEdFrame" field.</summary>
    public const int CancellableEdFrameFieldNumber = 3;
    private int cancellableEdFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CancellableEdFrame {
      get { return cancellableEdFrame_; }
      set {
        cancellableEdFrame_ = value;
      }
    }

    /// <summary>Field number for the "activeFrames" field.</summary>
    public const int ActiveFramesFieldNumber = 4;
    private int activeFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveFrames {
      get { return activeFrames_; }
      set {
        activeFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitStunFrames" field.</summary>
    public const int HitStunFramesFieldNumber = 5;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "blockStunFrames" field.</summary>
    public const int BlockStunFramesFieldNumber = 6;
    private int blockStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlockStunFrames {
      get { return blockStunFrames_; }
      set {
        blockStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "pushbackVelX" field.</summary>
    public const int PushbackVelXFieldNumber = 7;
    private int pushbackVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PushbackVelX {
      get { return pushbackVelX_; }
      set {
        pushbackVelX_ = value;
      }
    }

    /// <summary>Field number for the "pushbackVelY" field.</summary>
    public const int PushbackVelYFieldNumber = 8;
    private int pushbackVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PushbackVelY {
      get { return pushbackVelY_; }
      set {
        pushbackVelY_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 9;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "selfLockVelX" field.</summary>
    public const int SelfLockVelXFieldNumber = 10;
    private int selfLockVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SelfLockVelX {
      get { return selfLockVelX_; }
      set {
        selfLockVelX_ = value;
      }
    }

    /// <summary>Field number for the "selfLockVelY" field.</summary>
    public const int SelfLockVelYFieldNumber = 11;
    private int selfLockVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SelfLockVelY {
      get { return selfLockVelY_; }
      set {
        selfLockVelY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetX" field.</summary>
    public const int HitboxOffsetXFieldNumber = 12;
    private int hitboxOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetY" field.</summary>
    public const int HitboxOffsetYFieldNumber = 13;
    private int hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeX" field.</summary>
    public const int HitboxSizeXFieldNumber = 14;
    private int hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeY" field.</summary>
    public const int HitboxSizeYFieldNumber = 15;
    private int hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "blowUp" field.</summary>
    public const int BlowUpFieldNumber = 16;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 17;
    private int speciesId_;
    /// <summary>
    /// For fireball, this SpeciesId specifies both the active animation and the explosion animation (if "explosionSpeciesId" not explicitly assigned), for melee it specifies the explosion animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionFrames" field.</summary>
    public const int ExplosionFramesFieldNumber = 18;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "bType" field.</summary>
    public const int BTypeFieldNumber = 19;
    private global::shared.BulletType bType_ = global::shared.BulletType.Undetermined;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletType BType {
      get { return bType_; }
      set {
        bType_ = value;
      }
    }

    /// <summary>Field number for the "mhType" field.</summary>
    public const int MhTypeFieldNumber = 20;
    private global::shared.MultiHitType mhType_ = global::shared.MultiHitType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.MultiHitType MhType {
      get { return mhType_; }
      set {
        mhType_ = value;
      }
    }

    /// <summary>Field number for the "simultaneousMultiHitCnt" field.</summary>
    public const int SimultaneousMultiHitCntFieldNumber = 21;
    private uint simultaneousMultiHitCnt_;
    /// <summary>
    /// marks how many simultaneous bullets are left, default to 0 indicating that the current bullet is the only one to fire 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SimultaneousMultiHitCnt {
      get { return simultaneousMultiHitCnt_; }
      set {
        simultaneousMultiHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 22;
    private int speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 23;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 24;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "cancelTransit" field.</summary>
    public const int CancelTransitFieldNumber = 25;
    private static readonly pbc::MapField<int, uint>.Codec _map_cancelTransit_codec
        = new pbc::MapField<int, uint>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 202);
    private readonly pbc::MapField<int, uint> cancelTransit_ = new pbc::MapField<int, uint>();
    /// <summary>
    /// patternId -> skillId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, uint> CancelTransit {
      get { return cancelTransit_; }
    }

    /// <summary>Field number for the "repeatQuota" field.</summary>
    public const int RepeatQuotaFieldNumber = 26;
    private int repeatQuota_;
    /// <summary>
    /// for long lasting bullet, applicable for "mhType == (FromPrevHitActual | FromPrevHitAnyway)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepeatQuota {
      get { return repeatQuota_; }
      set {
        repeatQuota_ = value;
      }
    }

    /// <summary>Field number for the "activeVfxSpeciesId" field.</summary>
    public const int ActiveVfxSpeciesIdFieldNumber = 27;
    private int activeVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveVfxSpeciesId {
      get { return activeVfxSpeciesId_; }
      set {
        activeVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionVfxSpeciesId" field.</summary>
    public const int ExplosionVfxSpeciesIdFieldNumber = 28;
    private int explosionVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when exploding
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionVfxSpeciesId {
      get { return explosionVfxSpeciesId_; }
      set {
        explosionVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "allowsWalking" field.</summary>
    public const int AllowsWalkingFieldNumber = 29;
    private bool allowsWalking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowsWalking {
      get { return allowsWalking_; }
      set {
        allowsWalking_ = value;
      }
    }

    /// <summary>Field number for the "allowsCrouching" field.</summary>
    public const int AllowsCrouchingFieldNumber = 30;
    private bool allowsCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowsCrouching {
      get { return allowsCrouching_; }
      set {
        allowsCrouching_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 31;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "startupInvinsibleFrames" field.</summary>
    public const int StartupInvinsibleFramesFieldNumber = 32;
    private int startupInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartupInvinsibleFrames {
      get { return startupInvinsibleFrames_; }
      set {
        startupInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitInvinsibleFrames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 33;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "explosionSpeciesId" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 34;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "perpAccMag" field.</summary>
    public const int PerpAccMagFieldNumber = 35;
    private int perpAccMag_;
    /// <summary>
    /// acceleration perpendicular to instantaneous velocity per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PerpAccMag {
      get { return perpAccMag_; }
      set {
        perpAccMag_ = value;
      }
    }

    /// <summary>Field number for the "delaySelfVelToActive" field.</summary>
    public const int DelaySelfVelToActiveFieldNumber = 36;
    private bool delaySelfVelToActive_;
    /// <summary>
    /// if true, "selfLockVelX" &amp; "selfLockVelY" would only be applied when bullet is active 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DelaySelfVelToActive {
      get { return delaySelfVelToActive_; }
      set {
        delaySelfVelToActive_ = value;
      }
    }

    /// <summary>Field number for the "speedIfNotHit" field.</summary>
    public const int SpeedIfNotHitFieldNumber = 37;
    private int speedIfNotHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeedIfNotHit {
      get { return speedIfNotHit_; }
      set {
        speedIfNotHit_ = value;
      }
    }

    /// <summary>Field number for the "omitSoftPushback" field.</summary>
    public const int OmitSoftPushbackFieldNumber = 38;
    private bool omitSoftPushback_;
    /// <summary>
    /// Only used for melee bullets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitSoftPushback {
      get { return omitSoftPushback_; }
      set {
        omitSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeIncX" field.</summary>
    public const int HitboxSizeIncXFieldNumber = 39;
    private int hitboxSizeIncX_;
    /// <summary>
    /// Change of hitboxSizeX per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeIncX {
      get { return hitboxSizeIncX_; }
      set {
        hitboxSizeIncX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeIncY" field.</summary>
    public const int HitboxSizeIncYFieldNumber = 40;
    private int hitboxSizeIncY_;
    /// <summary>
    /// Change of hitboxSizeY per frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeIncY {
      get { return hitboxSizeIncY_; }
      set {
        hitboxSizeIncY_ = value;
      }
    }

    /// <summary>Field number for the "remainsUponHit" field.</summary>
    public const int RemainsUponHitFieldNumber = 41;
    private bool remainsUponHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RemainsUponHit {
      get { return remainsUponHit_; }
      set {
        remainsUponHit_ = value;
      }
    }

    /// <summary>Field number for the "rotatesAlongVelocity" field.</summary>
    public const int RotatesAlongVelocityFieldNumber = 42;
    private bool rotatesAlongVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RotatesAlongVelocity {
      get { return rotatesAlongVelocity_; }
      set {
        rotatesAlongVelocity_ = value;
      }
    }

    /// <summary>Field number for the "defaultHardPushbackBounceQuota" field.</summary>
    public const int DefaultHardPushbackBounceQuotaFieldNumber = 43;
    private int defaultHardPushbackBounceQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultHardPushbackBounceQuota {
      get { return defaultHardPushbackBounceQuota_; }
      set {
        defaultHardPushbackBounceQuota_ = value;
      }
    }

    /// <summary>Field number for the "hardPushbackBounceNormFactor" field.</summary>
    public const int HardPushbackBounceNormFactorFieldNumber = 44;
    private float hardPushbackBounceNormFactor_;
    /// <summary>
    /// For attenuation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HardPushbackBounceNormFactor {
      get { return hardPushbackBounceNormFactor_; }
      set {
        hardPushbackBounceNormFactor_ = value;
      }
    }

    /// <summary>Field number for the "hardPushbackBounceSheerFactor" field.</summary>
    public const int HardPushbackBounceSheerFactorFieldNumber = 45;
    private float hardPushbackBounceSheerFactor_;
    /// <summary>
    /// For attenuation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HardPushbackBounceSheerFactor {
      get { return hardPushbackBounceSheerFactor_; }
      set {
        hardPushbackBounceSheerFactor_ = value;
      }
    }

    /// <summary>Field number for the "isPixelatedActiveVfx" field.</summary>
    public const int IsPixelatedActiveVfxFieldNumber = 46;
    private bool isPixelatedActiveVfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPixelatedActiveVfx {
      get { return isPixelatedActiveVfx_; }
      set {
        isPixelatedActiveVfx_ = value;
      }
    }

    /// <summary>Field number for the "isPixelatedExplostionVfx" field.</summary>
    public const int IsPixelatedExplostionVfxFieldNumber = 47;
    private bool isPixelatedExplostionVfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPixelatedExplostionVfx {
      get { return isPixelatedExplostionVfx_; }
      set {
        isPixelatedExplostionVfx_ = value;
      }
    }

    /// <summary>Field number for the "mhVanishOnMeleeHit" field.</summary>
    public const int MhVanishOnMeleeHitFieldNumber = 48;
    private bool mhVanishOnMeleeHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhVanishOnMeleeHit {
      get { return mhVanishOnMeleeHit_; }
      set {
        mhVanishOnMeleeHit_ = value;
      }
    }

    /// <summary>Field number for the "downSlopePrimerVelY" field.</summary>
    public const int DownSlopePrimerVelYFieldNumber = 49;
    private int downSlopePrimerVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DownSlopePrimerVelY {
      get { return downSlopePrimerVelY_; }
      set {
        downSlopePrimerVelY_ = value;
      }
    }

    /// <summary>Field number for the "mhUpdatesOriginPos" field.</summary>
    public const int MhUpdatesOriginPosFieldNumber = 50;
    private bool mhUpdatesOriginPos_;
    /// <summary>
    /// Default is false, multihit bullets will inherit (originatedVirtualGridX, originatedVirtualGridY) from the previous bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhUpdatesOriginPos {
      get { return mhUpdatesOriginPos_; }
      set {
        mhUpdatesOriginPos_ = value;
      }
    }

    /// <summary>Field number for the "beamCollision" field.</summary>
    public const int BeamCollisionFieldNumber = 51;
    private bool beamCollision_;
    /// <summary>
    /// If true, both collision &amp; rendering of the bullet will respect (originatedVirtualGridX, originatedVirtualGridY) -> (virtualGridX, virtualGridY)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BeamCollision {
      get { return beamCollision_; }
      set {
        beamCollision_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelCos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 52;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelSin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 53;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "visionOffsetX" field.</summary>
    public const int VisionOffsetXFieldNumber = 54;
    private int visionOffsetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionOffsetX {
      get { return visionOffsetX_; }
      set {
        visionOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "visionOffsetY" field.</summary>
    public const int VisionOffsetYFieldNumber = 55;
    private int visionOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionOffsetY {
      get { return visionOffsetY_; }
      set {
        visionOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "visionSizeX" field.</summary>
    public const int VisionSizeXFieldNumber = 56;
    private int visionSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionSizeX {
      get { return visionSizeX_; }
      set {
        visionSizeX_ = value;
      }
    }

    /// <summary>Field number for the "visionSizeY" field.</summary>
    public const int VisionSizeYFieldNumber = 57;
    private int visionSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionSizeY {
      get { return visionSizeY_; }
      set {
        visionSizeY_ = value;
      }
    }

    /// <summary>Field number for the "selfLockVelYWhenFlying" field.</summary>
    public const int SelfLockVelYWhenFlyingFieldNumber = 58;
    private int selfLockVelYWhenFlying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SelfLockVelYWhenFlying {
      get { return selfLockVelYWhenFlying_; }
      set {
        selfLockVelYWhenFlying_ = value;
      }
    }

    /// <summary>Field number for the "elementalAttrs" field.</summary>
    public const int ElementalAttrsFieldNumber = 59;
    private uint elementalAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ElementalAttrs {
      get { return elementalAttrs_; }
      set {
        elementalAttrs_ = value;
      }
    }

    /// <summary>Field number for the "cancellableByInventorySlotC" field.</summary>
    public const int CancellableByInventorySlotCFieldNumber = 60;
    private bool cancellableByInventorySlotC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CancellableByInventorySlotC {
      get { return cancellableByInventorySlotC_; }
      set {
        cancellableByInventorySlotC_ = value;
      }
    }

    /// <summary>Field number for the "cancellableByInventorySlotD" field.</summary>
    public const int CancellableByInventorySlotDFieldNumber = 61;
    private bool cancellableByInventorySlotD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CancellableByInventorySlotD {
      get { return cancellableByInventorySlotD_; }
      set {
        cancellableByInventorySlotD_ = value;
      }
    }

    /// <summary>Field number for the "spinAnchorX" field.</summary>
    public const int SpinAnchorXFieldNumber = 62;
    private float spinAnchorX_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinAnchorX {
      get { return spinAnchorX_; }
      set {
        spinAnchorX_ = value;
      }
    }

    /// <summary>Field number for the "spinAnchorY" field.</summary>
    public const int SpinAnchorYFieldNumber = 63;
    private float spinAnchorY_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinAnchorY {
      get { return spinAnchorY_; }
      set {
        spinAnchorY_ = value;
      }
    }

    /// <summary>Field number for the "beamVisualSizeY" field.</summary>
    public const int BeamVisualSizeYFieldNumber = 64;
    private int beamVisualSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BeamVisualSizeY {
      get { return beamVisualSizeY_; }
      set {
        beamVisualSizeY_ = value;
      }
    }

    /// <summary>Field number for the "touchExplosionBombCollision" field.</summary>
    public const int TouchExplosionBombCollisionFieldNumber = 65;
    private bool touchExplosionBombCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TouchExplosionBombCollision {
      get { return touchExplosionBombCollision_; }
      set {
        touchExplosionBombCollision_ = value;
      }
    }

    /// <summary>Field number for the "airRidingGroundWave" field.</summary>
    public const int AirRidingGroundWaveFieldNumber = 66;
    private bool airRidingGroundWave_;
    /// <summary>
    /// Only applicable to "bType == GroundWave"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AirRidingGroundWave {
      get { return airRidingGroundWave_; }
      set {
        airRidingGroundWave_ = value;
      }
    }

    /// <summary>Field number for the "groundImpactMeleeCollision" field.</summary>
    public const int GroundImpactMeleeCollisionFieldNumber = 67;
    private bool groundImpactMeleeCollision_;
    /// <summary>
    /// Only applicable to "bType == Melee"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GroundImpactMeleeCollision {
      get { return groundImpactMeleeCollision_; }
      set {
        groundImpactMeleeCollision_ = value;
      }
    }

    /// <summary>Field number for the "wallImpactMeleeCollision" field.</summary>
    public const int WallImpactMeleeCollisionFieldNumber = 68;
    private bool wallImpactMeleeCollision_;
    /// <summary>
    /// Only applicable to "bType == Melee"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WallImpactMeleeCollision {
      get { return wallImpactMeleeCollision_; }
      set {
        wallImpactMeleeCollision_ = value;
      }
    }

    /// <summary>Field number for the "mhInheritsSpin" field.</summary>
    public const int MhInheritsSpinFieldNumber = 69;
    private bool mhInheritsSpin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhInheritsSpin {
      get { return mhInheritsSpin_; }
      set {
        mhInheritsSpin_ = value;
      }
    }

    /// <summary>Field number for the "initSpinCos" field.</summary>
    public const int InitSpinCosFieldNumber = 70;
    private float initSpinCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float InitSpinCos {
      get { return initSpinCos_; }
      set {
        initSpinCos_ = value;
      }
    }

    /// <summary>Field number for the "initSpinSin" field.</summary>
    public const int InitSpinSinFieldNumber = 71;
    private float initSpinSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float InitSpinSin {
      get { return initSpinSin_; }
      set {
        initSpinSin_ = value;
      }
    }

    /// <summary>Field number for the "finishingFrames" field.</summary>
    public const int FinishingFramesFieldNumber = 72;
    private int finishingFrames_;
    /// <summary>
    /// Only applicable to "true == groundImpactMeleeCollision"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FinishingFrames {
      get { return finishingFrames_; }
      set {
        finishingFrames_ = value;
      }
    }

    /// <summary>Field number for the "noExplosionOnHardPushback" field.</summary>
    public const int NoExplosionOnHardPushbackFieldNumber = 73;
    private bool noExplosionOnHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NoExplosionOnHardPushback {
      get { return noExplosionOnHardPushback_; }
      set {
        noExplosionOnHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "startupVfxSpeciesId" field.</summary>
    public const int StartupVfxSpeciesIdFieldNumber = 74;
    private int startupVfxSpeciesId_;
    /// <summary>
    /// currently only support 1 vfx config when starting up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartupVfxSpeciesId {
      get { return startupVfxSpeciesId_; }
      set {
        startupVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "ifc" field.</summary>
    public const int IfcFieldNumber = 75;
    private global::shared.IfaceCat ifc_ = global::shared.IfaceCat.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.IfaceCat Ifc {
      get { return ifc_; }
      set {
        ifc_ = value;
      }
    }

    /// <summary>Field number for the "reflectFireballXIfNotHarder" field.</summary>
    public const int ReflectFireballXIfNotHarderFieldNumber = 76;
    private bool reflectFireballXIfNotHarder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReflectFireballXIfNotHarder {
      get { return reflectFireballXIfNotHarder_; }
      set {
        reflectFireballXIfNotHarder_ = value;
      }
    }

    /// <summary>Field number for the "rejectsReflectionFromAnotherBullet" field.</summary>
    public const int RejectsReflectionFromAnotherBulletFieldNumber = 77;
    private bool rejectsReflectionFromAnotherBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RejectsReflectionFromAnotherBullet {
      get { return rejectsReflectionFromAnotherBullet_; }
      set {
        rejectsReflectionFromAnotherBullet_ = value;
      }
    }

    /// <summary>Field number for the "providesXHardPushback" field.</summary>
    public const int ProvidesXHardPushbackFieldNumber = 78;
    private bool providesXHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesXHardPushback {
      get { return providesXHardPushback_; }
      set {
        providesXHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "providesYHardPushbackTop" field.</summary>
    public const int ProvidesYHardPushbackTopFieldNumber = 79;
    private bool providesYHardPushbackTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesYHardPushbackTop {
      get { return providesYHardPushbackTop_; }
      set {
        providesYHardPushbackTop_ = value;
      }
    }

    /// <summary>Field number for the "providesYHardPushbackBottom" field.</summary>
    public const int ProvidesYHardPushbackBottomFieldNumber = 80;
    private bool providesYHardPushbackBottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesYHardPushbackBottom {
      get { return providesYHardPushbackBottom_; }
      set {
        providesYHardPushbackBottom_ = value;
      }
    }

    /// <summary>Field number for the "ignoreSlopeDeceleration" field.</summary>
    public const int IgnoreSlopeDecelerationFieldNumber = 81;
    private bool ignoreSlopeDeceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreSlopeDeceleration {
      get { return ignoreSlopeDeceleration_; }
      set {
        ignoreSlopeDeceleration_ = value;
      }
    }

    /// <summary>Field number for the "rotateOffenderWithSpin" field.</summary>
    public const int RotateOffenderWithSpinFieldNumber = 82;
    private bool rotateOffenderWithSpin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RotateOffenderWithSpin {
      get { return rotateOffenderWithSpin_; }
      set {
        rotateOffenderWithSpin_ = value;
      }
    }

    /// <summary>Field number for the "mhNotTriggerOnChHit" field.</summary>
    public const int MhNotTriggerOnChHitFieldNumber = 83;
    private bool mhNotTriggerOnChHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhNotTriggerOnChHit {
      get { return mhNotTriggerOnChHit_; }
      set {
        mhNotTriggerOnChHit_ = value;
      }
    }

    /// <summary>Field number for the "mhNotTriggerOnHarderBulletHit" field.</summary>
    public const int MhNotTriggerOnHarderBulletHitFieldNumber = 84;
    private bool mhNotTriggerOnHarderBulletHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhNotTriggerOnHarderBulletHit {
      get { return mhNotTriggerOnHarderBulletHit_; }
      set {
        mhNotTriggerOnHarderBulletHit_ = value;
      }
    }

    /// <summary>Field number for the "mhNotTriggerOnHardPushbackHit" field.</summary>
    public const int MhNotTriggerOnHardPushbackHitFieldNumber = 85;
    private bool mhNotTriggerOnHardPushbackHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhNotTriggerOnHardPushbackHit {
      get { return mhNotTriggerOnHardPushbackHit_; }
      set {
        mhNotTriggerOnHardPushbackHit_ = value;
      }
    }

    /// <summary>Field number for the "hopperMissile" field.</summary>
    public const int HopperMissileFieldNumber = 86;
    private bool hopperMissile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HopperMissile {
      get { return hopperMissile_; }
      set {
        hopperMissile_ = value;
      }
    }

    /// <summary>Field number for the "beamRendering" field.</summary>
    public const int BeamRenderingFieldNumber = 87;
    private bool beamRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BeamRendering {
      get { return beamRendering_; }
      set {
        beamRendering_ = value;
      }
    }

    /// <summary>Field number for the "missileSearchIntervalPow2Minus1" field.</summary>
    public const int MissileSearchIntervalPow2Minus1FieldNumber = 88;
    private uint missileSearchIntervalPow2Minus1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MissileSearchIntervalPow2Minus1 {
      get { return missileSearchIntervalPow2Minus1_; }
      set {
        missileSearchIntervalPow2Minus1_ = value;
      }
    }

    /// <summary>Field number for the "useChOffsetRegardlessOfEmissionMh" field.</summary>
    public const int UseChOffsetRegardlessOfEmissionMhFieldNumber = 89;
    private bool useChOffsetRegardlessOfEmissionMh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseChOffsetRegardlessOfEmissionMh {
      get { return useChOffsetRegardlessOfEmissionMh_; }
      set {
        useChOffsetRegardlessOfEmissionMh_ = value;
      }
    }

    /// <summary>Field number for the "inplaceVanishExplosionSpeciesId" field.</summary>
    public const int InplaceVanishExplosionSpeciesIdFieldNumber = 90;
    private int inplaceVanishExplosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InplaceVanishExplosionSpeciesId {
      get { return inplaceVanishExplosionSpeciesId_; }
      set {
        inplaceVanishExplosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "animLoopingRdfOffset" field.</summary>
    public const int AnimLoopingRdfOffsetFieldNumber = 91;
    private int animLoopingRdfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AnimLoopingRdfOffset {
      get { return animLoopingRdfOffset_; }
      set {
        animLoopingRdfOffset_ = value;
      }
    }

    /// <summary>Field number for the "explosionAnimLoopingRdfOffset" field.</summary>
    public const int ExplosionAnimLoopingRdfOffsetFieldNumber = 92;
    private int explosionAnimLoopingRdfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionAnimLoopingRdfOffset {
      get { return explosionAnimLoopingRdfOffset_; }
      set {
        explosionAnimLoopingRdfOffset_ = value;
      }
    }

    /// <summary>Field number for the "gaugeIncReductionRatio" field.</summary>
    public const int GaugeIncReductionRatioFieldNumber = 93;
    private float gaugeIncReductionRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GaugeIncReductionRatio {
      get { return gaugeIncReductionRatio_; }
      set {
        gaugeIncReductionRatio_ = value;
      }
    }

    /// <summary>Field number for the "mhInheritsFramesInBlState" field.</summary>
    public const int MhInheritsFramesInBlStateFieldNumber = 94;
    private bool mhInheritsFramesInBlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MhInheritsFramesInBlState {
      get { return mhInheritsFramesInBlState_; }
      set {
        mhInheritsFramesInBlState_ = value;
      }
    }

    /// <summary>Field number for the "guardBreakerExtraHitCnt" field.</summary>
    public const int GuardBreakerExtraHitCntFieldNumber = 95;
    private uint guardBreakerExtraHitCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GuardBreakerExtraHitCnt {
      get { return guardBreakerExtraHitCnt_; }
      set {
        guardBreakerExtraHitCnt_ = value;
      }
    }

    /// <summary>Field number for the "takesDef1AsHardPushback" field.</summary>
    public const int TakesDef1AsHardPushbackFieldNumber = 96;
    private bool takesDef1AsHardPushback_;
    /// <summary>
    /// [WARNING] Always implies "beamCollision" and must be used together with "beamCollision".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TakesDef1AsHardPushback {
      get { return takesDef1AsHardPushback_; }
      set {
        takesDef1AsHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    /// <summary>Field number for the "takesGravity" field.</summary>
    public const int TakesGravityFieldNumber = 1030;
    private bool takesGravity_;
    /// <summary>
    /// e.g. a bomb, a ground-wave
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TakesGravity {
      get { return takesGravity_; }
      set {
        takesGravity_ = value;
      }
    }

    /// <summary>Field number for the "buffConfig" field.</summary>
    public const int BuffConfigFieldNumber = 1031;
    private global::shared.BuffConfig buffConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffConfig BuffConfig {
      get { return buffConfig_; }
      set {
        buffConfig_ = value;
      }
    }

    /// <summary>Field number for the "characterEmitSfxName" field.</summary>
    public const int CharacterEmitSfxNameFieldNumber = 2048;
    private string characterEmitSfxName_ = "";
    /// <summary>
    /// Sfx configs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CharacterEmitSfxName {
      get { return characterEmitSfxName_; }
      set {
        characterEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fireballEmitSfxName" field.</summary>
    public const int FireballEmitSfxNameFieldNumber = 2049;
    private string fireballEmitSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FireballEmitSfxName {
      get { return fireballEmitSfxName_; }
      set {
        fireballEmitSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionSfxName" field.</summary>
    public const int ExplosionSfxNameFieldNumber = 2050;
    private string explosionSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionSfxName {
      get { return explosionSfxName_; }
      set {
        explosionSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeSfxName" field.</summary>
    public const int ActiveSfxNameFieldNumber = 2051;
    private string activeSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveSfxName {
      get { return activeSfxName_; }
      set {
        activeSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionOnFleshSfxName" field.</summary>
    public const int ExplosionOnFleshSfxNameFieldNumber = 2052;
    private string explosionOnFleshSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionOnFleshSfxName {
      get { return explosionOnFleshSfxName_; }
      set {
        explosionOnFleshSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionOnRockSfxName" field.</summary>
    public const int ExplosionOnRockSfxNameFieldNumber = 2053;
    private string explosionOnRockSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionOnRockSfxName {
      get { return explosionOnRockSfxName_; }
      set {
        explosionOnRockSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionOnMetalSfxName" field.</summary>
    public const int ExplosionOnMetalSfxNameFieldNumber = 2054;
    private string explosionOnMetalSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionOnMetalSfxName {
      get { return explosionOnMetalSfxName_; }
      set {
        explosionOnMetalSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "explosionOnWoodSfxName" field.</summary>
    public const int ExplosionOnWoodSfxNameFieldNumber = 2055;
    private string explosionOnWoodSfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExplosionOnWoodSfxName {
      get { return explosionOnWoodSfxName_; }
      set {
        explosionOnWoodSfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BulletConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BulletConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartupFrames != other.StartupFrames) return false;
      if (CancellableStFrame != other.CancellableStFrame) return false;
      if (CancellableEdFrame != other.CancellableEdFrame) return false;
      if (ActiveFrames != other.ActiveFrames) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (BlockStunFrames != other.BlockStunFrames) return false;
      if (PushbackVelX != other.PushbackVelX) return false;
      if (PushbackVelY != other.PushbackVelY) return false;
      if (Damage != other.Damage) return false;
      if (SelfLockVelX != other.SelfLockVelX) return false;
      if (SelfLockVelY != other.SelfLockVelY) return false;
      if (HitboxOffsetX != other.HitboxOffsetX) return false;
      if (HitboxOffsetY != other.HitboxOffsetY) return false;
      if (HitboxSizeX != other.HitboxSizeX) return false;
      if (HitboxSizeY != other.HitboxSizeY) return false;
      if (BlowUp != other.BlowUp) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BType != other.BType) return false;
      if (MhType != other.MhType) return false;
      if (SimultaneousMultiHitCnt != other.SimultaneousMultiHitCnt) return false;
      if (Speed != other.Speed) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (!CancelTransit.Equals(other.CancelTransit)) return false;
      if (RepeatQuota != other.RepeatQuota) return false;
      if (ActiveVfxSpeciesId != other.ActiveVfxSpeciesId) return false;
      if (ExplosionVfxSpeciesId != other.ExplosionVfxSpeciesId) return false;
      if (AllowsWalking != other.AllowsWalking) return false;
      if (AllowsCrouching != other.AllowsCrouching) return false;
      if (Hardness != other.Hardness) return false;
      if (StartupInvinsibleFrames != other.StartupInvinsibleFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (PerpAccMag != other.PerpAccMag) return false;
      if (DelaySelfVelToActive != other.DelaySelfVelToActive) return false;
      if (SpeedIfNotHit != other.SpeedIfNotHit) return false;
      if (OmitSoftPushback != other.OmitSoftPushback) return false;
      if (HitboxSizeIncX != other.HitboxSizeIncX) return false;
      if (HitboxSizeIncY != other.HitboxSizeIncY) return false;
      if (RemainsUponHit != other.RemainsUponHit) return false;
      if (RotatesAlongVelocity != other.RotatesAlongVelocity) return false;
      if (DefaultHardPushbackBounceQuota != other.DefaultHardPushbackBounceQuota) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HardPushbackBounceNormFactor, other.HardPushbackBounceNormFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HardPushbackBounceSheerFactor, other.HardPushbackBounceSheerFactor)) return false;
      if (IsPixelatedActiveVfx != other.IsPixelatedActiveVfx) return false;
      if (IsPixelatedExplostionVfx != other.IsPixelatedExplostionVfx) return false;
      if (MhVanishOnMeleeHit != other.MhVanishOnMeleeHit) return false;
      if (DownSlopePrimerVelY != other.DownSlopePrimerVelY) return false;
      if (MhUpdatesOriginPos != other.MhUpdatesOriginPos) return false;
      if (BeamCollision != other.BeamCollision) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (VisionOffsetX != other.VisionOffsetX) return false;
      if (VisionOffsetY != other.VisionOffsetY) return false;
      if (VisionSizeX != other.VisionSizeX) return false;
      if (VisionSizeY != other.VisionSizeY) return false;
      if (SelfLockVelYWhenFlying != other.SelfLockVelYWhenFlying) return false;
      if (ElementalAttrs != other.ElementalAttrs) return false;
      if (CancellableByInventorySlotC != other.CancellableByInventorySlotC) return false;
      if (CancellableByInventorySlotD != other.CancellableByInventorySlotD) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorX, other.SpinAnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorY, other.SpinAnchorY)) return false;
      if (BeamVisualSizeY != other.BeamVisualSizeY) return false;
      if (TouchExplosionBombCollision != other.TouchExplosionBombCollision) return false;
      if (AirRidingGroundWave != other.AirRidingGroundWave) return false;
      if (GroundImpactMeleeCollision != other.GroundImpactMeleeCollision) return false;
      if (WallImpactMeleeCollision != other.WallImpactMeleeCollision) return false;
      if (MhInheritsSpin != other.MhInheritsSpin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpinCos, other.InitSpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitSpinSin, other.InitSpinSin)) return false;
      if (FinishingFrames != other.FinishingFrames) return false;
      if (NoExplosionOnHardPushback != other.NoExplosionOnHardPushback) return false;
      if (StartupVfxSpeciesId != other.StartupVfxSpeciesId) return false;
      if (Ifc != other.Ifc) return false;
      if (ReflectFireballXIfNotHarder != other.ReflectFireballXIfNotHarder) return false;
      if (RejectsReflectionFromAnotherBullet != other.RejectsReflectionFromAnotherBullet) return false;
      if (ProvidesXHardPushback != other.ProvidesXHardPushback) return false;
      if (ProvidesYHardPushbackTop != other.ProvidesYHardPushbackTop) return false;
      if (ProvidesYHardPushbackBottom != other.ProvidesYHardPushbackBottom) return false;
      if (IgnoreSlopeDeceleration != other.IgnoreSlopeDeceleration) return false;
      if (RotateOffenderWithSpin != other.RotateOffenderWithSpin) return false;
      if (MhNotTriggerOnChHit != other.MhNotTriggerOnChHit) return false;
      if (MhNotTriggerOnHarderBulletHit != other.MhNotTriggerOnHarderBulletHit) return false;
      if (MhNotTriggerOnHardPushbackHit != other.MhNotTriggerOnHardPushbackHit) return false;
      if (HopperMissile != other.HopperMissile) return false;
      if (BeamRendering != other.BeamRendering) return false;
      if (MissileSearchIntervalPow2Minus1 != other.MissileSearchIntervalPow2Minus1) return false;
      if (UseChOffsetRegardlessOfEmissionMh != other.UseChOffsetRegardlessOfEmissionMh) return false;
      if (InplaceVanishExplosionSpeciesId != other.InplaceVanishExplosionSpeciesId) return false;
      if (AnimLoopingRdfOffset != other.AnimLoopingRdfOffset) return false;
      if (ExplosionAnimLoopingRdfOffset != other.ExplosionAnimLoopingRdfOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GaugeIncReductionRatio, other.GaugeIncReductionRatio)) return false;
      if (MhInheritsFramesInBlState != other.MhInheritsFramesInBlState) return false;
      if (GuardBreakerExtraHitCnt != other.GuardBreakerExtraHitCnt) return false;
      if (TakesDef1AsHardPushback != other.TakesDef1AsHardPushback) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      if (TakesGravity != other.TakesGravity) return false;
      if (!object.Equals(BuffConfig, other.BuffConfig)) return false;
      if (CharacterEmitSfxName != other.CharacterEmitSfxName) return false;
      if (FireballEmitSfxName != other.FireballEmitSfxName) return false;
      if (ExplosionSfxName != other.ExplosionSfxName) return false;
      if (ActiveSfxName != other.ActiveSfxName) return false;
      if (ExplosionOnFleshSfxName != other.ExplosionOnFleshSfxName) return false;
      if (ExplosionOnRockSfxName != other.ExplosionOnRockSfxName) return false;
      if (ExplosionOnMetalSfxName != other.ExplosionOnMetalSfxName) return false;
      if (ExplosionOnWoodSfxName != other.ExplosionOnWoodSfxName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartupFrames != 0) hash ^= StartupFrames.GetHashCode();
      if (CancellableStFrame != 0) hash ^= CancellableStFrame.GetHashCode();
      if (CancellableEdFrame != 0) hash ^= CancellableEdFrame.GetHashCode();
      if (ActiveFrames != 0) hash ^= ActiveFrames.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (BlockStunFrames != 0) hash ^= BlockStunFrames.GetHashCode();
      if (PushbackVelX != 0) hash ^= PushbackVelX.GetHashCode();
      if (PushbackVelY != 0) hash ^= PushbackVelY.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (SelfLockVelX != 0) hash ^= SelfLockVelX.GetHashCode();
      if (SelfLockVelY != 0) hash ^= SelfLockVelY.GetHashCode();
      if (HitboxOffsetX != 0) hash ^= HitboxOffsetX.GetHashCode();
      if (HitboxOffsetY != 0) hash ^= HitboxOffsetY.GetHashCode();
      if (HitboxSizeX != 0) hash ^= HitboxSizeX.GetHashCode();
      if (HitboxSizeY != 0) hash ^= HitboxSizeY.GetHashCode();
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BType != global::shared.BulletType.Undetermined) hash ^= BType.GetHashCode();
      if (MhType != global::shared.MultiHitType.None) hash ^= MhType.GetHashCode();
      if (SimultaneousMultiHitCnt != 0) hash ^= SimultaneousMultiHitCnt.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      hash ^= CancelTransit.GetHashCode();
      if (RepeatQuota != 0) hash ^= RepeatQuota.GetHashCode();
      if (ActiveVfxSpeciesId != 0) hash ^= ActiveVfxSpeciesId.GetHashCode();
      if (ExplosionVfxSpeciesId != 0) hash ^= ExplosionVfxSpeciesId.GetHashCode();
      if (AllowsWalking != false) hash ^= AllowsWalking.GetHashCode();
      if (AllowsCrouching != false) hash ^= AllowsCrouching.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (StartupInvinsibleFrames != 0) hash ^= StartupInvinsibleFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (PerpAccMag != 0) hash ^= PerpAccMag.GetHashCode();
      if (DelaySelfVelToActive != false) hash ^= DelaySelfVelToActive.GetHashCode();
      if (SpeedIfNotHit != 0) hash ^= SpeedIfNotHit.GetHashCode();
      if (OmitSoftPushback != false) hash ^= OmitSoftPushback.GetHashCode();
      if (HitboxSizeIncX != 0) hash ^= HitboxSizeIncX.GetHashCode();
      if (HitboxSizeIncY != 0) hash ^= HitboxSizeIncY.GetHashCode();
      if (RemainsUponHit != false) hash ^= RemainsUponHit.GetHashCode();
      if (RotatesAlongVelocity != false) hash ^= RotatesAlongVelocity.GetHashCode();
      if (DefaultHardPushbackBounceQuota != 0) hash ^= DefaultHardPushbackBounceQuota.GetHashCode();
      if (HardPushbackBounceNormFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HardPushbackBounceNormFactor);
      if (HardPushbackBounceSheerFactor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HardPushbackBounceSheerFactor);
      if (IsPixelatedActiveVfx != false) hash ^= IsPixelatedActiveVfx.GetHashCode();
      if (IsPixelatedExplostionVfx != false) hash ^= IsPixelatedExplostionVfx.GetHashCode();
      if (MhVanishOnMeleeHit != false) hash ^= MhVanishOnMeleeHit.GetHashCode();
      if (DownSlopePrimerVelY != 0) hash ^= DownSlopePrimerVelY.GetHashCode();
      if (MhUpdatesOriginPos != false) hash ^= MhUpdatesOriginPos.GetHashCode();
      if (BeamCollision != false) hash ^= BeamCollision.GetHashCode();
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (VisionOffsetX != 0) hash ^= VisionOffsetX.GetHashCode();
      if (VisionOffsetY != 0) hash ^= VisionOffsetY.GetHashCode();
      if (VisionSizeX != 0) hash ^= VisionSizeX.GetHashCode();
      if (VisionSizeY != 0) hash ^= VisionSizeY.GetHashCode();
      if (SelfLockVelYWhenFlying != 0) hash ^= SelfLockVelYWhenFlying.GetHashCode();
      if (ElementalAttrs != 0) hash ^= ElementalAttrs.GetHashCode();
      if (CancellableByInventorySlotC != false) hash ^= CancellableByInventorySlotC.GetHashCode();
      if (CancellableByInventorySlotD != false) hash ^= CancellableByInventorySlotD.GetHashCode();
      if (SpinAnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorX);
      if (SpinAnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorY);
      if (BeamVisualSizeY != 0) hash ^= BeamVisualSizeY.GetHashCode();
      if (TouchExplosionBombCollision != false) hash ^= TouchExplosionBombCollision.GetHashCode();
      if (AirRidingGroundWave != false) hash ^= AirRidingGroundWave.GetHashCode();
      if (GroundImpactMeleeCollision != false) hash ^= GroundImpactMeleeCollision.GetHashCode();
      if (WallImpactMeleeCollision != false) hash ^= WallImpactMeleeCollision.GetHashCode();
      if (MhInheritsSpin != false) hash ^= MhInheritsSpin.GetHashCode();
      if (InitSpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpinCos);
      if (InitSpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitSpinSin);
      if (FinishingFrames != 0) hash ^= FinishingFrames.GetHashCode();
      if (NoExplosionOnHardPushback != false) hash ^= NoExplosionOnHardPushback.GetHashCode();
      if (StartupVfxSpeciesId != 0) hash ^= StartupVfxSpeciesId.GetHashCode();
      if (Ifc != global::shared.IfaceCat.Empty) hash ^= Ifc.GetHashCode();
      if (ReflectFireballXIfNotHarder != false) hash ^= ReflectFireballXIfNotHarder.GetHashCode();
      if (RejectsReflectionFromAnotherBullet != false) hash ^= RejectsReflectionFromAnotherBullet.GetHashCode();
      if (ProvidesXHardPushback != false) hash ^= ProvidesXHardPushback.GetHashCode();
      if (ProvidesYHardPushbackTop != false) hash ^= ProvidesYHardPushbackTop.GetHashCode();
      if (ProvidesYHardPushbackBottom != false) hash ^= ProvidesYHardPushbackBottom.GetHashCode();
      if (IgnoreSlopeDeceleration != false) hash ^= IgnoreSlopeDeceleration.GetHashCode();
      if (RotateOffenderWithSpin != false) hash ^= RotateOffenderWithSpin.GetHashCode();
      if (MhNotTriggerOnChHit != false) hash ^= MhNotTriggerOnChHit.GetHashCode();
      if (MhNotTriggerOnHarderBulletHit != false) hash ^= MhNotTriggerOnHarderBulletHit.GetHashCode();
      if (MhNotTriggerOnHardPushbackHit != false) hash ^= MhNotTriggerOnHardPushbackHit.GetHashCode();
      if (HopperMissile != false) hash ^= HopperMissile.GetHashCode();
      if (BeamRendering != false) hash ^= BeamRendering.GetHashCode();
      if (MissileSearchIntervalPow2Minus1 != 0) hash ^= MissileSearchIntervalPow2Minus1.GetHashCode();
      if (UseChOffsetRegardlessOfEmissionMh != false) hash ^= UseChOffsetRegardlessOfEmissionMh.GetHashCode();
      if (InplaceVanishExplosionSpeciesId != 0) hash ^= InplaceVanishExplosionSpeciesId.GetHashCode();
      if (AnimLoopingRdfOffset != 0) hash ^= AnimLoopingRdfOffset.GetHashCode();
      if (ExplosionAnimLoopingRdfOffset != 0) hash ^= ExplosionAnimLoopingRdfOffset.GetHashCode();
      if (GaugeIncReductionRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GaugeIncReductionRatio);
      if (MhInheritsFramesInBlState != false) hash ^= MhInheritsFramesInBlState.GetHashCode();
      if (GuardBreakerExtraHitCnt != 0) hash ^= GuardBreakerExtraHitCnt.GetHashCode();
      if (TakesDef1AsHardPushback != false) hash ^= TakesDef1AsHardPushback.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (TakesGravity != false) hash ^= TakesGravity.GetHashCode();
      if (buffConfig_ != null) hash ^= BuffConfig.GetHashCode();
      if (CharacterEmitSfxName.Length != 0) hash ^= CharacterEmitSfxName.GetHashCode();
      if (FireballEmitSfxName.Length != 0) hash ^= FireballEmitSfxName.GetHashCode();
      if (ExplosionSfxName.Length != 0) hash ^= ExplosionSfxName.GetHashCode();
      if (ActiveSfxName.Length != 0) hash ^= ActiveSfxName.GetHashCode();
      if (ExplosionOnFleshSfxName.Length != 0) hash ^= ExplosionOnFleshSfxName.GetHashCode();
      if (ExplosionOnRockSfxName.Length != 0) hash ^= ExplosionOnRockSfxName.GetHashCode();
      if (ExplosionOnMetalSfxName.Length != 0) hash ^= ExplosionOnMetalSfxName.GetHashCode();
      if (ExplosionOnWoodSfxName.Length != 0) hash ^= ExplosionOnWoodSfxName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartupFrames != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PushbackVelY);
      }
      if (Damage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Damage);
      }
      if (SelfLockVelX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitboxSizeY);
      }
      if (BlowUp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BlowUp);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DirY);
      }
      cancelTransit_.WriteTo(output, _map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AllowsWalking);
      }
      if (AllowsCrouching != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AllowsCrouching);
      }
      if (Hardness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(DelaySelfVelToActive);
      }
      if (SpeedIfNotHit != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SpeedIfNotHit);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(OmitSoftPushback);
      }
      if (HitboxSizeIncX != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(HitboxSizeIncX);
      }
      if (HitboxSizeIncY != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(HitboxSizeIncY);
      }
      if (RemainsUponHit != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(RemainsUponHit);
      }
      if (RotatesAlongVelocity != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(RotatesAlongVelocity);
      }
      if (DefaultHardPushbackBounceQuota != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(DefaultHardPushbackBounceQuota);
      }
      if (HardPushbackBounceNormFactor != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(HardPushbackBounceNormFactor);
      }
      if (HardPushbackBounceSheerFactor != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(HardPushbackBounceSheerFactor);
      }
      if (IsPixelatedActiveVfx != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsPixelatedActiveVfx);
      }
      if (IsPixelatedExplostionVfx != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsPixelatedExplostionVfx);
      }
      if (MhVanishOnMeleeHit != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(MhVanishOnMeleeHit);
      }
      if (DownSlopePrimerVelY != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DownSlopePrimerVelY);
      }
      if (MhUpdatesOriginPos != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(MhUpdatesOriginPos);
      }
      if (BeamCollision != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(BeamCollision);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (VisionOffsetX != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(VisionOffsetX);
      }
      if (VisionOffsetY != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(VisionOffsetY);
      }
      if (VisionSizeX != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(VisionSizeX);
      }
      if (VisionSizeY != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(VisionSizeY);
      }
      if (SelfLockVelYWhenFlying != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(SelfLockVelYWhenFlying);
      }
      if (ElementalAttrs != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(ElementalAttrs);
      }
      if (CancellableByInventorySlotC != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(CancellableByInventorySlotC);
      }
      if (CancellableByInventorySlotD != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(CancellableByInventorySlotD);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(SpinAnchorY);
      }
      if (BeamVisualSizeY != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(BeamVisualSizeY);
      }
      if (TouchExplosionBombCollision != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(TouchExplosionBombCollision);
      }
      if (AirRidingGroundWave != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(AirRidingGroundWave);
      }
      if (GroundImpactMeleeCollision != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(GroundImpactMeleeCollision);
      }
      if (WallImpactMeleeCollision != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(WallImpactMeleeCollision);
      }
      if (MhInheritsSpin != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(MhInheritsSpin);
      }
      if (InitSpinCos != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(InitSpinCos);
      }
      if (InitSpinSin != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(InitSpinSin);
      }
      if (FinishingFrames != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(FinishingFrames);
      }
      if (NoExplosionOnHardPushback != false) {
        output.WriteRawTag(200, 4);
        output.WriteBool(NoExplosionOnHardPushback);
      }
      if (StartupVfxSpeciesId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(StartupVfxSpeciesId);
      }
      if (Ifc != global::shared.IfaceCat.Empty) {
        output.WriteRawTag(216, 4);
        output.WriteEnum((int) Ifc);
      }
      if (ReflectFireballXIfNotHarder != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(ReflectFireballXIfNotHarder);
      }
      if (RejectsReflectionFromAnotherBullet != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(RejectsReflectionFromAnotherBullet);
      }
      if (ProvidesXHardPushback != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(ProvidesXHardPushback);
      }
      if (ProvidesYHardPushbackTop != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(ProvidesYHardPushbackTop);
      }
      if (ProvidesYHardPushbackBottom != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(ProvidesYHardPushbackBottom);
      }
      if (IgnoreSlopeDeceleration != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(IgnoreSlopeDeceleration);
      }
      if (RotateOffenderWithSpin != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(RotateOffenderWithSpin);
      }
      if (MhNotTriggerOnChHit != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(MhNotTriggerOnChHit);
      }
      if (MhNotTriggerOnHarderBulletHit != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(MhNotTriggerOnHarderBulletHit);
      }
      if (MhNotTriggerOnHardPushbackHit != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(MhNotTriggerOnHardPushbackHit);
      }
      if (HopperMissile != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(HopperMissile);
      }
      if (BeamRendering != false) {
        output.WriteRawTag(184, 5);
        output.WriteBool(BeamRendering);
      }
      if (MissileSearchIntervalPow2Minus1 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(MissileSearchIntervalPow2Minus1);
      }
      if (UseChOffsetRegardlessOfEmissionMh != false) {
        output.WriteRawTag(200, 5);
        output.WriteBool(UseChOffsetRegardlessOfEmissionMh);
      }
      if (InplaceVanishExplosionSpeciesId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(InplaceVanishExplosionSpeciesId);
      }
      if (AnimLoopingRdfOffset != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(AnimLoopingRdfOffset);
      }
      if (ExplosionAnimLoopingRdfOffset != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(ExplosionAnimLoopingRdfOffset);
      }
      if (GaugeIncReductionRatio != 0F) {
        output.WriteRawTag(237, 5);
        output.WriteFloat(GaugeIncReductionRatio);
      }
      if (MhInheritsFramesInBlState != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(MhInheritsFramesInBlState);
      }
      if (GuardBreakerExtraHitCnt != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(GuardBreakerExtraHitCnt);
      }
      if (TakesDef1AsHardPushback != false) {
        output.WriteRawTag(128, 6);
        output.WriteBool(TakesDef1AsHardPushback);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(176, 64);
        output.WriteBool(TakesGravity);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(186, 64);
        output.WriteMessage(BuffConfig);
      }
      if (CharacterEmitSfxName.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        output.WriteRawTag(138, 128, 1);
        output.WriteString(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        output.WriteRawTag(146, 128, 1);
        output.WriteString(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        output.WriteRawTag(154, 128, 1);
        output.WriteString(ActiveSfxName);
      }
      if (ExplosionOnFleshSfxName.Length != 0) {
        output.WriteRawTag(162, 128, 1);
        output.WriteString(ExplosionOnFleshSfxName);
      }
      if (ExplosionOnRockSfxName.Length != 0) {
        output.WriteRawTag(170, 128, 1);
        output.WriteString(ExplosionOnRockSfxName);
      }
      if (ExplosionOnMetalSfxName.Length != 0) {
        output.WriteRawTag(178, 128, 1);
        output.WriteString(ExplosionOnMetalSfxName);
      }
      if (ExplosionOnWoodSfxName.Length != 0) {
        output.WriteRawTag(186, 128, 1);
        output.WriteString(ExplosionOnWoodSfxName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartupFrames != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PushbackVelY);
      }
      if (Damage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Damage);
      }
      if (SelfLockVelX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HitboxSizeY);
      }
      if (BlowUp != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BlowUp);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(DirY);
      }
      cancelTransit_.WriteTo(ref output, _map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(AllowsWalking);
      }
      if (AllowsCrouching != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(AllowsCrouching);
      }
      if (Hardness != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(DelaySelfVelToActive);
      }
      if (SpeedIfNotHit != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SpeedIfNotHit);
      }
      if (OmitSoftPushback != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(OmitSoftPushback);
      }
      if (HitboxSizeIncX != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(HitboxSizeIncX);
      }
      if (HitboxSizeIncY != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(HitboxSizeIncY);
      }
      if (RemainsUponHit != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(RemainsUponHit);
      }
      if (RotatesAlongVelocity != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(RotatesAlongVelocity);
      }
      if (DefaultHardPushbackBounceQuota != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(DefaultHardPushbackBounceQuota);
      }
      if (HardPushbackBounceNormFactor != 0F) {
        output.WriteRawTag(229, 2);
        output.WriteFloat(HardPushbackBounceNormFactor);
      }
      if (HardPushbackBounceSheerFactor != 0F) {
        output.WriteRawTag(237, 2);
        output.WriteFloat(HardPushbackBounceSheerFactor);
      }
      if (IsPixelatedActiveVfx != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsPixelatedActiveVfx);
      }
      if (IsPixelatedExplostionVfx != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(IsPixelatedExplostionVfx);
      }
      if (MhVanishOnMeleeHit != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(MhVanishOnMeleeHit);
      }
      if (DownSlopePrimerVelY != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(DownSlopePrimerVelY);
      }
      if (MhUpdatesOriginPos != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(MhUpdatesOriginPos);
      }
      if (BeamCollision != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(BeamCollision);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (VisionOffsetX != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(VisionOffsetX);
      }
      if (VisionOffsetY != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(VisionOffsetY);
      }
      if (VisionSizeX != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(VisionSizeX);
      }
      if (VisionSizeY != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(VisionSizeY);
      }
      if (SelfLockVelYWhenFlying != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(SelfLockVelYWhenFlying);
      }
      if (ElementalAttrs != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(ElementalAttrs);
      }
      if (CancellableByInventorySlotC != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(CancellableByInventorySlotC);
      }
      if (CancellableByInventorySlotD != false) {
        output.WriteRawTag(232, 3);
        output.WriteBool(CancellableByInventorySlotD);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(245, 3);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(SpinAnchorY);
      }
      if (BeamVisualSizeY != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(BeamVisualSizeY);
      }
      if (TouchExplosionBombCollision != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(TouchExplosionBombCollision);
      }
      if (AirRidingGroundWave != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(AirRidingGroundWave);
      }
      if (GroundImpactMeleeCollision != false) {
        output.WriteRawTag(152, 4);
        output.WriteBool(GroundImpactMeleeCollision);
      }
      if (WallImpactMeleeCollision != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(WallImpactMeleeCollision);
      }
      if (MhInheritsSpin != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(MhInheritsSpin);
      }
      if (InitSpinCos != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(InitSpinCos);
      }
      if (InitSpinSin != 0F) {
        output.WriteRawTag(189, 4);
        output.WriteFloat(InitSpinSin);
      }
      if (FinishingFrames != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(FinishingFrames);
      }
      if (NoExplosionOnHardPushback != false) {
        output.WriteRawTag(200, 4);
        output.WriteBool(NoExplosionOnHardPushback);
      }
      if (StartupVfxSpeciesId != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(StartupVfxSpeciesId);
      }
      if (Ifc != global::shared.IfaceCat.Empty) {
        output.WriteRawTag(216, 4);
        output.WriteEnum((int) Ifc);
      }
      if (ReflectFireballXIfNotHarder != false) {
        output.WriteRawTag(224, 4);
        output.WriteBool(ReflectFireballXIfNotHarder);
      }
      if (RejectsReflectionFromAnotherBullet != false) {
        output.WriteRawTag(232, 4);
        output.WriteBool(RejectsReflectionFromAnotherBullet);
      }
      if (ProvidesXHardPushback != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(ProvidesXHardPushback);
      }
      if (ProvidesYHardPushbackTop != false) {
        output.WriteRawTag(248, 4);
        output.WriteBool(ProvidesYHardPushbackTop);
      }
      if (ProvidesYHardPushbackBottom != false) {
        output.WriteRawTag(128, 5);
        output.WriteBool(ProvidesYHardPushbackBottom);
      }
      if (IgnoreSlopeDeceleration != false) {
        output.WriteRawTag(136, 5);
        output.WriteBool(IgnoreSlopeDeceleration);
      }
      if (RotateOffenderWithSpin != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(RotateOffenderWithSpin);
      }
      if (MhNotTriggerOnChHit != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(MhNotTriggerOnChHit);
      }
      if (MhNotTriggerOnHarderBulletHit != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(MhNotTriggerOnHarderBulletHit);
      }
      if (MhNotTriggerOnHardPushbackHit != false) {
        output.WriteRawTag(168, 5);
        output.WriteBool(MhNotTriggerOnHardPushbackHit);
      }
      if (HopperMissile != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(HopperMissile);
      }
      if (BeamRendering != false) {
        output.WriteRawTag(184, 5);
        output.WriteBool(BeamRendering);
      }
      if (MissileSearchIntervalPow2Minus1 != 0) {
        output.WriteRawTag(192, 5);
        output.WriteUInt32(MissileSearchIntervalPow2Minus1);
      }
      if (UseChOffsetRegardlessOfEmissionMh != false) {
        output.WriteRawTag(200, 5);
        output.WriteBool(UseChOffsetRegardlessOfEmissionMh);
      }
      if (InplaceVanishExplosionSpeciesId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(InplaceVanishExplosionSpeciesId);
      }
      if (AnimLoopingRdfOffset != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(AnimLoopingRdfOffset);
      }
      if (ExplosionAnimLoopingRdfOffset != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(ExplosionAnimLoopingRdfOffset);
      }
      if (GaugeIncReductionRatio != 0F) {
        output.WriteRawTag(237, 5);
        output.WriteFloat(GaugeIncReductionRatio);
      }
      if (MhInheritsFramesInBlState != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(MhInheritsFramesInBlState);
      }
      if (GuardBreakerExtraHitCnt != 0) {
        output.WriteRawTag(248, 5);
        output.WriteUInt32(GuardBreakerExtraHitCnt);
      }
      if (TakesDef1AsHardPushback != false) {
        output.WriteRawTag(128, 6);
        output.WriteBool(TakesDef1AsHardPushback);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(176, 64);
        output.WriteBool(TakesGravity);
      }
      if (buffConfig_ != null) {
        output.WriteRawTag(186, 64);
        output.WriteMessage(BuffConfig);
      }
      if (CharacterEmitSfxName.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        output.WriteRawTag(138, 128, 1);
        output.WriteString(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        output.WriteRawTag(146, 128, 1);
        output.WriteString(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        output.WriteRawTag(154, 128, 1);
        output.WriteString(ActiveSfxName);
      }
      if (ExplosionOnFleshSfxName.Length != 0) {
        output.WriteRawTag(162, 128, 1);
        output.WriteString(ExplosionOnFleshSfxName);
      }
      if (ExplosionOnRockSfxName.Length != 0) {
        output.WriteRawTag(170, 128, 1);
        output.WriteString(ExplosionOnRockSfxName);
      }
      if (ExplosionOnMetalSfxName.Length != 0) {
        output.WriteRawTag(178, 128, 1);
        output.WriteString(ExplosionOnMetalSfxName);
      }
      if (ExplosionOnWoodSfxName.Length != 0) {
        output.WriteRawTag(186, 128, 1);
        output.WriteString(ExplosionOnWoodSfxName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartupFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartupFrames);
      }
      if (CancellableStFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableStFrame);
      }
      if (CancellableEdFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CancellableEdFrame);
      }
      if (ActiveFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveFrames);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (BlockStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockStunFrames);
      }
      if (PushbackVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushbackVelX);
      }
      if (PushbackVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushbackVelY);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (SelfLockVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelX);
      }
      if (SelfLockVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelY);
      }
      if (HitboxOffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeY);
      }
      if (BlowUp != false) {
        size += 2 + 1;
      }
      if (SpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BType != global::shared.BulletType.Undetermined) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BType);
      }
      if (MhType != global::shared.MultiHitType.None) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MhType);
      }
      if (SimultaneousMultiHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SimultaneousMultiHitCnt);
      }
      if (Speed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      size += cancelTransit_.CalculateSize(_map_cancelTransit_codec);
      if (RepeatQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuota);
      }
      if (ActiveVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveVfxSpeciesId);
      }
      if (ExplosionVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionVfxSpeciesId);
      }
      if (AllowsWalking != false) {
        size += 2 + 1;
      }
      if (AllowsCrouching != false) {
        size += 2 + 1;
      }
      if (Hardness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (StartupInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartupInvinsibleFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (ExplosionSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (PerpAccMag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PerpAccMag);
      }
      if (DelaySelfVelToActive != false) {
        size += 2 + 1;
      }
      if (SpeedIfNotHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpeedIfNotHit);
      }
      if (OmitSoftPushback != false) {
        size += 2 + 1;
      }
      if (HitboxSizeIncX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeIncX);
      }
      if (HitboxSizeIncY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeIncY);
      }
      if (RemainsUponHit != false) {
        size += 2 + 1;
      }
      if (RotatesAlongVelocity != false) {
        size += 2 + 1;
      }
      if (DefaultHardPushbackBounceQuota != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefaultHardPushbackBounceQuota);
      }
      if (HardPushbackBounceNormFactor != 0F) {
        size += 2 + 4;
      }
      if (HardPushbackBounceSheerFactor != 0F) {
        size += 2 + 4;
      }
      if (IsPixelatedActiveVfx != false) {
        size += 2 + 1;
      }
      if (IsPixelatedExplostionVfx != false) {
        size += 2 + 1;
      }
      if (MhVanishOnMeleeHit != false) {
        size += 2 + 1;
      }
      if (DownSlopePrimerVelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DownSlopePrimerVelY);
      }
      if (MhUpdatesOriginPos != false) {
        size += 2 + 1;
      }
      if (BeamCollision != false) {
        size += 2 + 1;
      }
      if (AngularFrameVelCos != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (VisionOffsetX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionOffsetX);
      }
      if (VisionOffsetY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionOffsetY);
      }
      if (VisionSizeX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionSizeX);
      }
      if (VisionSizeY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionSizeY);
      }
      if (SelfLockVelYWhenFlying != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelfLockVelYWhenFlying);
      }
      if (ElementalAttrs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ElementalAttrs);
      }
      if (CancellableByInventorySlotC != false) {
        size += 2 + 1;
      }
      if (CancellableByInventorySlotD != false) {
        size += 2 + 1;
      }
      if (SpinAnchorX != 0F) {
        size += 2 + 4;
      }
      if (SpinAnchorY != 0F) {
        size += 2 + 4;
      }
      if (BeamVisualSizeY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeamVisualSizeY);
      }
      if (TouchExplosionBombCollision != false) {
        size += 2 + 1;
      }
      if (AirRidingGroundWave != false) {
        size += 2 + 1;
      }
      if (GroundImpactMeleeCollision != false) {
        size += 2 + 1;
      }
      if (WallImpactMeleeCollision != false) {
        size += 2 + 1;
      }
      if (MhInheritsSpin != false) {
        size += 2 + 1;
      }
      if (InitSpinCos != 0F) {
        size += 2 + 4;
      }
      if (InitSpinSin != 0F) {
        size += 2 + 4;
      }
      if (FinishingFrames != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FinishingFrames);
      }
      if (NoExplosionOnHardPushback != false) {
        size += 2 + 1;
      }
      if (StartupVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StartupVfxSpeciesId);
      }
      if (Ifc != global::shared.IfaceCat.Empty) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Ifc);
      }
      if (ReflectFireballXIfNotHarder != false) {
        size += 2 + 1;
      }
      if (RejectsReflectionFromAnotherBullet != false) {
        size += 2 + 1;
      }
      if (ProvidesXHardPushback != false) {
        size += 2 + 1;
      }
      if (ProvidesYHardPushbackTop != false) {
        size += 2 + 1;
      }
      if (ProvidesYHardPushbackBottom != false) {
        size += 2 + 1;
      }
      if (IgnoreSlopeDeceleration != false) {
        size += 2 + 1;
      }
      if (RotateOffenderWithSpin != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnChHit != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnHarderBulletHit != false) {
        size += 2 + 1;
      }
      if (MhNotTriggerOnHardPushbackHit != false) {
        size += 2 + 1;
      }
      if (HopperMissile != false) {
        size += 2 + 1;
      }
      if (BeamRendering != false) {
        size += 2 + 1;
      }
      if (MissileSearchIntervalPow2Minus1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MissileSearchIntervalPow2Minus1);
      }
      if (UseChOffsetRegardlessOfEmissionMh != false) {
        size += 2 + 1;
      }
      if (InplaceVanishExplosionSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InplaceVanishExplosionSpeciesId);
      }
      if (AnimLoopingRdfOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AnimLoopingRdfOffset);
      }
      if (ExplosionAnimLoopingRdfOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExplosionAnimLoopingRdfOffset);
      }
      if (GaugeIncReductionRatio != 0F) {
        size += 2 + 4;
      }
      if (MhInheritsFramesInBlState != false) {
        size += 2 + 1;
      }
      if (GuardBreakerExtraHitCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GuardBreakerExtraHitCnt);
      }
      if (TakesDef1AsHardPushback != false) {
        size += 2 + 1;
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (TakesGravity != false) {
        size += 2 + 1;
      }
      if (buffConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BuffConfig);
      }
      if (CharacterEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(CharacterEmitSfxName);
      }
      if (FireballEmitSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(FireballEmitSfxName);
      }
      if (ExplosionSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionSfxName);
      }
      if (ActiveSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ActiveSfxName);
      }
      if (ExplosionOnFleshSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnFleshSfxName);
      }
      if (ExplosionOnRockSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnRockSfxName);
      }
      if (ExplosionOnMetalSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnMetalSfxName);
      }
      if (ExplosionOnWoodSfxName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ExplosionOnWoodSfxName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BulletConfig other) {
      if (other == null) {
        return;
      }
      if (other.StartupFrames != 0) {
        StartupFrames = other.StartupFrames;
      }
      if (other.CancellableStFrame != 0) {
        CancellableStFrame = other.CancellableStFrame;
      }
      if (other.CancellableEdFrame != 0) {
        CancellableEdFrame = other.CancellableEdFrame;
      }
      if (other.ActiveFrames != 0) {
        ActiveFrames = other.ActiveFrames;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.BlockStunFrames != 0) {
        BlockStunFrames = other.BlockStunFrames;
      }
      if (other.PushbackVelX != 0) {
        PushbackVelX = other.PushbackVelX;
      }
      if (other.PushbackVelY != 0) {
        PushbackVelY = other.PushbackVelY;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.SelfLockVelX != 0) {
        SelfLockVelX = other.SelfLockVelX;
      }
      if (other.SelfLockVelY != 0) {
        SelfLockVelY = other.SelfLockVelY;
      }
      if (other.HitboxOffsetX != 0) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BType != global::shared.BulletType.Undetermined) {
        BType = other.BType;
      }
      if (other.MhType != global::shared.MultiHitType.None) {
        MhType = other.MhType;
      }
      if (other.SimultaneousMultiHitCnt != 0) {
        SimultaneousMultiHitCnt = other.SimultaneousMultiHitCnt;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      cancelTransit_.Add(other.cancelTransit_);
      if (other.RepeatQuota != 0) {
        RepeatQuota = other.RepeatQuota;
      }
      if (other.ActiveVfxSpeciesId != 0) {
        ActiveVfxSpeciesId = other.ActiveVfxSpeciesId;
      }
      if (other.ExplosionVfxSpeciesId != 0) {
        ExplosionVfxSpeciesId = other.ExplosionVfxSpeciesId;
      }
      if (other.AllowsWalking != false) {
        AllowsWalking = other.AllowsWalking;
      }
      if (other.AllowsCrouching != false) {
        AllowsCrouching = other.AllowsCrouching;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.StartupInvinsibleFrames != 0) {
        StartupInvinsibleFrames = other.StartupInvinsibleFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.PerpAccMag != 0) {
        PerpAccMag = other.PerpAccMag;
      }
      if (other.DelaySelfVelToActive != false) {
        DelaySelfVelToActive = other.DelaySelfVelToActive;
      }
      if (other.SpeedIfNotHit != 0) {
        SpeedIfNotHit = other.SpeedIfNotHit;
      }
      if (other.OmitSoftPushback != false) {
        OmitSoftPushback = other.OmitSoftPushback;
      }
      if (other.HitboxSizeIncX != 0) {
        HitboxSizeIncX = other.HitboxSizeIncX;
      }
      if (other.HitboxSizeIncY != 0) {
        HitboxSizeIncY = other.HitboxSizeIncY;
      }
      if (other.RemainsUponHit != false) {
        RemainsUponHit = other.RemainsUponHit;
      }
      if (other.RotatesAlongVelocity != false) {
        RotatesAlongVelocity = other.RotatesAlongVelocity;
      }
      if (other.DefaultHardPushbackBounceQuota != 0) {
        DefaultHardPushbackBounceQuota = other.DefaultHardPushbackBounceQuota;
      }
      if (other.HardPushbackBounceNormFactor != 0F) {
        HardPushbackBounceNormFactor = other.HardPushbackBounceNormFactor;
      }
      if (other.HardPushbackBounceSheerFactor != 0F) {
        HardPushbackBounceSheerFactor = other.HardPushbackBounceSheerFactor;
      }
      if (other.IsPixelatedActiveVfx != false) {
        IsPixelatedActiveVfx = other.IsPixelatedActiveVfx;
      }
      if (other.IsPixelatedExplostionVfx != false) {
        IsPixelatedExplostionVfx = other.IsPixelatedExplostionVfx;
      }
      if (other.MhVanishOnMeleeHit != false) {
        MhVanishOnMeleeHit = other.MhVanishOnMeleeHit;
      }
      if (other.DownSlopePrimerVelY != 0) {
        DownSlopePrimerVelY = other.DownSlopePrimerVelY;
      }
      if (other.MhUpdatesOriginPos != false) {
        MhUpdatesOriginPos = other.MhUpdatesOriginPos;
      }
      if (other.BeamCollision != false) {
        BeamCollision = other.BeamCollision;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.VisionOffsetX != 0) {
        VisionOffsetX = other.VisionOffsetX;
      }
      if (other.VisionOffsetY != 0) {
        VisionOffsetY = other.VisionOffsetY;
      }
      if (other.VisionSizeX != 0) {
        VisionSizeX = other.VisionSizeX;
      }
      if (other.VisionSizeY != 0) {
        VisionSizeY = other.VisionSizeY;
      }
      if (other.SelfLockVelYWhenFlying != 0) {
        SelfLockVelYWhenFlying = other.SelfLockVelYWhenFlying;
      }
      if (other.ElementalAttrs != 0) {
        ElementalAttrs = other.ElementalAttrs;
      }
      if (other.CancellableByInventorySlotC != false) {
        CancellableByInventorySlotC = other.CancellableByInventorySlotC;
      }
      if (other.CancellableByInventorySlotD != false) {
        CancellableByInventorySlotD = other.CancellableByInventorySlotD;
      }
      if (other.SpinAnchorX != 0F) {
        SpinAnchorX = other.SpinAnchorX;
      }
      if (other.SpinAnchorY != 0F) {
        SpinAnchorY = other.SpinAnchorY;
      }
      if (other.BeamVisualSizeY != 0) {
        BeamVisualSizeY = other.BeamVisualSizeY;
      }
      if (other.TouchExplosionBombCollision != false) {
        TouchExplosionBombCollision = other.TouchExplosionBombCollision;
      }
      if (other.AirRidingGroundWave != false) {
        AirRidingGroundWave = other.AirRidingGroundWave;
      }
      if (other.GroundImpactMeleeCollision != false) {
        GroundImpactMeleeCollision = other.GroundImpactMeleeCollision;
      }
      if (other.WallImpactMeleeCollision != false) {
        WallImpactMeleeCollision = other.WallImpactMeleeCollision;
      }
      if (other.MhInheritsSpin != false) {
        MhInheritsSpin = other.MhInheritsSpin;
      }
      if (other.InitSpinCos != 0F) {
        InitSpinCos = other.InitSpinCos;
      }
      if (other.InitSpinSin != 0F) {
        InitSpinSin = other.InitSpinSin;
      }
      if (other.FinishingFrames != 0) {
        FinishingFrames = other.FinishingFrames;
      }
      if (other.NoExplosionOnHardPushback != false) {
        NoExplosionOnHardPushback = other.NoExplosionOnHardPushback;
      }
      if (other.StartupVfxSpeciesId != 0) {
        StartupVfxSpeciesId = other.StartupVfxSpeciesId;
      }
      if (other.Ifc != global::shared.IfaceCat.Empty) {
        Ifc = other.Ifc;
      }
      if (other.ReflectFireballXIfNotHarder != false) {
        ReflectFireballXIfNotHarder = other.ReflectFireballXIfNotHarder;
      }
      if (other.RejectsReflectionFromAnotherBullet != false) {
        RejectsReflectionFromAnotherBullet = other.RejectsReflectionFromAnotherBullet;
      }
      if (other.ProvidesXHardPushback != false) {
        ProvidesXHardPushback = other.ProvidesXHardPushback;
      }
      if (other.ProvidesYHardPushbackTop != false) {
        ProvidesYHardPushbackTop = other.ProvidesYHardPushbackTop;
      }
      if (other.ProvidesYHardPushbackBottom != false) {
        ProvidesYHardPushbackBottom = other.ProvidesYHardPushbackBottom;
      }
      if (other.IgnoreSlopeDeceleration != false) {
        IgnoreSlopeDeceleration = other.IgnoreSlopeDeceleration;
      }
      if (other.RotateOffenderWithSpin != false) {
        RotateOffenderWithSpin = other.RotateOffenderWithSpin;
      }
      if (other.MhNotTriggerOnChHit != false) {
        MhNotTriggerOnChHit = other.MhNotTriggerOnChHit;
      }
      if (other.MhNotTriggerOnHarderBulletHit != false) {
        MhNotTriggerOnHarderBulletHit = other.MhNotTriggerOnHarderBulletHit;
      }
      if (other.MhNotTriggerOnHardPushbackHit != false) {
        MhNotTriggerOnHardPushbackHit = other.MhNotTriggerOnHardPushbackHit;
      }
      if (other.HopperMissile != false) {
        HopperMissile = other.HopperMissile;
      }
      if (other.BeamRendering != false) {
        BeamRendering = other.BeamRendering;
      }
      if (other.MissileSearchIntervalPow2Minus1 != 0) {
        MissileSearchIntervalPow2Minus1 = other.MissileSearchIntervalPow2Minus1;
      }
      if (other.UseChOffsetRegardlessOfEmissionMh != false) {
        UseChOffsetRegardlessOfEmissionMh = other.UseChOffsetRegardlessOfEmissionMh;
      }
      if (other.InplaceVanishExplosionSpeciesId != 0) {
        InplaceVanishExplosionSpeciesId = other.InplaceVanishExplosionSpeciesId;
      }
      if (other.AnimLoopingRdfOffset != 0) {
        AnimLoopingRdfOffset = other.AnimLoopingRdfOffset;
      }
      if (other.ExplosionAnimLoopingRdfOffset != 0) {
        ExplosionAnimLoopingRdfOffset = other.ExplosionAnimLoopingRdfOffset;
      }
      if (other.GaugeIncReductionRatio != 0F) {
        GaugeIncReductionRatio = other.GaugeIncReductionRatio;
      }
      if (other.MhInheritsFramesInBlState != false) {
        MhInheritsFramesInBlState = other.MhInheritsFramesInBlState;
      }
      if (other.GuardBreakerExtraHitCnt != 0) {
        GuardBreakerExtraHitCnt = other.GuardBreakerExtraHitCnt;
      }
      if (other.TakesDef1AsHardPushback != false) {
        TakesDef1AsHardPushback = other.TakesDef1AsHardPushback;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      if (other.TakesGravity != false) {
        TakesGravity = other.TakesGravity;
      }
      if (other.buffConfig_ != null) {
        if (buffConfig_ == null) {
          BuffConfig = new global::shared.BuffConfig();
        }
        BuffConfig.MergeFrom(other.BuffConfig);
      }
      if (other.CharacterEmitSfxName.Length != 0) {
        CharacterEmitSfxName = other.CharacterEmitSfxName;
      }
      if (other.FireballEmitSfxName.Length != 0) {
        FireballEmitSfxName = other.FireballEmitSfxName;
      }
      if (other.ExplosionSfxName.Length != 0) {
        ExplosionSfxName = other.ExplosionSfxName;
      }
      if (other.ActiveSfxName.Length != 0) {
        ActiveSfxName = other.ActiveSfxName;
      }
      if (other.ExplosionOnFleshSfxName.Length != 0) {
        ExplosionOnFleshSfxName = other.ExplosionOnFleshSfxName;
      }
      if (other.ExplosionOnRockSfxName.Length != 0) {
        ExplosionOnRockSfxName = other.ExplosionOnRockSfxName;
      }
      if (other.ExplosionOnMetalSfxName.Length != 0) {
        ExplosionOnMetalSfxName = other.ExplosionOnMetalSfxName;
      }
      if (other.ExplosionOnWoodSfxName.Length != 0) {
        ExplosionOnWoodSfxName = other.ExplosionOnWoodSfxName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartupFrames = input.ReadInt32();
            break;
          }
          case 16: {
            CancellableStFrame = input.ReadInt32();
            break;
          }
          case 24: {
            CancellableEdFrame = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveFrames = input.ReadInt32();
            break;
          }
          case 40: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 48: {
            BlockStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            PushbackVelX = input.ReadInt32();
            break;
          }
          case 64: {
            PushbackVelY = input.ReadInt32();
            break;
          }
          case 72: {
            Damage = input.ReadInt32();
            break;
          }
          case 80: {
            SelfLockVelX = input.ReadInt32();
            break;
          }
          case 88: {
            SelfLockVelY = input.ReadInt32();
            break;
          }
          case 96: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 104: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 112: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 120: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 128: {
            BlowUp = input.ReadBool();
            break;
          }
          case 136: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 144: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 152: {
            BType = (global::shared.BulletType) input.ReadEnum();
            break;
          }
          case 160: {
            MhType = (global::shared.MultiHitType) input.ReadEnum();
            break;
          }
          case 168: {
            SimultaneousMultiHitCnt = input.ReadUInt32();
            break;
          }
          case 176: {
            Speed = input.ReadInt32();
            break;
          }
          case 184: {
            DirX = input.ReadInt32();
            break;
          }
          case 192: {
            DirY = input.ReadInt32();
            break;
          }
          case 202: {
            cancelTransit_.AddEntriesFrom(input, _map_cancelTransit_codec);
            break;
          }
          case 208: {
            RepeatQuota = input.ReadInt32();
            break;
          }
          case 216: {
            ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 224: {
            ExplosionVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 232: {
            AllowsWalking = input.ReadBool();
            break;
          }
          case 240: {
            AllowsCrouching = input.ReadBool();
            break;
          }
          case 248: {
            Hardness = input.ReadInt32();
            break;
          }
          case 256: {
            StartupInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 264: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 272: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 280: {
            PerpAccMag = input.ReadInt32();
            break;
          }
          case 288: {
            DelaySelfVelToActive = input.ReadBool();
            break;
          }
          case 296: {
            SpeedIfNotHit = input.ReadInt32();
            break;
          }
          case 304: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 312: {
            HitboxSizeIncX = input.ReadInt32();
            break;
          }
          case 320: {
            HitboxSizeIncY = input.ReadInt32();
            break;
          }
          case 328: {
            RemainsUponHit = input.ReadBool();
            break;
          }
          case 336: {
            RotatesAlongVelocity = input.ReadBool();
            break;
          }
          case 344: {
            DefaultHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 357: {
            HardPushbackBounceNormFactor = input.ReadFloat();
            break;
          }
          case 365: {
            HardPushbackBounceSheerFactor = input.ReadFloat();
            break;
          }
          case 368: {
            IsPixelatedActiveVfx = input.ReadBool();
            break;
          }
          case 376: {
            IsPixelatedExplostionVfx = input.ReadBool();
            break;
          }
          case 384: {
            MhVanishOnMeleeHit = input.ReadBool();
            break;
          }
          case 392: {
            DownSlopePrimerVelY = input.ReadInt32();
            break;
          }
          case 400: {
            MhUpdatesOriginPos = input.ReadBool();
            break;
          }
          case 408: {
            BeamCollision = input.ReadBool();
            break;
          }
          case 421: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 429: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 432: {
            VisionOffsetX = input.ReadInt32();
            break;
          }
          case 440: {
            VisionOffsetY = input.ReadInt32();
            break;
          }
          case 448: {
            VisionSizeX = input.ReadInt32();
            break;
          }
          case 456: {
            VisionSizeY = input.ReadInt32();
            break;
          }
          case 464: {
            SelfLockVelYWhenFlying = input.ReadInt32();
            break;
          }
          case 472: {
            ElementalAttrs = input.ReadUInt32();
            break;
          }
          case 480: {
            CancellableByInventorySlotC = input.ReadBool();
            break;
          }
          case 488: {
            CancellableByInventorySlotD = input.ReadBool();
            break;
          }
          case 501: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 509: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 512: {
            BeamVisualSizeY = input.ReadInt32();
            break;
          }
          case 520: {
            TouchExplosionBombCollision = input.ReadBool();
            break;
          }
          case 528: {
            AirRidingGroundWave = input.ReadBool();
            break;
          }
          case 536: {
            GroundImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 544: {
            WallImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 552: {
            MhInheritsSpin = input.ReadBool();
            break;
          }
          case 565: {
            InitSpinCos = input.ReadFloat();
            break;
          }
          case 573: {
            InitSpinSin = input.ReadFloat();
            break;
          }
          case 576: {
            FinishingFrames = input.ReadInt32();
            break;
          }
          case 584: {
            NoExplosionOnHardPushback = input.ReadBool();
            break;
          }
          case 592: {
            StartupVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 600: {
            Ifc = (global::shared.IfaceCat) input.ReadEnum();
            break;
          }
          case 608: {
            ReflectFireballXIfNotHarder = input.ReadBool();
            break;
          }
          case 616: {
            RejectsReflectionFromAnotherBullet = input.ReadBool();
            break;
          }
          case 624: {
            ProvidesXHardPushback = input.ReadBool();
            break;
          }
          case 632: {
            ProvidesYHardPushbackTop = input.ReadBool();
            break;
          }
          case 640: {
            ProvidesYHardPushbackBottom = input.ReadBool();
            break;
          }
          case 648: {
            IgnoreSlopeDeceleration = input.ReadBool();
            break;
          }
          case 656: {
            RotateOffenderWithSpin = input.ReadBool();
            break;
          }
          case 664: {
            MhNotTriggerOnChHit = input.ReadBool();
            break;
          }
          case 672: {
            MhNotTriggerOnHarderBulletHit = input.ReadBool();
            break;
          }
          case 680: {
            MhNotTriggerOnHardPushbackHit = input.ReadBool();
            break;
          }
          case 688: {
            HopperMissile = input.ReadBool();
            break;
          }
          case 696: {
            BeamRendering = input.ReadBool();
            break;
          }
          case 704: {
            MissileSearchIntervalPow2Minus1 = input.ReadUInt32();
            break;
          }
          case 712: {
            UseChOffsetRegardlessOfEmissionMh = input.ReadBool();
            break;
          }
          case 720: {
            InplaceVanishExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 728: {
            AnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 736: {
            ExplosionAnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 749: {
            GaugeIncReductionRatio = input.ReadFloat();
            break;
          }
          case 752: {
            MhInheritsFramesInBlState = input.ReadBool();
            break;
          }
          case 760: {
            GuardBreakerExtraHitCnt = input.ReadUInt32();
            break;
          }
          case 768: {
            TakesDef1AsHardPushback = input.ReadBool();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8240: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 8250: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
          case 16386: {
            CharacterEmitSfxName = input.ReadString();
            break;
          }
          case 16394: {
            FireballEmitSfxName = input.ReadString();
            break;
          }
          case 16402: {
            ExplosionSfxName = input.ReadString();
            break;
          }
          case 16410: {
            ActiveSfxName = input.ReadString();
            break;
          }
          case 16418: {
            ExplosionOnFleshSfxName = input.ReadString();
            break;
          }
          case 16426: {
            ExplosionOnRockSfxName = input.ReadString();
            break;
          }
          case 16434: {
            ExplosionOnMetalSfxName = input.ReadString();
            break;
          }
          case 16442: {
            ExplosionOnWoodSfxName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartupFrames = input.ReadInt32();
            break;
          }
          case 16: {
            CancellableStFrame = input.ReadInt32();
            break;
          }
          case 24: {
            CancellableEdFrame = input.ReadInt32();
            break;
          }
          case 32: {
            ActiveFrames = input.ReadInt32();
            break;
          }
          case 40: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 48: {
            BlockStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            PushbackVelX = input.ReadInt32();
            break;
          }
          case 64: {
            PushbackVelY = input.ReadInt32();
            break;
          }
          case 72: {
            Damage = input.ReadInt32();
            break;
          }
          case 80: {
            SelfLockVelX = input.ReadInt32();
            break;
          }
          case 88: {
            SelfLockVelY = input.ReadInt32();
            break;
          }
          case 96: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 104: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 112: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 120: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 128: {
            BlowUp = input.ReadBool();
            break;
          }
          case 136: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 144: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 152: {
            BType = (global::shared.BulletType) input.ReadEnum();
            break;
          }
          case 160: {
            MhType = (global::shared.MultiHitType) input.ReadEnum();
            break;
          }
          case 168: {
            SimultaneousMultiHitCnt = input.ReadUInt32();
            break;
          }
          case 176: {
            Speed = input.ReadInt32();
            break;
          }
          case 184: {
            DirX = input.ReadInt32();
            break;
          }
          case 192: {
            DirY = input.ReadInt32();
            break;
          }
          case 202: {
            cancelTransit_.AddEntriesFrom(ref input, _map_cancelTransit_codec);
            break;
          }
          case 208: {
            RepeatQuota = input.ReadInt32();
            break;
          }
          case 216: {
            ActiveVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 224: {
            ExplosionVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 232: {
            AllowsWalking = input.ReadBool();
            break;
          }
          case 240: {
            AllowsCrouching = input.ReadBool();
            break;
          }
          case 248: {
            Hardness = input.ReadInt32();
            break;
          }
          case 256: {
            StartupInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 264: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 272: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 280: {
            PerpAccMag = input.ReadInt32();
            break;
          }
          case 288: {
            DelaySelfVelToActive = input.ReadBool();
            break;
          }
          case 296: {
            SpeedIfNotHit = input.ReadInt32();
            break;
          }
          case 304: {
            OmitSoftPushback = input.ReadBool();
            break;
          }
          case 312: {
            HitboxSizeIncX = input.ReadInt32();
            break;
          }
          case 320: {
            HitboxSizeIncY = input.ReadInt32();
            break;
          }
          case 328: {
            RemainsUponHit = input.ReadBool();
            break;
          }
          case 336: {
            RotatesAlongVelocity = input.ReadBool();
            break;
          }
          case 344: {
            DefaultHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 357: {
            HardPushbackBounceNormFactor = input.ReadFloat();
            break;
          }
          case 365: {
            HardPushbackBounceSheerFactor = input.ReadFloat();
            break;
          }
          case 368: {
            IsPixelatedActiveVfx = input.ReadBool();
            break;
          }
          case 376: {
            IsPixelatedExplostionVfx = input.ReadBool();
            break;
          }
          case 384: {
            MhVanishOnMeleeHit = input.ReadBool();
            break;
          }
          case 392: {
            DownSlopePrimerVelY = input.ReadInt32();
            break;
          }
          case 400: {
            MhUpdatesOriginPos = input.ReadBool();
            break;
          }
          case 408: {
            BeamCollision = input.ReadBool();
            break;
          }
          case 421: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 429: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 432: {
            VisionOffsetX = input.ReadInt32();
            break;
          }
          case 440: {
            VisionOffsetY = input.ReadInt32();
            break;
          }
          case 448: {
            VisionSizeX = input.ReadInt32();
            break;
          }
          case 456: {
            VisionSizeY = input.ReadInt32();
            break;
          }
          case 464: {
            SelfLockVelYWhenFlying = input.ReadInt32();
            break;
          }
          case 472: {
            ElementalAttrs = input.ReadUInt32();
            break;
          }
          case 480: {
            CancellableByInventorySlotC = input.ReadBool();
            break;
          }
          case 488: {
            CancellableByInventorySlotD = input.ReadBool();
            break;
          }
          case 501: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 509: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 512: {
            BeamVisualSizeY = input.ReadInt32();
            break;
          }
          case 520: {
            TouchExplosionBombCollision = input.ReadBool();
            break;
          }
          case 528: {
            AirRidingGroundWave = input.ReadBool();
            break;
          }
          case 536: {
            GroundImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 544: {
            WallImpactMeleeCollision = input.ReadBool();
            break;
          }
          case 552: {
            MhInheritsSpin = input.ReadBool();
            break;
          }
          case 565: {
            InitSpinCos = input.ReadFloat();
            break;
          }
          case 573: {
            InitSpinSin = input.ReadFloat();
            break;
          }
          case 576: {
            FinishingFrames = input.ReadInt32();
            break;
          }
          case 584: {
            NoExplosionOnHardPushback = input.ReadBool();
            break;
          }
          case 592: {
            StartupVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 600: {
            Ifc = (global::shared.IfaceCat) input.ReadEnum();
            break;
          }
          case 608: {
            ReflectFireballXIfNotHarder = input.ReadBool();
            break;
          }
          case 616: {
            RejectsReflectionFromAnotherBullet = input.ReadBool();
            break;
          }
          case 624: {
            ProvidesXHardPushback = input.ReadBool();
            break;
          }
          case 632: {
            ProvidesYHardPushbackTop = input.ReadBool();
            break;
          }
          case 640: {
            ProvidesYHardPushbackBottom = input.ReadBool();
            break;
          }
          case 648: {
            IgnoreSlopeDeceleration = input.ReadBool();
            break;
          }
          case 656: {
            RotateOffenderWithSpin = input.ReadBool();
            break;
          }
          case 664: {
            MhNotTriggerOnChHit = input.ReadBool();
            break;
          }
          case 672: {
            MhNotTriggerOnHarderBulletHit = input.ReadBool();
            break;
          }
          case 680: {
            MhNotTriggerOnHardPushbackHit = input.ReadBool();
            break;
          }
          case 688: {
            HopperMissile = input.ReadBool();
            break;
          }
          case 696: {
            BeamRendering = input.ReadBool();
            break;
          }
          case 704: {
            MissileSearchIntervalPow2Minus1 = input.ReadUInt32();
            break;
          }
          case 712: {
            UseChOffsetRegardlessOfEmissionMh = input.ReadBool();
            break;
          }
          case 720: {
            InplaceVanishExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 728: {
            AnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 736: {
            ExplosionAnimLoopingRdfOffset = input.ReadInt32();
            break;
          }
          case 749: {
            GaugeIncReductionRatio = input.ReadFloat();
            break;
          }
          case 752: {
            MhInheritsFramesInBlState = input.ReadBool();
            break;
          }
          case 760: {
            GuardBreakerExtraHitCnt = input.ReadUInt32();
            break;
          }
          case 768: {
            TakesDef1AsHardPushback = input.ReadBool();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
          case 8240: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 8250: {
            if (buffConfig_ == null) {
              BuffConfig = new global::shared.BuffConfig();
            }
            input.ReadMessage(BuffConfig);
            break;
          }
          case 16386: {
            CharacterEmitSfxName = input.ReadString();
            break;
          }
          case 16394: {
            FireballEmitSfxName = input.ReadString();
            break;
          }
          case 16402: {
            ExplosionSfxName = input.ReadString();
            break;
          }
          case 16410: {
            ActiveSfxName = input.ReadString();
            break;
          }
          case 16418: {
            ExplosionOnFleshSfxName = input.ReadString();
            break;
          }
          case 16426: {
            ExplosionOnRockSfxName = input.ReadString();
            break;
          }
          case 16434: {
            ExplosionOnMetalSfxName = input.ReadString();
            break;
          }
          case 16442: {
            ExplosionOnWoodSfxName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Bullet : pb::IMessage<Bullet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bullet> _parser = new pb::MessageParser<Bullet>(() => new Bullet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Bullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet(Bullet other) : this() {
      blState_ = other.blState_;
      framesInBlState_ = other.framesInBlState_;
      bulletLocalId_ = other.bulletLocalId_;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      offenderJoinIndex_ = other.offenderJoinIndex_;
      offenderTrapLocalId_ = other.offenderTrapLocalId_;
      teamId_ = other.teamId_;
      vertMovingTrapLocalIdUponActive_ = other.vertMovingTrapLocalIdUponActive_;
      repeatQuotaLeft_ = other.repeatQuotaLeft_;
      remainingHardPushbackBounceQuota_ = other.remainingHardPushbackBounceQuota_;
      targetCharacterJoinIndex_ = other.targetCharacterJoinIndex_;
      damageDealed_ = other.damageDealed_;
      explodedOnIfc_ = other.explodedOnIfc_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      originatedVirtualGridX_ = other.originatedVirtualGridX_;
      originatedVirtualGridY_ = other.originatedVirtualGridY_;
      spinCos_ = other.spinCos_;
      spinSin_ = other.spinSin_;
      activeSkillHit_ = other.activeSkillHit_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bullet Clone() {
      return new Bullet(this);
    }

    /// <summary>Field number for the "blState" field.</summary>
    public const int BlStateFieldNumber = 1;
    private global::shared.BulletState blState_ = global::shared.BulletState.StartUp;
    /// <summary>
    /// Jargon reference https://www.thegamer.com/fighting-games-frame-data-explained/
    /// ALL lengths are in world coordinate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BulletState BlState {
      get { return blState_; }
      set {
        blState_ = value;
      }
    }

    /// <summary>Field number for the "framesInBlState" field.</summary>
    public const int FramesInBlStateFieldNumber = 2;
    private int framesInBlState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInBlState {
      get { return framesInBlState_; }
      set {
        framesInBlState_ = value;
      }
    }

    /// <summary>Field number for the "bulletLocalId" field.</summary>
    public const int BulletLocalIdFieldNumber = 3;
    private int bulletLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletLocalId {
      get { return bulletLocalId_; }
      set {
        bulletLocalId_ = value;
      }
    }

    /// <summary>Field number for the "originatedRenderFrameId" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 4;
    private int originatedRenderFrameId_;
    /// <summary>
    /// Copied from the first bullet for all subsequent bullets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "offenderJoinIndex" field.</summary>
    public const int OffenderJoinIndexFieldNumber = 5;
    private int offenderJoinIndex_;
    /// <summary>
    /// Copied to favor collision handling of the dispatched bullet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OffenderJoinIndex {
      get { return offenderJoinIndex_; }
      set {
        offenderJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "offenderTrapLocalId" field.</summary>
    public const int OffenderTrapLocalIdFieldNumber = 6;
    private int offenderTrapLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OffenderTrapLocalId {
      get { return offenderTrapLocalId_; }
      set {
        offenderTrapLocalId_ = value;
      }
    }

    /// <summary>Field number for the "teamId" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private int teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "vertMovingTrapLocalIdUponActive" field.</summary>
    public const int VertMovingTrapLocalIdUponActiveFieldNumber = 8;
    private int vertMovingTrapLocalIdUponActive_;
    /// <summary>
    /// [WARNING] Currently we can use "trapLocalId" to directly access "RoomDownsyncFrame.trapsArr" just like "joinIndex" in "calcHardPushbacksNormsForCharacter" -- because memory in "RoomDownsyncFrame.trapsArr" is never truely reused when a trap is destroyed -- yet this approach should be avoided whenever possible; kindly note that even "joinIndex" can be reused for "RoomDownsyncFrame.npcsArr" by carefully tuning "_leftShiftDeadNpcs(...)"  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VertMovingTrapLocalIdUponActive {
      get { return vertMovingTrapLocalIdUponActive_; }
      set {
        vertMovingTrapLocalIdUponActive_ = value;
      }
    }

    /// <summary>Field number for the "repeatQuotaLeft" field.</summary>
    public const int RepeatQuotaLeftFieldNumber = 9;
    private int repeatQuotaLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RepeatQuotaLeft {
      get { return repeatQuotaLeft_; }
      set {
        repeatQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "remainingHardPushbackBounceQuota" field.</summary>
    public const int RemainingHardPushbackBounceQuotaFieldNumber = 10;
    private int remainingHardPushbackBounceQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemainingHardPushbackBounceQuota {
      get { return remainingHardPushbackBounceQuota_; }
      set {
        remainingHardPushbackBounceQuota_ = value;
      }
    }

    /// <summary>Field number for the "targetCharacterJoinIndex" field.</summary>
    public const int TargetCharacterJoinIndexFieldNumber = 11;
    private int targetCharacterJoinIndex_;
    /// <summary>
    /// [WARNING] Assignment to this field MUST BE order-insensitive w.r.t. collider traversal order!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TargetCharacterJoinIndex {
      get { return targetCharacterJoinIndex_; }
      set {
        targetCharacterJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "damageDealed" field.</summary>
    public const int DamageDealedFieldNumber = 12;
    private int damageDealed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageDealed {
      get { return damageDealed_; }
      set {
        damageDealed_ = value;
      }
    }

    /// <summary>Field number for the "explodedOnIfc" field.</summary>
    public const int ExplodedOnIfcFieldNumber = 13;
    private global::shared.IfaceCat explodedOnIfc_ = global::shared.IfaceCat.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.IfaceCat ExplodedOnIfc {
      get { return explodedOnIfc_; }
      set {
        explodedOnIfc_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 14;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 15;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 16;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 17;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 18;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 19;
    private int velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "originatedVirtualGridX" field.</summary>
    public const int OriginatedVirtualGridXFieldNumber = 20;
    private int originatedVirtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedVirtualGridX {
      get { return originatedVirtualGridX_; }
      set {
        originatedVirtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "originatedVirtualGridY" field.</summary>
    public const int OriginatedVirtualGridYFieldNumber = 21;
    private int originatedVirtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedVirtualGridY {
      get { return originatedVirtualGridY_; }
      set {
        originatedVirtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "spinCos" field.</summary>
    public const int SpinCosFieldNumber = 22;
    private float spinCos_;
    /// <summary>
    /// Not using quaternion yet because this is a 2D game.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinCos {
      get { return spinCos_; }
      set {
        spinCos_ = value;
      }
    }

    /// <summary>Field number for the "spinSin" field.</summary>
    public const int SpinSinFieldNumber = 23;
    private float spinSin_;
    /// <summary>
    /// To be used after applying "dirX (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinSin {
      get { return spinSin_; }
      set {
        spinSin_ = value;
      }
    }

    /// <summary>Field number for the "activeSkillHit" field.</summary>
    public const int ActiveSkillHitFieldNumber = 24;
    private int activeSkillHit_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillHit" might've already been reset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveSkillHit {
      get { return activeSkillHit_; }
      set {
        activeSkillHit_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 25;
    private uint skillId_;
    /// <summary>
    /// for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillId" might've already been reset); also for reverse lookup in multihit transition, in the most extreme case, a same "BulletConfig" instance is to be shared across different "Skill"s, thus we put "skillId" in "BulletBattleAttr" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Bullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Bullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlState != other.BlState) return false;
      if (FramesInBlState != other.FramesInBlState) return false;
      if (BulletLocalId != other.BulletLocalId) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OffenderJoinIndex != other.OffenderJoinIndex) return false;
      if (OffenderTrapLocalId != other.OffenderTrapLocalId) return false;
      if (TeamId != other.TeamId) return false;
      if (VertMovingTrapLocalIdUponActive != other.VertMovingTrapLocalIdUponActive) return false;
      if (RepeatQuotaLeft != other.RepeatQuotaLeft) return false;
      if (RemainingHardPushbackBounceQuota != other.RemainingHardPushbackBounceQuota) return false;
      if (TargetCharacterJoinIndex != other.TargetCharacterJoinIndex) return false;
      if (DamageDealed != other.DamageDealed) return false;
      if (ExplodedOnIfc != other.ExplodedOnIfc) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      if (OriginatedVirtualGridX != other.OriginatedVirtualGridX) return false;
      if (OriginatedVirtualGridY != other.OriginatedVirtualGridY) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinCos, other.SpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinSin, other.SpinSin)) return false;
      if (ActiveSkillHit != other.ActiveSkillHit) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BlState != global::shared.BulletState.StartUp) hash ^= BlState.GetHashCode();
      if (FramesInBlState != 0) hash ^= FramesInBlState.GetHashCode();
      if (BulletLocalId != 0) hash ^= BulletLocalId.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OffenderJoinIndex != 0) hash ^= OffenderJoinIndex.GetHashCode();
      if (OffenderTrapLocalId != 0) hash ^= OffenderTrapLocalId.GetHashCode();
      if (TeamId != 0) hash ^= TeamId.GetHashCode();
      if (VertMovingTrapLocalIdUponActive != 0) hash ^= VertMovingTrapLocalIdUponActive.GetHashCode();
      if (RepeatQuotaLeft != 0) hash ^= RepeatQuotaLeft.GetHashCode();
      if (RemainingHardPushbackBounceQuota != 0) hash ^= RemainingHardPushbackBounceQuota.GetHashCode();
      if (TargetCharacterJoinIndex != 0) hash ^= TargetCharacterJoinIndex.GetHashCode();
      if (DamageDealed != 0) hash ^= DamageDealed.GetHashCode();
      if (ExplodedOnIfc != global::shared.IfaceCat.Empty) hash ^= ExplodedOnIfc.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (OriginatedVirtualGridX != 0) hash ^= OriginatedVirtualGridX.GetHashCode();
      if (OriginatedVirtualGridY != 0) hash ^= OriginatedVirtualGridY.GetHashCode();
      if (SpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinCos);
      if (SpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinSin);
      if (ActiveSkillHit != 0) hash ^= ActiveSkillHit.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BlState != global::shared.BulletState.StartUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlState);
      }
      if (FramesInBlState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesInBlState);
      }
      if (BulletLocalId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (OffenderTrapLocalId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OffenderTrapLocalId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TeamId);
      }
      if (VertMovingTrapLocalIdUponActive != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VertMovingTrapLocalIdUponActive);
      }
      if (RepeatQuotaLeft != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RepeatQuotaLeft);
      }
      if (RemainingHardPushbackBounceQuota != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RemainingHardPushbackBounceQuota);
      }
      if (TargetCharacterJoinIndex != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TargetCharacterJoinIndex);
      }
      if (DamageDealed != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageDealed);
      }
      if (ExplodedOnIfc != global::shared.IfaceCat.Empty) {
        output.WriteRawTag(104);
        output.WriteEnum((int) ExplodedOnIfc);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(VelY);
      }
      if (OriginatedVirtualGridX != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OriginatedVirtualGridX);
      }
      if (OriginatedVirtualGridY != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(OriginatedVirtualGridY);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SpinSin);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ActiveSkillHit);
      }
      if (SkillId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BlState != global::shared.BulletState.StartUp) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlState);
      }
      if (FramesInBlState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesInBlState);
      }
      if (BulletLocalId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (OffenderTrapLocalId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OffenderTrapLocalId);
      }
      if (TeamId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TeamId);
      }
      if (VertMovingTrapLocalIdUponActive != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VertMovingTrapLocalIdUponActive);
      }
      if (RepeatQuotaLeft != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RepeatQuotaLeft);
      }
      if (RemainingHardPushbackBounceQuota != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RemainingHardPushbackBounceQuota);
      }
      if (TargetCharacterJoinIndex != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TargetCharacterJoinIndex);
      }
      if (DamageDealed != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageDealed);
      }
      if (ExplodedOnIfc != global::shared.IfaceCat.Empty) {
        output.WriteRawTag(104);
        output.WriteEnum((int) ExplodedOnIfc);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(VelY);
      }
      if (OriginatedVirtualGridX != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OriginatedVirtualGridX);
      }
      if (OriginatedVirtualGridY != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(OriginatedVirtualGridY);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(SpinSin);
      }
      if (ActiveSkillHit != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(ActiveSkillHit);
      }
      if (SkillId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BlState != global::shared.BulletState.StartUp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlState);
      }
      if (FramesInBlState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInBlState);
      }
      if (BulletLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletLocalId);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OffenderJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffenderJoinIndex);
      }
      if (OffenderTrapLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffenderTrapLocalId);
      }
      if (TeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamId);
      }
      if (VertMovingTrapLocalIdUponActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VertMovingTrapLocalIdUponActive);
      }
      if (RepeatQuotaLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RepeatQuotaLeft);
      }
      if (RemainingHardPushbackBounceQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingHardPushbackBounceQuota);
      }
      if (TargetCharacterJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetCharacterJoinIndex);
      }
      if (DamageDealed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDealed);
      }
      if (ExplodedOnIfc != global::shared.IfaceCat.Empty) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExplodedOnIfc);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (OriginatedVirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginatedVirtualGridX);
      }
      if (OriginatedVirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginatedVirtualGridY);
      }
      if (SpinCos != 0F) {
        size += 2 + 4;
      }
      if (SpinSin != 0F) {
        size += 2 + 4;
      }
      if (ActiveSkillHit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveSkillHit);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Bullet other) {
      if (other == null) {
        return;
      }
      if (other.BlState != global::shared.BulletState.StartUp) {
        BlState = other.BlState;
      }
      if (other.FramesInBlState != 0) {
        FramesInBlState = other.FramesInBlState;
      }
      if (other.BulletLocalId != 0) {
        BulletLocalId = other.BulletLocalId;
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OffenderJoinIndex != 0) {
        OffenderJoinIndex = other.OffenderJoinIndex;
      }
      if (other.OffenderTrapLocalId != 0) {
        OffenderTrapLocalId = other.OffenderTrapLocalId;
      }
      if (other.TeamId != 0) {
        TeamId = other.TeamId;
      }
      if (other.VertMovingTrapLocalIdUponActive != 0) {
        VertMovingTrapLocalIdUponActive = other.VertMovingTrapLocalIdUponActive;
      }
      if (other.RepeatQuotaLeft != 0) {
        RepeatQuotaLeft = other.RepeatQuotaLeft;
      }
      if (other.RemainingHardPushbackBounceQuota != 0) {
        RemainingHardPushbackBounceQuota = other.RemainingHardPushbackBounceQuota;
      }
      if (other.TargetCharacterJoinIndex != 0) {
        TargetCharacterJoinIndex = other.TargetCharacterJoinIndex;
      }
      if (other.DamageDealed != 0) {
        DamageDealed = other.DamageDealed;
      }
      if (other.ExplodedOnIfc != global::shared.IfaceCat.Empty) {
        ExplodedOnIfc = other.ExplodedOnIfc;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      if (other.OriginatedVirtualGridX != 0) {
        OriginatedVirtualGridX = other.OriginatedVirtualGridX;
      }
      if (other.OriginatedVirtualGridY != 0) {
        OriginatedVirtualGridY = other.OriginatedVirtualGridY;
      }
      if (other.SpinCos != 0F) {
        SpinCos = other.SpinCos;
      }
      if (other.SpinSin != 0F) {
        SpinSin = other.SpinSin;
      }
      if (other.ActiveSkillHit != 0) {
        ActiveSkillHit = other.ActiveSkillHit;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlState = (global::shared.BulletState) input.ReadEnum();
            break;
          }
          case 16: {
            FramesInBlState = input.ReadInt32();
            break;
          }
          case 24: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 32: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 48: {
            OffenderTrapLocalId = input.ReadInt32();
            break;
          }
          case 56: {
            TeamId = input.ReadInt32();
            break;
          }
          case 64: {
            VertMovingTrapLocalIdUponActive = input.ReadInt32();
            break;
          }
          case 72: {
            RepeatQuotaLeft = input.ReadInt32();
            break;
          }
          case 80: {
            RemainingHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 88: {
            TargetCharacterJoinIndex = input.ReadInt32();
            break;
          }
          case 96: {
            DamageDealed = input.ReadInt32();
            break;
          }
          case 104: {
            ExplodedOnIfc = (global::shared.IfaceCat) input.ReadEnum();
            break;
          }
          case 112: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 120: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 128: {
            DirX = input.ReadInt32();
            break;
          }
          case 136: {
            DirY = input.ReadInt32();
            break;
          }
          case 144: {
            VelX = input.ReadInt32();
            break;
          }
          case 152: {
            VelY = input.ReadInt32();
            break;
          }
          case 160: {
            OriginatedVirtualGridX = input.ReadInt32();
            break;
          }
          case 168: {
            OriginatedVirtualGridY = input.ReadInt32();
            break;
          }
          case 181: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 189: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 192: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 200: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BlState = (global::shared.BulletState) input.ReadEnum();
            break;
          }
          case 16: {
            FramesInBlState = input.ReadInt32();
            break;
          }
          case 24: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 32: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 40: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 48: {
            OffenderTrapLocalId = input.ReadInt32();
            break;
          }
          case 56: {
            TeamId = input.ReadInt32();
            break;
          }
          case 64: {
            VertMovingTrapLocalIdUponActive = input.ReadInt32();
            break;
          }
          case 72: {
            RepeatQuotaLeft = input.ReadInt32();
            break;
          }
          case 80: {
            RemainingHardPushbackBounceQuota = input.ReadInt32();
            break;
          }
          case 88: {
            TargetCharacterJoinIndex = input.ReadInt32();
            break;
          }
          case 96: {
            DamageDealed = input.ReadInt32();
            break;
          }
          case 104: {
            ExplodedOnIfc = (global::shared.IfaceCat) input.ReadEnum();
            break;
          }
          case 112: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 120: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 128: {
            DirX = input.ReadInt32();
            break;
          }
          case 136: {
            DirY = input.ReadInt32();
            break;
          }
          case 144: {
            VelX = input.ReadInt32();
            break;
          }
          case 152: {
            VelY = input.ReadInt32();
            break;
          }
          case 160: {
            OriginatedVirtualGridX = input.ReadInt32();
            break;
          }
          case 168: {
            OriginatedVirtualGridY = input.ReadInt32();
            break;
          }
          case 181: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 189: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 192: {
            ActiveSkillHit = input.ReadInt32();
            break;
          }
          case 200: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapConfig : pb::IMessage<TrapConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapConfig> _parser = new pb::MessageParser<TrapConfig>(() => new TrapConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig(TrapConfig other) : this() {
      speciesId_ = other.speciesId_;
      explosionSpeciesId_ = other.explosionSpeciesId_;
      explosionFrames_ = other.explosionFrames_;
      blowUp_ = other.blowUp_;
      damage_ = other.damage_;
      hitStunFrames_ = other.hitStunFrames_;
      hitInvinsibleFrames_ = other.hitInvinsibleFrames_;
      deactivatable_ = other.deactivatable_;
      hardness_ = other.hardness_;
      deactivateUponTriggered_ = other.deactivateUponTriggered_;
      constFrictionVelXTop_ = other.constFrictionVelXTop_;
      constFrictionVelXBottom_ = other.constFrictionVelXBottom_;
      constFrictionVelYLeft_ = other.constFrictionVelYLeft_;
      constFrictionVelYRight_ = other.constFrictionVelYRight_;
      patrolCueRequiresFullContain_ = other.patrolCueRequiresFullContain_;
      spinAnchorX_ = other.spinAnchorX_;
      spinAnchorY_ = other.spinAnchorY_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      intrinsicSpinCos_ = other.intrinsicSpinCos_;
      intrinsicSpinSin_ = other.intrinsicSpinSin_;
      atk1UponTriggered_ = other.atk1UponTriggered_;
      atk1SkillId_ = other.atk1SkillId_;
      isRotary_ = other.isRotary_;
      noXFlipRendering_ = other.noXFlipRendering_;
      speciesName_ = other.speciesName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfig Clone() {
      return new TrapConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionSpeciesId" field.</summary>
    public const int ExplosionSpeciesIdFieldNumber = 2;
    private int explosionSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionSpeciesId {
      get { return explosionSpeciesId_; }
      set {
        explosionSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "explosionFrames" field.</summary>
    public const int ExplosionFramesFieldNumber = 3;
    private int explosionFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExplosionFrames {
      get { return explosionFrames_; }
      set {
        explosionFrames_ = value;
      }
    }

    /// <summary>Field number for the "blowUp" field.</summary>
    public const int BlowUpFieldNumber = 4;
    private bool blowUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlowUp {
      get { return blowUp_; }
      set {
        blowUp_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 5;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "hitStunFrames" field.</summary>
    public const int HitStunFramesFieldNumber = 6;
    private int hitStunFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitStunFrames {
      get { return hitStunFrames_; }
      set {
        hitStunFrames_ = value;
      }
    }

    /// <summary>Field number for the "hitInvinsibleFrames" field.</summary>
    public const int HitInvinsibleFramesFieldNumber = 7;
    private int hitInvinsibleFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitInvinsibleFrames {
      get { return hitInvinsibleFrames_; }
      set {
        hitInvinsibleFrames_ = value;
      }
    }

    /// <summary>Field number for the "deactivatable" field.</summary>
    public const int DeactivatableFieldNumber = 8;
    private bool deactivatable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deactivatable {
      get { return deactivatable_; }
      set {
        deactivatable_ = value;
      }
    }

    /// <summary>Field number for the "hardness" field.</summary>
    public const int HardnessFieldNumber = 9;
    private int hardness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hardness {
      get { return hardness_; }
      set {
        hardness_ = value;
      }
    }

    /// <summary>Field number for the "deactivateUponTriggered" field.</summary>
    public const int DeactivateUponTriggeredFieldNumber = 10;
    private bool deactivateUponTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeactivateUponTriggered {
      get { return deactivateUponTriggered_; }
      set {
        deactivateUponTriggered_ = value;
      }
    }

    /// <summary>Field number for the "constFrictionVelXTop" field.</summary>
    public const int ConstFrictionVelXTopFieldNumber = 11;
    private int constFrictionVelXTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConstFrictionVelXTop {
      get { return constFrictionVelXTop_; }
      set {
        constFrictionVelXTop_ = value;
      }
    }

    /// <summary>Field number for the "constFrictionVelXBottom" field.</summary>
    public const int ConstFrictionVelXBottomFieldNumber = 12;
    private int constFrictionVelXBottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConstFrictionVelXBottom {
      get { return constFrictionVelXBottom_; }
      set {
        constFrictionVelXBottom_ = value;
      }
    }

    /// <summary>Field number for the "constFrictionVelYLeft" field.</summary>
    public const int ConstFrictionVelYLeftFieldNumber = 13;
    private int constFrictionVelYLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConstFrictionVelYLeft {
      get { return constFrictionVelYLeft_; }
      set {
        constFrictionVelYLeft_ = value;
      }
    }

    /// <summary>Field number for the "constFrictionVelYRight" field.</summary>
    public const int ConstFrictionVelYRightFieldNumber = 14;
    private int constFrictionVelYRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ConstFrictionVelYRight {
      get { return constFrictionVelYRight_; }
      set {
        constFrictionVelYRight_ = value;
      }
    }

    /// <summary>Field number for the "patrolCueRequiresFullContain" field.</summary>
    public const int PatrolCueRequiresFullContainFieldNumber = 15;
    private bool patrolCueRequiresFullContain_;
    /// <summary>
    /// For accurate positioning
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PatrolCueRequiresFullContain {
      get { return patrolCueRequiresFullContain_; }
      set {
        patrolCueRequiresFullContain_ = value;
      }
    }

    /// <summary>Field number for the "spinAnchorX" field.</summary>
    public const int SpinAnchorXFieldNumber = 16;
    private float spinAnchorX_;
    /// <summary>
    ///
    ///[WARNING]
    ///
    ///For a single "Trap", all of its "TrapColliderAttrs" respect the shared spin anchor &amp; angular velocity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinAnchorX {
      get { return spinAnchorX_; }
      set {
        spinAnchorX_ = value;
      }
    }

    /// <summary>Field number for the "spinAnchorY" field.</summary>
    public const int SpinAnchorYFieldNumber = 17;
    private float spinAnchorY_;
    /// <summary>
    /// collision space translation from the original anchor of unrotated polygon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinAnchorY {
      get { return spinAnchorY_; }
      set {
        spinAnchorY_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelCos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 18;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelSin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 19;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "intrinsicSpinCos" field.</summary>
    public const int IntrinsicSpinCosFieldNumber = 20;
    private float intrinsicSpinCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IntrinsicSpinCos {
      get { return intrinsicSpinCos_; }
      set {
        intrinsicSpinCos_ = value;
      }
    }

    /// <summary>Field number for the "intrinsicSpinSin" field.</summary>
    public const int IntrinsicSpinSinFieldNumber = 21;
    private float intrinsicSpinSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float IntrinsicSpinSin {
      get { return intrinsicSpinSin_; }
      set {
        intrinsicSpinSin_ = value;
      }
    }

    /// <summary>Field number for the "atk1UponTriggered" field.</summary>
    public const int Atk1UponTriggeredFieldNumber = 22;
    private bool atk1UponTriggered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Atk1UponTriggered {
      get { return atk1UponTriggered_; }
      set {
        atk1UponTriggered_ = value;
      }
    }

    /// <summary>Field number for the "atk1SkillId" field.</summary>
    public const int Atk1SkillIdFieldNumber = 23;
    private uint atk1SkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Atk1SkillId {
      get { return atk1SkillId_; }
      set {
        atk1SkillId_ = value;
      }
    }

    /// <summary>Field number for the "isRotary" field.</summary>
    public const int IsRotaryFieldNumber = 24;
    private bool isRotary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRotary {
      get { return isRotary_; }
      set {
        isRotary_ = value;
      }
    }

    /// <summary>Field number for the "noXFlipRendering" field.</summary>
    public const int NoXFlipRenderingFieldNumber = 25;
    private bool noXFlipRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NoXFlipRendering {
      get { return noXFlipRendering_; }
      set {
        noXFlipRendering_ = value;
      }
    }

    /// <summary>Field number for the "speciesName" field.</summary>
    public const int SpeciesNameFieldNumber = 1024;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (ExplosionSpeciesId != other.ExplosionSpeciesId) return false;
      if (ExplosionFrames != other.ExplosionFrames) return false;
      if (BlowUp != other.BlowUp) return false;
      if (Damage != other.Damage) return false;
      if (HitStunFrames != other.HitStunFrames) return false;
      if (HitInvinsibleFrames != other.HitInvinsibleFrames) return false;
      if (Deactivatable != other.Deactivatable) return false;
      if (Hardness != other.Hardness) return false;
      if (DeactivateUponTriggered != other.DeactivateUponTriggered) return false;
      if (ConstFrictionVelXTop != other.ConstFrictionVelXTop) return false;
      if (ConstFrictionVelXBottom != other.ConstFrictionVelXBottom) return false;
      if (ConstFrictionVelYLeft != other.ConstFrictionVelYLeft) return false;
      if (ConstFrictionVelYRight != other.ConstFrictionVelYRight) return false;
      if (PatrolCueRequiresFullContain != other.PatrolCueRequiresFullContain) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorX, other.SpinAnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinAnchorY, other.SpinAnchorY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntrinsicSpinCos, other.IntrinsicSpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IntrinsicSpinSin, other.IntrinsicSpinSin)) return false;
      if (Atk1UponTriggered != other.Atk1UponTriggered) return false;
      if (Atk1SkillId != other.Atk1SkillId) return false;
      if (IsRotary != other.IsRotary) return false;
      if (NoXFlipRendering != other.NoXFlipRendering) return false;
      if (SpeciesName != other.SpeciesName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (ExplosionSpeciesId != 0) hash ^= ExplosionSpeciesId.GetHashCode();
      if (ExplosionFrames != 0) hash ^= ExplosionFrames.GetHashCode();
      if (BlowUp != false) hash ^= BlowUp.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (HitStunFrames != 0) hash ^= HitStunFrames.GetHashCode();
      if (HitInvinsibleFrames != 0) hash ^= HitInvinsibleFrames.GetHashCode();
      if (Deactivatable != false) hash ^= Deactivatable.GetHashCode();
      if (Hardness != 0) hash ^= Hardness.GetHashCode();
      if (DeactivateUponTriggered != false) hash ^= DeactivateUponTriggered.GetHashCode();
      if (ConstFrictionVelXTop != 0) hash ^= ConstFrictionVelXTop.GetHashCode();
      if (ConstFrictionVelXBottom != 0) hash ^= ConstFrictionVelXBottom.GetHashCode();
      if (ConstFrictionVelYLeft != 0) hash ^= ConstFrictionVelYLeft.GetHashCode();
      if (ConstFrictionVelYRight != 0) hash ^= ConstFrictionVelYRight.GetHashCode();
      if (PatrolCueRequiresFullContain != false) hash ^= PatrolCueRequiresFullContain.GetHashCode();
      if (SpinAnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorX);
      if (SpinAnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinAnchorY);
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (IntrinsicSpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntrinsicSpinCos);
      if (IntrinsicSpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IntrinsicSpinSin);
      if (Atk1UponTriggered != false) hash ^= Atk1UponTriggered.GetHashCode();
      if (Atk1SkillId != 0) hash ^= Atk1SkillId.GetHashCode();
      if (IsRotary != false) hash ^= IsRotary.GetHashCode();
      if (NoXFlipRendering != false) hash ^= NoXFlipRendering.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExplosionFrames);
      }
      if (BlowUp != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlowUp);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (Deactivatable != false) {
        output.WriteRawTag(64);
        output.WriteBool(Deactivatable);
      }
      if (Hardness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hardness);
      }
      if (DeactivateUponTriggered != false) {
        output.WriteRawTag(80);
        output.WriteBool(DeactivateUponTriggered);
      }
      if (ConstFrictionVelXTop != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConstFrictionVelXTop);
      }
      if (ConstFrictionVelXBottom != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ConstFrictionVelXBottom);
      }
      if (ConstFrictionVelYLeft != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ConstFrictionVelYLeft);
      }
      if (ConstFrictionVelYRight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ConstFrictionVelYRight);
      }
      if (PatrolCueRequiresFullContain != false) {
        output.WriteRawTag(120);
        output.WriteBool(PatrolCueRequiresFullContain);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SpinAnchorY);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (IntrinsicSpinCos != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(IntrinsicSpinCos);
      }
      if (IntrinsicSpinSin != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(IntrinsicSpinSin);
      }
      if (Atk1UponTriggered != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Atk1UponTriggered);
      }
      if (Atk1SkillId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Atk1SkillId);
      }
      if (IsRotary != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsRotary);
      }
      if (NoXFlipRendering != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(NoXFlipRendering);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(SpeciesName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ExplosionFrames);
      }
      if (BlowUp != false) {
        output.WriteRawTag(32);
        output.WriteBool(BlowUp);
      }
      if (Damage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Damage);
      }
      if (HitStunFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitInvinsibleFrames);
      }
      if (Deactivatable != false) {
        output.WriteRawTag(64);
        output.WriteBool(Deactivatable);
      }
      if (Hardness != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Hardness);
      }
      if (DeactivateUponTriggered != false) {
        output.WriteRawTag(80);
        output.WriteBool(DeactivateUponTriggered);
      }
      if (ConstFrictionVelXTop != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ConstFrictionVelXTop);
      }
      if (ConstFrictionVelXBottom != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ConstFrictionVelXBottom);
      }
      if (ConstFrictionVelYLeft != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ConstFrictionVelYLeft);
      }
      if (ConstFrictionVelYRight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ConstFrictionVelYRight);
      }
      if (PatrolCueRequiresFullContain != false) {
        output.WriteRawTag(120);
        output.WriteBool(PatrolCueRequiresFullContain);
      }
      if (SpinAnchorX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(SpinAnchorX);
      }
      if (SpinAnchorY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(SpinAnchorY);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (IntrinsicSpinCos != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(IntrinsicSpinCos);
      }
      if (IntrinsicSpinSin != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(IntrinsicSpinSin);
      }
      if (Atk1UponTriggered != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Atk1UponTriggered);
      }
      if (Atk1SkillId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(Atk1SkillId);
      }
      if (IsRotary != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(IsRotary);
      }
      if (NoXFlipRendering != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(NoXFlipRendering);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(130, 64);
        output.WriteString(SpeciesName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (ExplosionSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionSpeciesId);
      }
      if (ExplosionFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExplosionFrames);
      }
      if (BlowUp != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (HitStunFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStunFrames);
      }
      if (HitInvinsibleFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitInvinsibleFrames);
      }
      if (Deactivatable != false) {
        size += 1 + 1;
      }
      if (Hardness != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hardness);
      }
      if (DeactivateUponTriggered != false) {
        size += 1 + 1;
      }
      if (ConstFrictionVelXTop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConstFrictionVelXTop);
      }
      if (ConstFrictionVelXBottom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConstFrictionVelXBottom);
      }
      if (ConstFrictionVelYLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConstFrictionVelYLeft);
      }
      if (ConstFrictionVelYRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConstFrictionVelYRight);
      }
      if (PatrolCueRequiresFullContain != false) {
        size += 1 + 1;
      }
      if (SpinAnchorX != 0F) {
        size += 2 + 4;
      }
      if (SpinAnchorY != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelCos != 0F) {
        size += 2 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (IntrinsicSpinCos != 0F) {
        size += 2 + 4;
      }
      if (IntrinsicSpinSin != 0F) {
        size += 2 + 4;
      }
      if (Atk1UponTriggered != false) {
        size += 2 + 1;
      }
      if (Atk1SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Atk1SkillId);
      }
      if (IsRotary != false) {
        size += 2 + 1;
      }
      if (NoXFlipRendering != false) {
        size += 2 + 1;
      }
      if (SpeciesName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.ExplosionSpeciesId != 0) {
        ExplosionSpeciesId = other.ExplosionSpeciesId;
      }
      if (other.ExplosionFrames != 0) {
        ExplosionFrames = other.ExplosionFrames;
      }
      if (other.BlowUp != false) {
        BlowUp = other.BlowUp;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.HitStunFrames != 0) {
        HitStunFrames = other.HitStunFrames;
      }
      if (other.HitInvinsibleFrames != 0) {
        HitInvinsibleFrames = other.HitInvinsibleFrames;
      }
      if (other.Deactivatable != false) {
        Deactivatable = other.Deactivatable;
      }
      if (other.Hardness != 0) {
        Hardness = other.Hardness;
      }
      if (other.DeactivateUponTriggered != false) {
        DeactivateUponTriggered = other.DeactivateUponTriggered;
      }
      if (other.ConstFrictionVelXTop != 0) {
        ConstFrictionVelXTop = other.ConstFrictionVelXTop;
      }
      if (other.ConstFrictionVelXBottom != 0) {
        ConstFrictionVelXBottom = other.ConstFrictionVelXBottom;
      }
      if (other.ConstFrictionVelYLeft != 0) {
        ConstFrictionVelYLeft = other.ConstFrictionVelYLeft;
      }
      if (other.ConstFrictionVelYRight != 0) {
        ConstFrictionVelYRight = other.ConstFrictionVelYRight;
      }
      if (other.PatrolCueRequiresFullContain != false) {
        PatrolCueRequiresFullContain = other.PatrolCueRequiresFullContain;
      }
      if (other.SpinAnchorX != 0F) {
        SpinAnchorX = other.SpinAnchorX;
      }
      if (other.SpinAnchorY != 0F) {
        SpinAnchorY = other.SpinAnchorY;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.IntrinsicSpinCos != 0F) {
        IntrinsicSpinCos = other.IntrinsicSpinCos;
      }
      if (other.IntrinsicSpinSin != 0F) {
        IntrinsicSpinSin = other.IntrinsicSpinSin;
      }
      if (other.Atk1UponTriggered != false) {
        Atk1UponTriggered = other.Atk1UponTriggered;
      }
      if (other.Atk1SkillId != 0) {
        Atk1SkillId = other.Atk1SkillId;
      }
      if (other.IsRotary != false) {
        IsRotary = other.IsRotary;
      }
      if (other.NoXFlipRendering != false) {
        NoXFlipRendering = other.NoXFlipRendering;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 32: {
            BlowUp = input.ReadBool();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
          case 48: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            Deactivatable = input.ReadBool();
            break;
          }
          case 72: {
            Hardness = input.ReadInt32();
            break;
          }
          case 80: {
            DeactivateUponTriggered = input.ReadBool();
            break;
          }
          case 88: {
            ConstFrictionVelXTop = input.ReadInt32();
            break;
          }
          case 96: {
            ConstFrictionVelXBottom = input.ReadInt32();
            break;
          }
          case 104: {
            ConstFrictionVelYLeft = input.ReadInt32();
            break;
          }
          case 112: {
            ConstFrictionVelYRight = input.ReadInt32();
            break;
          }
          case 120: {
            PatrolCueRequiresFullContain = input.ReadBool();
            break;
          }
          case 133: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 141: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 149: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 157: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 165: {
            IntrinsicSpinCos = input.ReadFloat();
            break;
          }
          case 173: {
            IntrinsicSpinSin = input.ReadFloat();
            break;
          }
          case 176: {
            Atk1UponTriggered = input.ReadBool();
            break;
          }
          case 184: {
            Atk1SkillId = input.ReadUInt32();
            break;
          }
          case 192: {
            IsRotary = input.ReadBool();
            break;
          }
          case 200: {
            NoXFlipRendering = input.ReadBool();
            break;
          }
          case 8194: {
            SpeciesName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            ExplosionSpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            ExplosionFrames = input.ReadInt32();
            break;
          }
          case 32: {
            BlowUp = input.ReadBool();
            break;
          }
          case 40: {
            Damage = input.ReadInt32();
            break;
          }
          case 48: {
            HitStunFrames = input.ReadInt32();
            break;
          }
          case 56: {
            HitInvinsibleFrames = input.ReadInt32();
            break;
          }
          case 64: {
            Deactivatable = input.ReadBool();
            break;
          }
          case 72: {
            Hardness = input.ReadInt32();
            break;
          }
          case 80: {
            DeactivateUponTriggered = input.ReadBool();
            break;
          }
          case 88: {
            ConstFrictionVelXTop = input.ReadInt32();
            break;
          }
          case 96: {
            ConstFrictionVelXBottom = input.ReadInt32();
            break;
          }
          case 104: {
            ConstFrictionVelYLeft = input.ReadInt32();
            break;
          }
          case 112: {
            ConstFrictionVelYRight = input.ReadInt32();
            break;
          }
          case 120: {
            PatrolCueRequiresFullContain = input.ReadBool();
            break;
          }
          case 133: {
            SpinAnchorX = input.ReadFloat();
            break;
          }
          case 141: {
            SpinAnchorY = input.ReadFloat();
            break;
          }
          case 149: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 157: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 165: {
            IntrinsicSpinCos = input.ReadFloat();
            break;
          }
          case 173: {
            IntrinsicSpinSin = input.ReadFloat();
            break;
          }
          case 176: {
            Atk1UponTriggered = input.ReadBool();
            break;
          }
          case 184: {
            Atk1SkillId = input.ReadUInt32();
            break;
          }
          case 192: {
            IsRotary = input.ReadBool();
            break;
          }
          case 200: {
            NoXFlipRendering = input.ReadBool();
            break;
          }
          case 8194: {
            SpeciesName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapConfigFromTiled : pb::IMessage<TrapConfigFromTiled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapConfigFromTiled> _parser = new pb::MessageParser<TrapConfigFromTiled>(() => new TrapConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled(TrapConfigFromTiled other) : this() {
      speciesId_ = other.speciesId_;
      quota_ = other.quota_;
      speed_ = other.speed_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      subscribesToId_ = other.subscribesToId_;
      subscribesToIdAfterInitialFire_ = other.subscribesToIdAfterInitialFire_;
      subscribesToIdAlt_ = other.subscribesToIdAlt_;
      boxCw_ = other.boxCw_;
      boxCh_ = other.boxCh_;
      initNoAngularVel_ = other.initNoAngularVel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapConfigFromTiled Clone() {
      return new TrapConfigFromTiled(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    /// <summary>
    ///
    ///By the time of writing, I am not yet very confident on what should be completely hardcoded constant in C# and what should be flexibly configured from Tiled Editor. 
    ///
    ///The simple mindset ruling here 
    ///- we couldn't make configurable items infinitely granular, at least not at this early stage of development
    ///- for a "completely static trap" (not moving &amp; not changing appearance even if destroyed), both its appearance and hitbox can be drawn in Tiled Editor
    ///- for a "dynamic trap" (either moving or changing appearance anyway), both its appearance and hitbox can be drawn in Tiled TSX Editor, put onto an Object Layer in Tiled Editor for preview -- however the object on the Object Layer will be removed immediately and replaced by a Trap object in "RoomDownsyncFrame.trapsArr" for dynamic management    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private int quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private int speed_;
    /// <summary>
    /// For speed varying bullets, this is the initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 4;
    private int dirX_;
    /// <summary>
    /// the initial direction indicator for X-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 5;
    private int dirY_;
    /// <summary>
    /// the initial direction indicator for Y-axis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToId" field.</summary>
    public const int SubscribesToIdFieldNumber = 7;
    private int subscribesToId_;
    /// <summary>
    /// [WARNING] This is a "trigger editor id", I don't want to overcomplicated the config of traps, use an additional Trigger to bridge complicated subscription combination between other triggers and a trap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToId {
      get { return subscribesToId_; }
      set {
        subscribesToId_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToIdAfterInitialFire" field.</summary>
    public const int SubscribesToIdAfterInitialFireFieldNumber = 8;
    private int subscribesToIdAfterInitialFire_;
    /// <summary>
    /// [WARNING] For boss door only, couldn't coexist with "subscribesToIdAfterInitialFire" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToIdAfterInitialFire {
      get { return subscribesToIdAfterInitialFire_; }
      set {
        subscribesToIdAfterInitialFire_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToIdAlt" field.</summary>
    public const int SubscribesToIdAltFieldNumber = 9;
    private int subscribesToIdAlt_;
    /// <summary>
    /// [WARNING] For elevator only, couldn't coexist with "subscribesToIdAfterInitialFire"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToIdAlt {
      get { return subscribesToIdAlt_; }
      set {
        subscribesToIdAlt_ = value;
      }
    }

    /// <summary>Field number for the "boxCw" field.</summary>
    public const int BoxCwFieldNumber = 10;
    private float boxCw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BoxCw {
      get { return boxCw_; }
      set {
        boxCw_ = value;
      }
    }

    /// <summary>Field number for the "boxCh" field.</summary>
    public const int BoxChFieldNumber = 11;
    private float boxCh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BoxCh {
      get { return boxCh_; }
      set {
        boxCh_ = value;
      }
    }

    /// <summary>Field number for the "initNoAngularVel" field.</summary>
    public const int InitNoAngularVelFieldNumber = 12;
    private bool initNoAngularVel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InitNoAngularVel {
      get { return initNoAngularVel_; }
      set {
        initNoAngularVel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Quota != other.Quota) return false;
      if (Speed != other.Speed) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (SubscribesToId != other.SubscribesToId) return false;
      if (SubscribesToIdAfterInitialFire != other.SubscribesToIdAfterInitialFire) return false;
      if (SubscribesToIdAlt != other.SubscribesToIdAlt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BoxCw, other.BoxCw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BoxCh, other.BoxCh)) return false;
      if (InitNoAngularVel != other.InitNoAngularVel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (SubscribesToId != 0) hash ^= SubscribesToId.GetHashCode();
      if (SubscribesToIdAfterInitialFire != 0) hash ^= SubscribesToIdAfterInitialFire.GetHashCode();
      if (SubscribesToIdAlt != 0) hash ^= SubscribesToIdAlt.GetHashCode();
      if (BoxCw != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BoxCw);
      if (BoxCh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BoxCh);
      if (InitNoAngularVel != false) hash ^= InitNoAngularVel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (SubscribesToId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubscribesToId);
      }
      if (SubscribesToIdAfterInitialFire != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubscribesToIdAfterInitialFire);
      }
      if (SubscribesToIdAlt != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubscribesToIdAlt);
      }
      if (BoxCw != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(BoxCw);
      }
      if (BoxCh != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(BoxCh);
      }
      if (InitNoAngularVel != false) {
        output.WriteRawTag(96);
        output.WriteBool(InitNoAngularVel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quota);
      }
      if (Speed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Speed);
      }
      if (DirX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DirY);
      }
      if (SubscribesToId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubscribesToId);
      }
      if (SubscribesToIdAfterInitialFire != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SubscribesToIdAfterInitialFire);
      }
      if (SubscribesToIdAlt != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubscribesToIdAlt);
      }
      if (BoxCw != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(BoxCw);
      }
      if (BoxCh != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(BoxCh);
      }
      if (InitNoAngularVel != false) {
        output.WriteRawTag(96);
        output.WriteBool(InitNoAngularVel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (SubscribesToId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToId);
      }
      if (SubscribesToIdAfterInitialFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToIdAfterInitialFire);
      }
      if (SubscribesToIdAlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToIdAlt);
      }
      if (BoxCw != 0F) {
        size += 1 + 4;
      }
      if (BoxCh != 0F) {
        size += 1 + 4;
      }
      if (InitNoAngularVel != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.SubscribesToId != 0) {
        SubscribesToId = other.SubscribesToId;
      }
      if (other.SubscribesToIdAfterInitialFire != 0) {
        SubscribesToIdAfterInitialFire = other.SubscribesToIdAfterInitialFire;
      }
      if (other.SubscribesToIdAlt != 0) {
        SubscribesToIdAlt = other.SubscribesToIdAlt;
      }
      if (other.BoxCw != 0F) {
        BoxCw = other.BoxCw;
      }
      if (other.BoxCh != 0F) {
        BoxCh = other.BoxCh;
      }
      if (other.InitNoAngularVel != false) {
        InitNoAngularVel = other.InitNoAngularVel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 56: {
            SubscribesToId = input.ReadInt32();
            break;
          }
          case 64: {
            SubscribesToIdAfterInitialFire = input.ReadInt32();
            break;
          }
          case 72: {
            SubscribesToIdAlt = input.ReadInt32();
            break;
          }
          case 85: {
            BoxCw = input.ReadFloat();
            break;
          }
          case 93: {
            BoxCh = input.ReadFloat();
            break;
          }
          case 96: {
            InitNoAngularVel = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 16: {
            Quota = input.ReadInt32();
            break;
          }
          case 24: {
            Speed = input.ReadInt32();
            break;
          }
          case 32: {
            DirX = input.ReadInt32();
            break;
          }
          case 40: {
            DirY = input.ReadInt32();
            break;
          }
          case 56: {
            SubscribesToId = input.ReadInt32();
            break;
          }
          case 64: {
            SubscribesToIdAfterInitialFire = input.ReadInt32();
            break;
          }
          case 72: {
            SubscribesToIdAlt = input.ReadInt32();
            break;
          }
          case 85: {
            BoxCw = input.ReadFloat();
            break;
          }
          case 93: {
            BoxCh = input.ReadFloat();
            break;
          }
          case 96: {
            InitNoAngularVel = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapColliderAttr : pb::IMessage<TrapColliderAttr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapColliderAttr> _parser = new pb::MessageParser<TrapColliderAttr>(() => new TrapColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr(TrapColliderAttr other) : this() {
      hitboxOffsetX_ = other.hitboxOffsetX_;
      hitboxOffsetY_ = other.hitboxOffsetY_;
      hitboxSizeX_ = other.hitboxSizeX_;
      hitboxSizeY_ = other.hitboxSizeY_;
      providesHardPushback_ = other.providesHardPushback_;
      providesDamage_ = other.providesDamage_;
      providesEscape_ = other.providesEscape_;
      providesSlipJump_ = other.providesSlipJump_;
      prohibitsWallGrabbing_ = other.prohibitsWallGrabbing_;
      forcesCrouching_ = other.forcesCrouching_;
      speciesId_ = other.speciesId_;
      onlyAllowsAlignedVelX_ = other.onlyAllowsAlignedVelX_;
      onlyAllowsAlignedVelY_ = other.onlyAllowsAlignedVelY_;
      asPatrolCue_ = other.asPatrolCue_;
      tcPc_ = other.tcPc_ != null ? other.tcPc_.Clone() : null;
      trapLocalId_ = other.trapLocalId_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttr Clone() {
      return new TrapColliderAttr(this);
    }

    /// <summary>Field number for the "hitboxOffsetX" field.</summary>
    public const int HitboxOffsetXFieldNumber = 1;
    private int hitboxOffsetX_;
    /// <summary>
    /// In the case of a trap, it might own multiple hitboxes and each hitbox is drawn in Tiled and assigned after parsing the tmx file, thus not put in static config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetX {
      get { return hitboxOffsetX_; }
      set {
        hitboxOffsetX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxOffsetY" field.</summary>
    public const int HitboxOffsetYFieldNumber = 2;
    private int hitboxOffsetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxOffsetY {
      get { return hitboxOffsetY_; }
      set {
        hitboxOffsetY_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeX" field.</summary>
    public const int HitboxSizeXFieldNumber = 3;
    private int hitboxSizeX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeX {
      get { return hitboxSizeX_; }
      set {
        hitboxSizeX_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeY" field.</summary>
    public const int HitboxSizeYFieldNumber = 4;
    private int hitboxSizeY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeY {
      get { return hitboxSizeY_; }
      set {
        hitboxSizeY_ = value;
      }
    }

    /// <summary>Field number for the "providesHardPushback" field.</summary>
    public const int ProvidesHardPushbackFieldNumber = 5;
    private bool providesHardPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesHardPushback {
      get { return providesHardPushback_; }
      set {
        providesHardPushback_ = value;
      }
    }

    /// <summary>Field number for the "providesDamage" field.</summary>
    public const int ProvidesDamageFieldNumber = 6;
    private bool providesDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesDamage {
      get { return providesDamage_; }
      set {
        providesDamage_ = value;
      }
    }

    /// <summary>Field number for the "providesEscape" field.</summary>
    public const int ProvidesEscapeFieldNumber = 7;
    private bool providesEscape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesEscape {
      get { return providesEscape_; }
      set {
        providesEscape_ = value;
      }
    }

    /// <summary>Field number for the "providesSlipJump" field.</summary>
    public const int ProvidesSlipJumpFieldNumber = 8;
    private bool providesSlipJump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProvidesSlipJump {
      get { return providesSlipJump_; }
      set {
        providesSlipJump_ = value;
      }
    }

    /// <summary>Field number for the "prohibitsWallGrabbing" field.</summary>
    public const int ProhibitsWallGrabbingFieldNumber = 9;
    private bool prohibitsWallGrabbing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProhibitsWallGrabbing {
      get { return prohibitsWallGrabbing_; }
      set {
        prohibitsWallGrabbing_ = value;
      }
    }

    /// <summary>Field number for the "forcesCrouching" field.</summary>
    public const int ForcesCrouchingFieldNumber = 10;
    private bool forcesCrouching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForcesCrouching {
      get { return forcesCrouching_; }
      set {
        forcesCrouching_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 11;
    private int speciesId_;
    /// <summary>
    /// Redundancy for referencing "TrapConfig"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "onlyAllowsAlignedVelX" field.</summary>
    public const int OnlyAllowsAlignedVelXFieldNumber = 12;
    private int onlyAllowsAlignedVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnlyAllowsAlignedVelX {
      get { return onlyAllowsAlignedVelX_; }
      set {
        onlyAllowsAlignedVelX_ = value;
      }
    }

    /// <summary>Field number for the "onlyAllowsAlignedVelY" field.</summary>
    public const int OnlyAllowsAlignedVelYFieldNumber = 13;
    private int onlyAllowsAlignedVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OnlyAllowsAlignedVelY {
      get { return onlyAllowsAlignedVelY_; }
      set {
        onlyAllowsAlignedVelY_ = value;
      }
    }

    /// <summary>Field number for the "asPatrolCue" field.</summary>
    public const int AsPatrolCueFieldNumber = 14;
    private bool asPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AsPatrolCue {
      get { return asPatrolCue_; }
      set {
        asPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "tcPc" field.</summary>
    public const int TcPcFieldNumber = 15;
    private global::shared.PatrolCue tcPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PatrolCue TcPc {
      get { return tcPc_; }
      set {
        tcPc_ = value;
      }
    }

    /// <summary>Field number for the "trapLocalId" field.</summary>
    public const int TrapLocalIdFieldNumber = 1024;
    private int trapLocalId_;
    /// <summary>
    /// ref-back upon collision, for damage handling, hardPushback moving and effPushbacks recording (if the trap provides softPushback)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrapLocalId {
      get { return trapLocalId_; }
      set {
        trapLocalId_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 1029;
    private ulong collisionTypeMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitboxOffsetX != other.HitboxOffsetX) return false;
      if (HitboxOffsetY != other.HitboxOffsetY) return false;
      if (HitboxSizeX != other.HitboxSizeX) return false;
      if (HitboxSizeY != other.HitboxSizeY) return false;
      if (ProvidesHardPushback != other.ProvidesHardPushback) return false;
      if (ProvidesDamage != other.ProvidesDamage) return false;
      if (ProvidesEscape != other.ProvidesEscape) return false;
      if (ProvidesSlipJump != other.ProvidesSlipJump) return false;
      if (ProhibitsWallGrabbing != other.ProhibitsWallGrabbing) return false;
      if (ForcesCrouching != other.ForcesCrouching) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (OnlyAllowsAlignedVelX != other.OnlyAllowsAlignedVelX) return false;
      if (OnlyAllowsAlignedVelY != other.OnlyAllowsAlignedVelY) return false;
      if (AsPatrolCue != other.AsPatrolCue) return false;
      if (!object.Equals(TcPc, other.TcPc)) return false;
      if (TrapLocalId != other.TrapLocalId) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HitboxOffsetX != 0) hash ^= HitboxOffsetX.GetHashCode();
      if (HitboxOffsetY != 0) hash ^= HitboxOffsetY.GetHashCode();
      if (HitboxSizeX != 0) hash ^= HitboxSizeX.GetHashCode();
      if (HitboxSizeY != 0) hash ^= HitboxSizeY.GetHashCode();
      if (ProvidesHardPushback != false) hash ^= ProvidesHardPushback.GetHashCode();
      if (ProvidesDamage != false) hash ^= ProvidesDamage.GetHashCode();
      if (ProvidesEscape != false) hash ^= ProvidesEscape.GetHashCode();
      if (ProvidesSlipJump != false) hash ^= ProvidesSlipJump.GetHashCode();
      if (ProhibitsWallGrabbing != false) hash ^= ProhibitsWallGrabbing.GetHashCode();
      if (ForcesCrouching != false) hash ^= ForcesCrouching.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (OnlyAllowsAlignedVelX != 0) hash ^= OnlyAllowsAlignedVelX.GetHashCode();
      if (OnlyAllowsAlignedVelY != 0) hash ^= OnlyAllowsAlignedVelY.GetHashCode();
      if (AsPatrolCue != false) hash ^= AsPatrolCue.GetHashCode();
      if (tcPc_ != null) hash ^= TcPc.GetHashCode();
      if (TrapLocalId != 0) hash ^= TrapLocalId.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(ProvidesHardPushback);
      }
      if (ProvidesDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProvidesDamage);
      }
      if (ProvidesEscape != false) {
        output.WriteRawTag(56);
        output.WriteBool(ProvidesEscape);
      }
      if (ProvidesSlipJump != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProvidesSlipJump);
      }
      if (ProhibitsWallGrabbing != false) {
        output.WriteRawTag(72);
        output.WriteBool(ProhibitsWallGrabbing);
      }
      if (ForcesCrouching != false) {
        output.WriteRawTag(80);
        output.WriteBool(ForcesCrouching);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpeciesId);
      }
      if (OnlyAllowsAlignedVelX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OnlyAllowsAlignedVelX);
      }
      if (OnlyAllowsAlignedVelY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OnlyAllowsAlignedVelY);
      }
      if (AsPatrolCue != false) {
        output.WriteRawTag(112);
        output.WriteBool(AsPatrolCue);
      }
      if (tcPc_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TcPc);
      }
      if (TrapLocalId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HitboxOffsetX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(ProvidesHardPushback);
      }
      if (ProvidesDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(ProvidesDamage);
      }
      if (ProvidesEscape != false) {
        output.WriteRawTag(56);
        output.WriteBool(ProvidesEscape);
      }
      if (ProvidesSlipJump != false) {
        output.WriteRawTag(64);
        output.WriteBool(ProvidesSlipJump);
      }
      if (ProhibitsWallGrabbing != false) {
        output.WriteRawTag(72);
        output.WriteBool(ProhibitsWallGrabbing);
      }
      if (ForcesCrouching != false) {
        output.WriteRawTag(80);
        output.WriteBool(ForcesCrouching);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SpeciesId);
      }
      if (OnlyAllowsAlignedVelX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OnlyAllowsAlignedVelX);
      }
      if (OnlyAllowsAlignedVelY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OnlyAllowsAlignedVelY);
      }
      if (AsPatrolCue != false) {
        output.WriteRawTag(112);
        output.WriteBool(AsPatrolCue);
      }
      if (tcPc_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TcPc);
      }
      if (TrapLocalId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(168, 64);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HitboxOffsetX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetX);
      }
      if (HitboxOffsetY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxOffsetY);
      }
      if (HitboxSizeX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeX);
      }
      if (HitboxSizeY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeY);
      }
      if (ProvidesHardPushback != false) {
        size += 1 + 1;
      }
      if (ProvidesDamage != false) {
        size += 1 + 1;
      }
      if (ProvidesEscape != false) {
        size += 1 + 1;
      }
      if (ProvidesSlipJump != false) {
        size += 1 + 1;
      }
      if (ProhibitsWallGrabbing != false) {
        size += 1 + 1;
      }
      if (ForcesCrouching != false) {
        size += 1 + 1;
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (OnlyAllowsAlignedVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlyAllowsAlignedVelX);
      }
      if (OnlyAllowsAlignedVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnlyAllowsAlignedVelY);
      }
      if (AsPatrolCue != false) {
        size += 1 + 1;
      }
      if (tcPc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcPc);
      }
      if (TrapLocalId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrapLocalId);
      }
      if (CollisionTypeMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.HitboxOffsetX != 0) {
        HitboxOffsetX = other.HitboxOffsetX;
      }
      if (other.HitboxOffsetY != 0) {
        HitboxOffsetY = other.HitboxOffsetY;
      }
      if (other.HitboxSizeX != 0) {
        HitboxSizeX = other.HitboxSizeX;
      }
      if (other.HitboxSizeY != 0) {
        HitboxSizeY = other.HitboxSizeY;
      }
      if (other.ProvidesHardPushback != false) {
        ProvidesHardPushback = other.ProvidesHardPushback;
      }
      if (other.ProvidesDamage != false) {
        ProvidesDamage = other.ProvidesDamage;
      }
      if (other.ProvidesEscape != false) {
        ProvidesEscape = other.ProvidesEscape;
      }
      if (other.ProvidesSlipJump != false) {
        ProvidesSlipJump = other.ProvidesSlipJump;
      }
      if (other.ProhibitsWallGrabbing != false) {
        ProhibitsWallGrabbing = other.ProhibitsWallGrabbing;
      }
      if (other.ForcesCrouching != false) {
        ForcesCrouching = other.ForcesCrouching;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.OnlyAllowsAlignedVelX != 0) {
        OnlyAllowsAlignedVelX = other.OnlyAllowsAlignedVelX;
      }
      if (other.OnlyAllowsAlignedVelY != 0) {
        OnlyAllowsAlignedVelY = other.OnlyAllowsAlignedVelY;
      }
      if (other.AsPatrolCue != false) {
        AsPatrolCue = other.AsPatrolCue;
      }
      if (other.tcPc_ != null) {
        if (tcPc_ == null) {
          TcPc = new global::shared.PatrolCue();
        }
        TcPc.MergeFrom(other.TcPc);
      }
      if (other.TrapLocalId != 0) {
        TrapLocalId = other.TrapLocalId;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 32: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 40: {
            ProvidesHardPushback = input.ReadBool();
            break;
          }
          case 48: {
            ProvidesDamage = input.ReadBool();
            break;
          }
          case 56: {
            ProvidesEscape = input.ReadBool();
            break;
          }
          case 64: {
            ProvidesSlipJump = input.ReadBool();
            break;
          }
          case 72: {
            ProhibitsWallGrabbing = input.ReadBool();
            break;
          }
          case 80: {
            ForcesCrouching = input.ReadBool();
            break;
          }
          case 88: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 96: {
            OnlyAllowsAlignedVelX = input.ReadInt32();
            break;
          }
          case 104: {
            OnlyAllowsAlignedVelY = input.ReadInt32();
            break;
          }
          case 112: {
            AsPatrolCue = input.ReadBool();
            break;
          }
          case 122: {
            if (tcPc_ == null) {
              TcPc = new global::shared.PatrolCue();
            }
            input.ReadMessage(TcPc);
            break;
          }
          case 8192: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HitboxOffsetX = input.ReadInt32();
            break;
          }
          case 16: {
            HitboxOffsetY = input.ReadInt32();
            break;
          }
          case 24: {
            HitboxSizeX = input.ReadInt32();
            break;
          }
          case 32: {
            HitboxSizeY = input.ReadInt32();
            break;
          }
          case 40: {
            ProvidesHardPushback = input.ReadBool();
            break;
          }
          case 48: {
            ProvidesDamage = input.ReadBool();
            break;
          }
          case 56: {
            ProvidesEscape = input.ReadBool();
            break;
          }
          case 64: {
            ProvidesSlipJump = input.ReadBool();
            break;
          }
          case 72: {
            ProhibitsWallGrabbing = input.ReadBool();
            break;
          }
          case 80: {
            ForcesCrouching = input.ReadBool();
            break;
          }
          case 88: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 96: {
            OnlyAllowsAlignedVelX = input.ReadInt32();
            break;
          }
          case 104: {
            OnlyAllowsAlignedVelY = input.ReadInt32();
            break;
          }
          case 112: {
            AsPatrolCue = input.ReadBool();
            break;
          }
          case 122: {
            if (tcPc_ == null) {
              TcPc = new global::shared.PatrolCue();
            }
            input.ReadMessage(TcPc);
            break;
          }
          case 8192: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 8232: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///What distinguished "Trap" and "Npc(typed CharacterDownsync)" is that a "Trap" often has much simpler skillset, vision/patrol reaction -- yet more complicated boundaries and hard/soft pushback config.
  /// </summary>
  public sealed partial class Trap : pb::IMessage<Trap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trap> _parser = new pb::MessageParser<Trap>(() => new Trap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap(Trap other) : this() {
      trapLocalId_ = other.trapLocalId_;
      patrolCueAngularVelFlipMark_ = other.patrolCueAngularVelFlipMark_;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      trapState_ = other.trapState_;
      framesInTrapState_ = other.framesInTrapState_;
      isCompletelyStatic_ = other.isCompletelyStatic_;
      capturedByPatrolCue_ = other.capturedByPatrolCue_;
      framesInPatrolCue_ = other.framesInPatrolCue_;
      waivingPatrolCueId_ = other.waivingPatrolCueId_;
      waivingSpontaneousPatrol_ = other.waivingSpontaneousPatrol_;
      subscribesToTriggerLocalId_ = other.subscribesToTriggerLocalId_;
      subscribesToTriggerLocalIdAlt_ = other.subscribesToTriggerLocalIdAlt_;
      spinCos_ = other.spinCos_;
      spinSin_ = other.spinSin_;
      angularFrameVelCos_ = other.angularFrameVelCos_;
      angularFrameVelSin_ = other.angularFrameVelSin_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      dirX_ = other.dirX_;
      dirY_ = other.dirY_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap Clone() {
      return new Trap(this);
    }

    /// <summary>Field number for the "trapLocalId" field.</summary>
    public const int TrapLocalIdFieldNumber = 1;
    private int trapLocalId_;
    /// <summary>
    /// [WARNING] Used to look up proper "List&lt;TrapColliderAttr>" which is configured in Tiled Editor and remained static during the whole battle!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrapLocalId {
      get { return trapLocalId_; }
      set {
        trapLocalId_ = value;
      }
    }

    /// <summary>Field number for the "patrolCueAngularVelFlipMark" field.</summary>
    public const int PatrolCueAngularVelFlipMarkFieldNumber = 2;
    private int patrolCueAngularVelFlipMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PatrolCueAngularVelFlipMark {
      get { return patrolCueAngularVelFlipMark_; }
      set {
        patrolCueAngularVelFlipMark_ = value;
      }
    }

    /// <summary>Field number for the "configFromTiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 3;
    private global::shared.TrapConfigFromTiled configFromTiled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "trapState" field.</summary>
    public const int TrapStateFieldNumber = 4;
    private global::shared.TrapState trapState_ = global::shared.TrapState.Tidle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapState TrapState {
      get { return trapState_; }
      set {
        trapState_ = value;
      }
    }

    /// <summary>Field number for the "framesInTrapState" field.</summary>
    public const int FramesInTrapStateFieldNumber = 5;
    private int framesInTrapState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInTrapState {
      get { return framesInTrapState_; }
      set {
        framesInTrapState_ = value;
      }
    }

    /// <summary>Field number for the "isCompletelyStatic" field.</summary>
    public const int IsCompletelyStaticFieldNumber = 6;
    private bool isCompletelyStatic_;
    /// <summary>
    ///
    ///[WARNING] Here "virtualGridX" and "virtualGridY" denotes the point in virtual grid for local (0, 0) of a trap, then each "colliderAttr" carries "hitboxOffsetX", "hitboxOffsetY", "hitboxSizeX" and "hitboxSizeY" also in virtual grid!
    ///
    ///It's bit embarrassing that in Tiled Editor
    ///- if we draw a rectangle in an Object Layer by the rectangle tool, its local (0, 0) is the bottom-left corner, but
    ///- if we put an image object in an Object Layer, its local (0, 0) is the upper-left corner
    ///
    ///such a frustrating default so we'll use a uniformed local (0, 0) -- the center of rectangle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCompletelyStatic {
      get { return isCompletelyStatic_; }
      set {
        isCompletelyStatic_ = value;
      }
    }

    /// <summary>Field number for the "capturedByPatrolCue" field.</summary>
    public const int CapturedByPatrolCueFieldNumber = 7;
    private bool capturedByPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CapturedByPatrolCue {
      get { return capturedByPatrolCue_; }
      set {
        capturedByPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "framesInPatrolCue" field.</summary>
    public const int FramesInPatrolCueFieldNumber = 8;
    private int framesInPatrolCue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInPatrolCue {
      get { return framesInPatrolCue_; }
      set {
        framesInPatrolCue_ = value;
      }
    }

    /// <summary>Field number for the "waivingPatrolCueId" field.</summary>
    public const int WaivingPatrolCueIdFieldNumber = 9;
    private int waivingPatrolCueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaivingPatrolCueId {
      get { return waivingPatrolCueId_; }
      set {
        waivingPatrolCueId_ = value;
      }
    }

    /// <summary>Field number for the "waivingSpontaneousPatrol" field.</summary>
    public const int WaivingSpontaneousPatrolFieldNumber = 10;
    private bool waivingSpontaneousPatrol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WaivingSpontaneousPatrol {
      get { return waivingSpontaneousPatrol_; }
      set {
        waivingSpontaneousPatrol_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToTriggerLocalId" field.</summary>
    public const int SubscribesToTriggerLocalIdFieldNumber = 11;
    private int subscribesToTriggerLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToTriggerLocalId {
      get { return subscribesToTriggerLocalId_; }
      set {
        subscribesToTriggerLocalId_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToTriggerLocalIdAlt" field.</summary>
    public const int SubscribesToTriggerLocalIdAltFieldNumber = 12;
    private int subscribesToTriggerLocalIdAlt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscribesToTriggerLocalIdAlt {
      get { return subscribesToTriggerLocalIdAlt_; }
      set {
        subscribesToTriggerLocalIdAlt_ = value;
      }
    }

    /// <summary>Field number for the "spinCos" field.</summary>
    public const int SpinCosFieldNumber = 13;
    private float spinCos_;
    /// <summary>
    /// To be used after applying "dirX (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinCos {
      get { return spinCos_; }
      set {
        spinCos_ = value;
      }
    }

    /// <summary>Field number for the "spinSin" field.</summary>
    public const int SpinSinFieldNumber = 14;
    private float spinSin_;
    /// <summary>
    /// To be used after applying "dirX (used for mirroring)"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpinSin {
      get { return spinSin_; }
      set {
        spinSin_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelCos" field.</summary>
    public const int AngularFrameVelCosFieldNumber = 15;
    private float angularFrameVelCos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelCos {
      get { return angularFrameVelCos_; }
      set {
        angularFrameVelCos_ = value;
      }
    }

    /// <summary>Field number for the "angularFrameVelSin" field.</summary>
    public const int AngularFrameVelSinFieldNumber = 16;
    private float angularFrameVelSin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AngularFrameVelSin {
      get { return angularFrameVelSin_; }
      set {
        angularFrameVelSin_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 17;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 18;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 19;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "dirY" field.</summary>
    public const int DirYFieldNumber = 20;
    private int dirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirY {
      get { return dirY_; }
      set {
        dirY_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 21;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 22;
    private int velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrapLocalId != other.TrapLocalId) return false;
      if (PatrolCueAngularVelFlipMark != other.PatrolCueAngularVelFlipMark) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (TrapState != other.TrapState) return false;
      if (FramesInTrapState != other.FramesInTrapState) return false;
      if (IsCompletelyStatic != other.IsCompletelyStatic) return false;
      if (CapturedByPatrolCue != other.CapturedByPatrolCue) return false;
      if (FramesInPatrolCue != other.FramesInPatrolCue) return false;
      if (WaivingPatrolCueId != other.WaivingPatrolCueId) return false;
      if (WaivingSpontaneousPatrol != other.WaivingSpontaneousPatrol) return false;
      if (SubscribesToTriggerLocalId != other.SubscribesToTriggerLocalId) return false;
      if (SubscribesToTriggerLocalIdAlt != other.SubscribesToTriggerLocalIdAlt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinCos, other.SpinCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpinSin, other.SpinSin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelCos, other.AngularFrameVelCos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularFrameVelSin, other.AngularFrameVelSin)) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DirX != other.DirX) return false;
      if (DirY != other.DirY) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TrapLocalId != 0) hash ^= TrapLocalId.GetHashCode();
      if (PatrolCueAngularVelFlipMark != 0) hash ^= PatrolCueAngularVelFlipMark.GetHashCode();
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (TrapState != global::shared.TrapState.Tidle) hash ^= TrapState.GetHashCode();
      if (FramesInTrapState != 0) hash ^= FramesInTrapState.GetHashCode();
      if (IsCompletelyStatic != false) hash ^= IsCompletelyStatic.GetHashCode();
      if (CapturedByPatrolCue != false) hash ^= CapturedByPatrolCue.GetHashCode();
      if (FramesInPatrolCue != 0) hash ^= FramesInPatrolCue.GetHashCode();
      if (WaivingPatrolCueId != 0) hash ^= WaivingPatrolCueId.GetHashCode();
      if (WaivingSpontaneousPatrol != false) hash ^= WaivingSpontaneousPatrol.GetHashCode();
      if (SubscribesToTriggerLocalId != 0) hash ^= SubscribesToTriggerLocalId.GetHashCode();
      if (SubscribesToTriggerLocalIdAlt != 0) hash ^= SubscribesToTriggerLocalIdAlt.GetHashCode();
      if (SpinCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinCos);
      if (SpinSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpinSin);
      if (AngularFrameVelCos != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelCos);
      if (AngularFrameVelSin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularFrameVelSin);
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (DirY != 0) hash ^= DirY.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TrapLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrapLocalId);
      }
      if (PatrolCueAngularVelFlipMark != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PatrolCueAngularVelFlipMark);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompletelyStatic);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(56);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(80);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (SubscribesToTriggerLocalId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SubscribesToTriggerLocalId);
      }
      if (SubscribesToTriggerLocalIdAlt != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SubscribesToTriggerLocalIdAlt);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SpinSin);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TrapLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrapLocalId);
      }
      if (PatrolCueAngularVelFlipMark != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PatrolCueAngularVelFlipMark);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsCompletelyStatic);
      }
      if (CapturedByPatrolCue != false) {
        output.WriteRawTag(56);
        output.WriteBool(CapturedByPatrolCue);
      }
      if (FramesInPatrolCue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        output.WriteRawTag(80);
        output.WriteBool(WaivingSpontaneousPatrol);
      }
      if (SubscribesToTriggerLocalId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SubscribesToTriggerLocalId);
      }
      if (SubscribesToTriggerLocalIdAlt != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SubscribesToTriggerLocalIdAlt);
      }
      if (SpinCos != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(SpinCos);
      }
      if (SpinSin != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(SpinSin);
      }
      if (AngularFrameVelCos != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(AngularFrameVelCos);
      }
      if (AngularFrameVelSin != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(AngularFrameVelSin);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(VirtualGridY);
      }
      if (DirX != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(DirX);
      }
      if (DirY != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DirY);
      }
      if (VelX != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(VelY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TrapLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrapLocalId);
      }
      if (PatrolCueAngularVelFlipMark != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PatrolCueAngularVelFlipMark);
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (TrapState != global::shared.TrapState.Tidle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrapState);
      }
      if (FramesInTrapState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInTrapState);
      }
      if (IsCompletelyStatic != false) {
        size += 1 + 1;
      }
      if (CapturedByPatrolCue != false) {
        size += 1 + 1;
      }
      if (FramesInPatrolCue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPatrolCue);
      }
      if (WaivingPatrolCueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaivingPatrolCueId);
      }
      if (WaivingSpontaneousPatrol != false) {
        size += 1 + 1;
      }
      if (SubscribesToTriggerLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToTriggerLocalId);
      }
      if (SubscribesToTriggerLocalIdAlt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscribesToTriggerLocalIdAlt);
      }
      if (SpinCos != 0F) {
        size += 1 + 4;
      }
      if (SpinSin != 0F) {
        size += 1 + 4;
      }
      if (AngularFrameVelCos != 0F) {
        size += 1 + 4;
      }
      if (AngularFrameVelSin != 0F) {
        size += 2 + 4;
      }
      if (VirtualGridX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DirX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (DirY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DirY);
      }
      if (VelX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trap other) {
      if (other == null) {
        return;
      }
      if (other.TrapLocalId != 0) {
        TrapLocalId = other.TrapLocalId;
      }
      if (other.PatrolCueAngularVelFlipMark != 0) {
        PatrolCueAngularVelFlipMark = other.PatrolCueAngularVelFlipMark;
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::shared.TrapConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.TrapState != global::shared.TrapState.Tidle) {
        TrapState = other.TrapState;
      }
      if (other.FramesInTrapState != 0) {
        FramesInTrapState = other.FramesInTrapState;
      }
      if (other.IsCompletelyStatic != false) {
        IsCompletelyStatic = other.IsCompletelyStatic;
      }
      if (other.CapturedByPatrolCue != false) {
        CapturedByPatrolCue = other.CapturedByPatrolCue;
      }
      if (other.FramesInPatrolCue != 0) {
        FramesInPatrolCue = other.FramesInPatrolCue;
      }
      if (other.WaivingPatrolCueId != 0) {
        WaivingPatrolCueId = other.WaivingPatrolCueId;
      }
      if (other.WaivingSpontaneousPatrol != false) {
        WaivingSpontaneousPatrol = other.WaivingSpontaneousPatrol;
      }
      if (other.SubscribesToTriggerLocalId != 0) {
        SubscribesToTriggerLocalId = other.SubscribesToTriggerLocalId;
      }
      if (other.SubscribesToTriggerLocalIdAlt != 0) {
        SubscribesToTriggerLocalIdAlt = other.SubscribesToTriggerLocalIdAlt;
      }
      if (other.SpinCos != 0F) {
        SpinCos = other.SpinCos;
      }
      if (other.SpinSin != 0F) {
        SpinSin = other.SpinSin;
      }
      if (other.AngularFrameVelCos != 0F) {
        AngularFrameVelCos = other.AngularFrameVelCos;
      }
      if (other.AngularFrameVelSin != 0F) {
        AngularFrameVelSin = other.AngularFrameVelSin;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.DirY != 0) {
        DirY = other.DirY;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            PatrolCueAngularVelFlipMark = input.ReadInt32();
            break;
          }
          case 26: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TrapConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 32: {
            TrapState = (global::shared.TrapState) input.ReadEnum();
            break;
          }
          case 40: {
            FramesInTrapState = input.ReadInt32();
            break;
          }
          case 48: {
            IsCompletelyStatic = input.ReadBool();
            break;
          }
          case 56: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 64: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 72: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 80: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 88: {
            SubscribesToTriggerLocalId = input.ReadInt32();
            break;
          }
          case 96: {
            SubscribesToTriggerLocalIdAlt = input.ReadInt32();
            break;
          }
          case 109: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 117: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 125: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 133: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 136: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 144: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 152: {
            DirX = input.ReadInt32();
            break;
          }
          case 160: {
            DirY = input.ReadInt32();
            break;
          }
          case 168: {
            VelX = input.ReadInt32();
            break;
          }
          case 176: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TrapLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            PatrolCueAngularVelFlipMark = input.ReadInt32();
            break;
          }
          case 26: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.TrapConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 32: {
            TrapState = (global::shared.TrapState) input.ReadEnum();
            break;
          }
          case 40: {
            FramesInTrapState = input.ReadInt32();
            break;
          }
          case 48: {
            IsCompletelyStatic = input.ReadBool();
            break;
          }
          case 56: {
            CapturedByPatrolCue = input.ReadBool();
            break;
          }
          case 64: {
            FramesInPatrolCue = input.ReadInt32();
            break;
          }
          case 72: {
            WaivingPatrolCueId = input.ReadInt32();
            break;
          }
          case 80: {
            WaivingSpontaneousPatrol = input.ReadBool();
            break;
          }
          case 88: {
            SubscribesToTriggerLocalId = input.ReadInt32();
            break;
          }
          case 96: {
            SubscribesToTriggerLocalIdAlt = input.ReadInt32();
            break;
          }
          case 109: {
            SpinCos = input.ReadFloat();
            break;
          }
          case 117: {
            SpinSin = input.ReadFloat();
            break;
          }
          case 125: {
            AngularFrameVelCos = input.ReadFloat();
            break;
          }
          case 133: {
            AngularFrameVelSin = input.ReadFloat();
            break;
          }
          case 136: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 144: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 152: {
            DirX = input.ReadInt32();
            break;
          }
          case 160: {
            DirY = input.ReadInt32();
            break;
          }
          case 168: {
            VelX = input.ReadInt32();
            break;
          }
          case 176: {
            VelY = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerConfig : pb::IMessage<TriggerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerConfig> _parser = new pb::MessageParser<TriggerConfig>(() => new TriggerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig(TriggerConfig other) : this() {
      speciesId_ = other.speciesId_;
      speciesName_ = other.speciesName_;
      triggerType_ = other.triggerType_;
      collisionTypeMask_ = other.collisionTypeMask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfig Clone() {
      return new TriggerConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "speciesName" field.</summary>
    public const int SpeciesNameFieldNumber = 2;
    private string speciesName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciesName {
      get { return speciesName_; }
      set {
        speciesName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "triggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 3;
    private global::shared.TriggerType triggerType_ = global::shared.TriggerType.TtNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "collisionTypeMask" field.</summary>
    public const int CollisionTypeMaskFieldNumber = 4;
    private ulong collisionTypeMask_;
    /// <summary>
    ///
    ///:repeats "quota" times
    ///|&lt;-------------------------------------- recoveryFrames ----------------------------->|&lt;-----------------recoveryFrames ---------->|.......
    ///:repeats "subCycleQuota" times                                                        :repeats "subCycleQuota" times
    ///|&lt;-delayedFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|&lt;-subCycleTriggerFrames->|       |.......
    ///|TReady           |TCoolingDown             |TCoolingDown(replay)     |TCoolingDown(replay)     |TReady |.......
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CollisionTypeMask {
      get { return collisionTypeMask_; }
      set {
        collisionTypeMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (SpeciesName != other.SpeciesName) return false;
      if (TriggerType != other.TriggerType) return false;
      if (CollisionTypeMask != other.CollisionTypeMask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (SpeciesName.Length != 0) hash ^= SpeciesName.GetHashCode();
      if (TriggerType != global::shared.TriggerType.TtNone) hash ^= TriggerType.GetHashCode();
      if (CollisionTypeMask != 0UL) hash ^= CollisionTypeMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (TriggerType != global::shared.TriggerType.TtNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TriggerType);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpeciesName);
      }
      if (TriggerType != global::shared.TriggerType.TtNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TriggerType);
      }
      if (CollisionTypeMask != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (SpeciesName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpeciesName);
      }
      if (TriggerType != global::shared.TriggerType.TtNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (CollisionTypeMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CollisionTypeMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.SpeciesName.Length != 0) {
        SpeciesName = other.SpeciesName;
      }
      if (other.TriggerType != global::shared.TriggerType.TtNone) {
        TriggerType = other.TriggerType;
      }
      if (other.CollisionTypeMask != 0UL) {
        CollisionTypeMask = other.CollisionTypeMask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            TriggerType = (global::shared.TriggerType) input.ReadEnum();
            break;
          }
          case 32: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 18: {
            SpeciesName = input.ReadString();
            break;
          }
          case 24: {
            TriggerType = (global::shared.TriggerType) input.ReadEnum();
            break;
          }
          case 32: {
            CollisionTypeMask = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PeerUdpAddr : pb::IMessage<PeerUdpAddr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeerUdpAddr> _parser = new pb::MessageParser<PeerUdpAddr>(() => new PeerUdpAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PeerUdpAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr(PeerUdpAddr other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      authKey_ = other.authKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PeerUdpAddr Clone() {
      return new PeerUdpAddr(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "authKey" field.</summary>
    public const int AuthKeyFieldNumber = 3;
    private int authKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuthKey {
      get { return authKey_; }
      set {
        authKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PeerUdpAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PeerUdpAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (AuthKey != other.AuthKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (AuthKey != 0) hash ^= AuthKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (AuthKey != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AuthKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (AuthKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AuthKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PeerUdpAddr other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.AuthKey != 0) {
        AuthKey = other.AuthKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            AuthKey = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            AuthKey = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleColliderInfo : pb::IMessage<BattleColliderInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleColliderInfo> _parser = new pb::MessageParser<BattleColliderInfo>(() => new BattleColliderInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleColliderInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo(BattleColliderInfo other) : this() {
      stageName_ = other.stageName_;
      boundRoomId_ = other.boundRoomId_;
      battleDurationFrames_ = other.battleDurationFrames_;
      inputFrameUpsyncDelayTolerance_ = other.inputFrameUpsyncDelayTolerance_;
      maxChasingRenderFramesPerUpdate_ = other.maxChasingRenderFramesPerUpdate_;
      rollbackEstimatedDtMillis_ = other.rollbackEstimatedDtMillis_;
      rollbackEstimatedDtNanos_ = other.rollbackEstimatedDtNanos_;
      renderBufferSize_ = other.renderBufferSize_;
      collisionMinStep_ = other.collisionMinStep_;
      boundRoomCapacity_ = other.boundRoomCapacity_;
      preallocNpcCapacity_ = other.preallocNpcCapacity_;
      preallocBulletCapacity_ = other.preallocBulletCapacity_;
      battleUdpTunnel_ = other.battleUdpTunnel_ != null ? other.battleUdpTunnel_.Clone() : null;
      frameLogEnabled_ = other.frameLogEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleColliderInfo Clone() {
      return new BattleColliderInfo(this);
    }

    /// <summary>Field number for the "stageName" field.</summary>
    public const int StageNameFieldNumber = 1;
    private string stageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StageName {
      get { return stageName_; }
      set {
        stageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boundRoomId" field.</summary>
    public const int BoundRoomIdFieldNumber = 2;
    private int boundRoomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoundRoomId {
      get { return boundRoomId_; }
      set {
        boundRoomId_ = value;
      }
    }

    /// <summary>Field number for the "battleDurationFrames" field.</summary>
    public const int BattleDurationFramesFieldNumber = 3;
    private long battleDurationFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BattleDurationFrames {
      get { return battleDurationFrames_; }
      set {
        battleDurationFrames_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameUpsyncDelayTolerance" field.</summary>
    public const int InputFrameUpsyncDelayToleranceFieldNumber = 4;
    private int inputFrameUpsyncDelayTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputFrameUpsyncDelayTolerance {
      get { return inputFrameUpsyncDelayTolerance_; }
      set {
        inputFrameUpsyncDelayTolerance_ = value;
      }
    }

    /// <summary>Field number for the "maxChasingRenderFramesPerUpdate" field.</summary>
    public const int MaxChasingRenderFramesPerUpdateFieldNumber = 5;
    private int maxChasingRenderFramesPerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxChasingRenderFramesPerUpdate {
      get { return maxChasingRenderFramesPerUpdate_; }
      set {
        maxChasingRenderFramesPerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "rollbackEstimatedDtMillis" field.</summary>
    public const int RollbackEstimatedDtMillisFieldNumber = 6;
    private double rollbackEstimatedDtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RollbackEstimatedDtMillis {
      get { return rollbackEstimatedDtMillis_; }
      set {
        rollbackEstimatedDtMillis_ = value;
      }
    }

    /// <summary>Field number for the "rollbackEstimatedDtNanos" field.</summary>
    public const int RollbackEstimatedDtNanosFieldNumber = 7;
    private long rollbackEstimatedDtNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RollbackEstimatedDtNanos {
      get { return rollbackEstimatedDtNanos_; }
      set {
        rollbackEstimatedDtNanos_ = value;
      }
    }

    /// <summary>Field number for the "renderBufferSize" field.</summary>
    public const int RenderBufferSizeFieldNumber = 8;
    private int renderBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RenderBufferSize {
      get { return renderBufferSize_; }
      set {
        renderBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "collisionMinStep" field.</summary>
    public const int CollisionMinStepFieldNumber = 9;
    private int collisionMinStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CollisionMinStep {
      get { return collisionMinStep_; }
      set {
        collisionMinStep_ = value;
      }
    }

    /// <summary>Field number for the "boundRoomCapacity" field.</summary>
    public const int BoundRoomCapacityFieldNumber = 10;
    private int boundRoomCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoundRoomCapacity {
      get { return boundRoomCapacity_; }
      set {
        boundRoomCapacity_ = value;
      }
    }

    /// <summary>Field number for the "preallocNpcCapacity" field.</summary>
    public const int PreallocNpcCapacityFieldNumber = 11;
    private int preallocNpcCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreallocNpcCapacity {
      get { return preallocNpcCapacity_; }
      set {
        preallocNpcCapacity_ = value;
      }
    }

    /// <summary>Field number for the "preallocBulletCapacity" field.</summary>
    public const int PreallocBulletCapacityFieldNumber = 12;
    private int preallocBulletCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreallocBulletCapacity {
      get { return preallocBulletCapacity_; }
      set {
        preallocBulletCapacity_ = value;
      }
    }

    /// <summary>Field number for the "battleUdpTunnel" field.</summary>
    public const int BattleUdpTunnelFieldNumber = 1024;
    private global::shared.PeerUdpAddr battleUdpTunnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PeerUdpAddr BattleUdpTunnel {
      get { return battleUdpTunnel_; }
      set {
        battleUdpTunnel_ = value;
      }
    }

    /// <summary>Field number for the "frameLogEnabled" field.</summary>
    public const int FrameLogEnabledFieldNumber = 1025;
    private bool frameLogEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FrameLogEnabled {
      get { return frameLogEnabled_; }
      set {
        frameLogEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleColliderInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleColliderInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StageName != other.StageName) return false;
      if (BoundRoomId != other.BoundRoomId) return false;
      if (BattleDurationFrames != other.BattleDurationFrames) return false;
      if (InputFrameUpsyncDelayTolerance != other.InputFrameUpsyncDelayTolerance) return false;
      if (MaxChasingRenderFramesPerUpdate != other.MaxChasingRenderFramesPerUpdate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollbackEstimatedDtMillis, other.RollbackEstimatedDtMillis)) return false;
      if (RollbackEstimatedDtNanos != other.RollbackEstimatedDtNanos) return false;
      if (RenderBufferSize != other.RenderBufferSize) return false;
      if (CollisionMinStep != other.CollisionMinStep) return false;
      if (BoundRoomCapacity != other.BoundRoomCapacity) return false;
      if (PreallocNpcCapacity != other.PreallocNpcCapacity) return false;
      if (PreallocBulletCapacity != other.PreallocBulletCapacity) return false;
      if (!object.Equals(BattleUdpTunnel, other.BattleUdpTunnel)) return false;
      if (FrameLogEnabled != other.FrameLogEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StageName.Length != 0) hash ^= StageName.GetHashCode();
      if (BoundRoomId != 0) hash ^= BoundRoomId.GetHashCode();
      if (BattleDurationFrames != 0L) hash ^= BattleDurationFrames.GetHashCode();
      if (InputFrameUpsyncDelayTolerance != 0) hash ^= InputFrameUpsyncDelayTolerance.GetHashCode();
      if (MaxChasingRenderFramesPerUpdate != 0) hash ^= MaxChasingRenderFramesPerUpdate.GetHashCode();
      if (RollbackEstimatedDtMillis != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollbackEstimatedDtMillis);
      if (RollbackEstimatedDtNanos != 0L) hash ^= RollbackEstimatedDtNanos.GetHashCode();
      if (RenderBufferSize != 0) hash ^= RenderBufferSize.GetHashCode();
      if (CollisionMinStep != 0) hash ^= CollisionMinStep.GetHashCode();
      if (BoundRoomCapacity != 0) hash ^= BoundRoomCapacity.GetHashCode();
      if (PreallocNpcCapacity != 0) hash ^= PreallocNpcCapacity.GetHashCode();
      if (PreallocBulletCapacity != 0) hash ^= PreallocBulletCapacity.GetHashCode();
      if (battleUdpTunnel_ != null) hash ^= BattleUdpTunnel.GetHashCode();
      if (FrameLogEnabled != false) hash ^= FrameLogEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RollbackEstimatedDtMillis);
      }
      if (RollbackEstimatedDtNanos != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(FrameLogEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StageName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StageName);
      }
      if (BoundRoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RollbackEstimatedDtMillis);
      }
      if (RollbackEstimatedDtNanos != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        output.WriteRawTag(130, 64);
        output.WriteMessage(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(FrameLogEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StageName);
      }
      if (BoundRoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomId);
      }
      if (BattleDurationFrames != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleDurationFrames);
      }
      if (InputFrameUpsyncDelayTolerance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputFrameUpsyncDelayTolerance);
      }
      if (MaxChasingRenderFramesPerUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChasingRenderFramesPerUpdate);
      }
      if (RollbackEstimatedDtMillis != 0D) {
        size += 1 + 8;
      }
      if (RollbackEstimatedDtNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RollbackEstimatedDtNanos);
      }
      if (RenderBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RenderBufferSize);
      }
      if (CollisionMinStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollisionMinStep);
      }
      if (BoundRoomCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoundRoomCapacity);
      }
      if (PreallocNpcCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocNpcCapacity);
      }
      if (PreallocBulletCapacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreallocBulletCapacity);
      }
      if (battleUdpTunnel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BattleUdpTunnel);
      }
      if (FrameLogEnabled != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleColliderInfo other) {
      if (other == null) {
        return;
      }
      if (other.StageName.Length != 0) {
        StageName = other.StageName;
      }
      if (other.BoundRoomId != 0) {
        BoundRoomId = other.BoundRoomId;
      }
      if (other.BattleDurationFrames != 0L) {
        BattleDurationFrames = other.BattleDurationFrames;
      }
      if (other.InputFrameUpsyncDelayTolerance != 0) {
        InputFrameUpsyncDelayTolerance = other.InputFrameUpsyncDelayTolerance;
      }
      if (other.MaxChasingRenderFramesPerUpdate != 0) {
        MaxChasingRenderFramesPerUpdate = other.MaxChasingRenderFramesPerUpdate;
      }
      if (other.RollbackEstimatedDtMillis != 0D) {
        RollbackEstimatedDtMillis = other.RollbackEstimatedDtMillis;
      }
      if (other.RollbackEstimatedDtNanos != 0L) {
        RollbackEstimatedDtNanos = other.RollbackEstimatedDtNanos;
      }
      if (other.RenderBufferSize != 0) {
        RenderBufferSize = other.RenderBufferSize;
      }
      if (other.CollisionMinStep != 0) {
        CollisionMinStep = other.CollisionMinStep;
      }
      if (other.BoundRoomCapacity != 0) {
        BoundRoomCapacity = other.BoundRoomCapacity;
      }
      if (other.PreallocNpcCapacity != 0) {
        PreallocNpcCapacity = other.PreallocNpcCapacity;
      }
      if (other.PreallocBulletCapacity != 0) {
        PreallocBulletCapacity = other.PreallocBulletCapacity;
      }
      if (other.battleUdpTunnel_ != null) {
        if (battleUdpTunnel_ == null) {
          BattleUdpTunnel = new global::shared.PeerUdpAddr();
        }
        BattleUdpTunnel.MergeFrom(other.BattleUdpTunnel);
      }
      if (other.FrameLogEnabled != false) {
        FrameLogEnabled = other.FrameLogEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 16: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleDurationFrames = input.ReadInt64();
            break;
          }
          case 32: {
            InputFrameUpsyncDelayTolerance = input.ReadInt32();
            break;
          }
          case 40: {
            MaxChasingRenderFramesPerUpdate = input.ReadInt32();
            break;
          }
          case 49: {
            RollbackEstimatedDtMillis = input.ReadDouble();
            break;
          }
          case 56: {
            RollbackEstimatedDtNanos = input.ReadInt64();
            break;
          }
          case 64: {
            RenderBufferSize = input.ReadInt32();
            break;
          }
          case 72: {
            CollisionMinStep = input.ReadInt32();
            break;
          }
          case 80: {
            BoundRoomCapacity = input.ReadInt32();
            break;
          }
          case 88: {
            PreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 96: {
            PreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 8194: {
            if (battleUdpTunnel_ == null) {
              BattleUdpTunnel = new global::shared.PeerUdpAddr();
            }
            input.ReadMessage(BattleUdpTunnel);
            break;
          }
          case 8200: {
            FrameLogEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StageName = input.ReadString();
            break;
          }
          case 16: {
            BoundRoomId = input.ReadInt32();
            break;
          }
          case 24: {
            BattleDurationFrames = input.ReadInt64();
            break;
          }
          case 32: {
            InputFrameUpsyncDelayTolerance = input.ReadInt32();
            break;
          }
          case 40: {
            MaxChasingRenderFramesPerUpdate = input.ReadInt32();
            break;
          }
          case 49: {
            RollbackEstimatedDtMillis = input.ReadDouble();
            break;
          }
          case 56: {
            RollbackEstimatedDtNanos = input.ReadInt64();
            break;
          }
          case 64: {
            RenderBufferSize = input.ReadInt32();
            break;
          }
          case 72: {
            CollisionMinStep = input.ReadInt32();
            break;
          }
          case 80: {
            BoundRoomCapacity = input.ReadInt32();
            break;
          }
          case 88: {
            PreallocNpcCapacity = input.ReadInt32();
            break;
          }
          case 96: {
            PreallocBulletCapacity = input.ReadInt32();
            break;
          }
          case 8194: {
            if (battleUdpTunnel_ == null) {
              BattleUdpTunnel = new global::shared.PeerUdpAddr();
            }
            input.ReadMessage(BattleUdpTunnel);
            break;
          }
          case 8200: {
            FrameLogEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomDownsyncFrame : pb::IMessage<RoomDownsyncFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomDownsyncFrame> _parser = new pb::MessageParser<RoomDownsyncFrame>(() => new RoomDownsyncFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoomDownsyncFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame(RoomDownsyncFrame other) : this() {
      id_ = other.id_;
      playersArr_ = other.playersArr_.Clone();
      countdownNanos_ = other.countdownNanos_;
      bullets_ = other.bullets_.Clone();
      npcsArr_ = other.npcsArr_.Clone();
      trapsArr_ = other.trapsArr_.Clone();
      triggersArr_ = other.triggersArr_.Clone();
      pickables_ = other.pickables_.Clone();
      backendUnconfirmedMask_ = other.backendUnconfirmedMask_;
      shouldForceResync_ = other.shouldForceResync_;
      speciesIdList_ = other.speciesIdList_.Clone();
      bulletLocalIdCounter_ = other.bulletLocalIdCounter_;
      npcLocalIdCounter_ = other.npcLocalIdCounter_;
      participantChangeId_ = other.participantChangeId_;
      pickableLocalIdCounter_ = other.pickableLocalIdCounter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoomDownsyncFrame Clone() {
      return new RoomDownsyncFrame(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "playersArr" field.</summary>
    public const int PlayersArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::shared.CharacterDownsync> _repeated_playersArr_codec
        = pb::FieldCodec.ForMessage(18, global::shared.CharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterDownsync> playersArr_ = new pbc::RepeatedField<global::shared.CharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterDownsync> PlayersArr {
      get { return playersArr_; }
    }

    /// <summary>Field number for the "countdownNanos" field.</summary>
    public const int CountdownNanosFieldNumber = 3;
    private long countdownNanos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CountdownNanos {
      get { return countdownNanos_; }
      set {
        countdownNanos_ = value;
      }
    }

    /// <summary>Field number for the "bullets" field.</summary>
    public const int BulletsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::shared.Bullet> _repeated_bullets_codec
        = pb::FieldCodec.ForMessage(34, global::shared.Bullet.Parser);
    private readonly pbc::RepeatedField<global::shared.Bullet> bullets_ = new pbc::RepeatedField<global::shared.Bullet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Bullet> Bullets {
      get { return bullets_; }
    }

    /// <summary>Field number for the "npcsArr" field.</summary>
    public const int NpcsArrFieldNumber = 5;
    private static readonly pb::FieldCodec<global::shared.CharacterDownsync> _repeated_npcsArr_codec
        = pb::FieldCodec.ForMessage(42, global::shared.CharacterDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterDownsync> npcsArr_ = new pbc::RepeatedField<global::shared.CharacterDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterDownsync> NpcsArr {
      get { return npcsArr_; }
    }

    /// <summary>Field number for the "trapsArr" field.</summary>
    public const int TrapsArrFieldNumber = 6;
    private static readonly pb::FieldCodec<global::shared.Trap> _repeated_trapsArr_codec
        = pb::FieldCodec.ForMessage(50, global::shared.Trap.Parser);
    private readonly pbc::RepeatedField<global::shared.Trap> trapsArr_ = new pbc::RepeatedField<global::shared.Trap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Trap> TrapsArr {
      get { return trapsArr_; }
    }

    /// <summary>Field number for the "triggersArr" field.</summary>
    public const int TriggersArrFieldNumber = 7;
    private static readonly pb::FieldCodec<global::shared.Trigger> _repeated_triggersArr_codec
        = pb::FieldCodec.ForMessage(58, global::shared.Trigger.Parser);
    private readonly pbc::RepeatedField<global::shared.Trigger> triggersArr_ = new pbc::RepeatedField<global::shared.Trigger>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Trigger> TriggersArr {
      get { return triggersArr_; }
    }

    /// <summary>Field number for the "pickables" field.</summary>
    public const int PickablesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::shared.Pickable> _repeated_pickables_codec
        = pb::FieldCodec.ForMessage(82, global::shared.Pickable.Parser);
    private readonly pbc::RepeatedField<global::shared.Pickable> pickables_ = new pbc::RepeatedField<global::shared.Pickable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.Pickable> Pickables {
      get { return pickables_; }
    }

    /// <summary>Field number for the "backendUnconfirmedMask" field.</summary>
    public const int BackendUnconfirmedMaskFieldNumber = 1024;
    private ulong backendUnconfirmedMask_;
    /// <summary>
    /// Indexed by "joinIndex", same compression concern as stated in InputFrameDownsync
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BackendUnconfirmedMask {
      get { return backendUnconfirmedMask_; }
      set {
        backendUnconfirmedMask_ = value;
      }
    }

    /// <summary>Field number for the "shouldForceResync" field.</summary>
    public const int ShouldForceResyncFieldNumber = 1025;
    private bool shouldForceResync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShouldForceResync {
      get { return shouldForceResync_; }
      set {
        shouldForceResync_ = value;
      }
    }

    /// <summary>Field number for the "speciesIdList" field.</summary>
    public const int SpeciesIdListFieldNumber = 1026;
    private static readonly pb::FieldCodec<int> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForInt32(8210);
    private readonly pbc::RepeatedField<int> speciesIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "bulletLocalIdCounter" field.</summary>
    public const int BulletLocalIdCounterFieldNumber = 1027;
    private int bulletLocalIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletLocalIdCounter {
      get { return bulletLocalIdCounter_; }
      set {
        bulletLocalIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "npcLocalIdCounter" field.</summary>
    public const int NpcLocalIdCounterFieldNumber = 1028;
    private int npcLocalIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NpcLocalIdCounter {
      get { return npcLocalIdCounter_; }
      set {
        npcLocalIdCounter_ = value;
      }
    }

    /// <summary>Field number for the "participantChangeId" field.</summary>
    public const int ParticipantChangeIdFieldNumber = 1029;
    private int participantChangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ParticipantChangeId {
      get { return participantChangeId_; }
      set {
        participantChangeId_ = value;
      }
    }

    /// <summary>Field number for the "pickableLocalIdCounter" field.</summary>
    public const int PickableLocalIdCounterFieldNumber = 1030;
    private int pickableLocalIdCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PickableLocalIdCounter {
      get { return pickableLocalIdCounter_; }
      set {
        pickableLocalIdCounter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoomDownsyncFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoomDownsyncFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!playersArr_.Equals(other.playersArr_)) return false;
      if (CountdownNanos != other.CountdownNanos) return false;
      if(!bullets_.Equals(other.bullets_)) return false;
      if(!npcsArr_.Equals(other.npcsArr_)) return false;
      if(!trapsArr_.Equals(other.trapsArr_)) return false;
      if(!triggersArr_.Equals(other.triggersArr_)) return false;
      if(!pickables_.Equals(other.pickables_)) return false;
      if (BackendUnconfirmedMask != other.BackendUnconfirmedMask) return false;
      if (ShouldForceResync != other.ShouldForceResync) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if (BulletLocalIdCounter != other.BulletLocalIdCounter) return false;
      if (NpcLocalIdCounter != other.NpcLocalIdCounter) return false;
      if (ParticipantChangeId != other.ParticipantChangeId) return false;
      if (PickableLocalIdCounter != other.PickableLocalIdCounter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= playersArr_.GetHashCode();
      if (CountdownNanos != 0L) hash ^= CountdownNanos.GetHashCode();
      hash ^= bullets_.GetHashCode();
      hash ^= npcsArr_.GetHashCode();
      hash ^= trapsArr_.GetHashCode();
      hash ^= triggersArr_.GetHashCode();
      hash ^= pickables_.GetHashCode();
      if (BackendUnconfirmedMask != 0UL) hash ^= BackendUnconfirmedMask.GetHashCode();
      if (ShouldForceResync != false) hash ^= ShouldForceResync.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      if (BulletLocalIdCounter != 0) hash ^= BulletLocalIdCounter.GetHashCode();
      if (NpcLocalIdCounter != 0) hash ^= NpcLocalIdCounter.GetHashCode();
      if (ParticipantChangeId != 0) hash ^= ParticipantChangeId.GetHashCode();
      if (PickableLocalIdCounter != 0) hash ^= PickableLocalIdCounter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      playersArr_.WriteTo(output, _repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CountdownNanos);
      }
      bullets_.WriteTo(output, _repeated_bullets_codec);
      npcsArr_.WriteTo(output, _repeated_npcsArr_codec);
      trapsArr_.WriteTo(output, _repeated_trapsArr_codec);
      triggersArr_.WriteTo(output, _repeated_triggersArr_codec);
      pickables_.WriteTo(output, _repeated_pickables_codec);
      if (BackendUnconfirmedMask != 0UL) {
        output.WriteRawTag(128, 64);
        output.WriteUInt64(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(ShouldForceResync);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        output.WriteRawTag(168, 64);
        output.WriteInt32(ParticipantChangeId);
      }
      if (PickableLocalIdCounter != 0) {
        output.WriteRawTag(176, 64);
        output.WriteInt32(PickableLocalIdCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      playersArr_.WriteTo(ref output, _repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CountdownNanos);
      }
      bullets_.WriteTo(ref output, _repeated_bullets_codec);
      npcsArr_.WriteTo(ref output, _repeated_npcsArr_codec);
      trapsArr_.WriteTo(ref output, _repeated_trapsArr_codec);
      triggersArr_.WriteTo(ref output, _repeated_triggersArr_codec);
      pickables_.WriteTo(ref output, _repeated_pickables_codec);
      if (BackendUnconfirmedMask != 0UL) {
        output.WriteRawTag(128, 64);
        output.WriteUInt64(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        output.WriteRawTag(136, 64);
        output.WriteBool(ShouldForceResync);
      }
      speciesIdList_.WriteTo(ref output, _repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        output.WriteRawTag(152, 64);
        output.WriteInt32(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        output.WriteRawTag(160, 64);
        output.WriteInt32(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        output.WriteRawTag(168, 64);
        output.WriteInt32(ParticipantChangeId);
      }
      if (PickableLocalIdCounter != 0) {
        output.WriteRawTag(176, 64);
        output.WriteInt32(PickableLocalIdCounter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += playersArr_.CalculateSize(_repeated_playersArr_codec);
      if (CountdownNanos != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountdownNanos);
      }
      size += bullets_.CalculateSize(_repeated_bullets_codec);
      size += npcsArr_.CalculateSize(_repeated_npcsArr_codec);
      size += trapsArr_.CalculateSize(_repeated_trapsArr_codec);
      size += triggersArr_.CalculateSize(_repeated_triggersArr_codec);
      size += pickables_.CalculateSize(_repeated_pickables_codec);
      if (BackendUnconfirmedMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BackendUnconfirmedMask);
      }
      if (ShouldForceResync != false) {
        size += 2 + 1;
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      if (BulletLocalIdCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletLocalIdCounter);
      }
      if (NpcLocalIdCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NpcLocalIdCounter);
      }
      if (ParticipantChangeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ParticipantChangeId);
      }
      if (PickableLocalIdCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickableLocalIdCounter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoomDownsyncFrame other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      playersArr_.Add(other.playersArr_);
      if (other.CountdownNanos != 0L) {
        CountdownNanos = other.CountdownNanos;
      }
      bullets_.Add(other.bullets_);
      npcsArr_.Add(other.npcsArr_);
      trapsArr_.Add(other.trapsArr_);
      triggersArr_.Add(other.triggersArr_);
      pickables_.Add(other.pickables_);
      if (other.BackendUnconfirmedMask != 0UL) {
        BackendUnconfirmedMask = other.BackendUnconfirmedMask;
      }
      if (other.ShouldForceResync != false) {
        ShouldForceResync = other.ShouldForceResync;
      }
      speciesIdList_.Add(other.speciesIdList_);
      if (other.BulletLocalIdCounter != 0) {
        BulletLocalIdCounter = other.BulletLocalIdCounter;
      }
      if (other.NpcLocalIdCounter != 0) {
        NpcLocalIdCounter = other.NpcLocalIdCounter;
      }
      if (other.ParticipantChangeId != 0) {
        ParticipantChangeId = other.ParticipantChangeId;
      }
      if (other.PickableLocalIdCounter != 0) {
        PickableLocalIdCounter = other.PickableLocalIdCounter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            playersArr_.AddEntriesFrom(input, _repeated_playersArr_codec);
            break;
          }
          case 24: {
            CountdownNanos = input.ReadInt64();
            break;
          }
          case 34: {
            bullets_.AddEntriesFrom(input, _repeated_bullets_codec);
            break;
          }
          case 42: {
            npcsArr_.AddEntriesFrom(input, _repeated_npcsArr_codec);
            break;
          }
          case 50: {
            trapsArr_.AddEntriesFrom(input, _repeated_trapsArr_codec);
            break;
          }
          case 58: {
            triggersArr_.AddEntriesFrom(input, _repeated_triggersArr_codec);
            break;
          }
          case 82: {
            pickables_.AddEntriesFrom(input, _repeated_pickables_codec);
            break;
          }
          case 8192: {
            BackendUnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 8200: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 8210:
          case 8208: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 8216: {
            BulletLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8224: {
            NpcLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8232: {
            ParticipantChangeId = input.ReadInt32();
            break;
          }
          case 8240: {
            PickableLocalIdCounter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            playersArr_.AddEntriesFrom(ref input, _repeated_playersArr_codec);
            break;
          }
          case 24: {
            CountdownNanos = input.ReadInt64();
            break;
          }
          case 34: {
            bullets_.AddEntriesFrom(ref input, _repeated_bullets_codec);
            break;
          }
          case 42: {
            npcsArr_.AddEntriesFrom(ref input, _repeated_npcsArr_codec);
            break;
          }
          case 50: {
            trapsArr_.AddEntriesFrom(ref input, _repeated_trapsArr_codec);
            break;
          }
          case 58: {
            triggersArr_.AddEntriesFrom(ref input, _repeated_triggersArr_codec);
            break;
          }
          case 82: {
            pickables_.AddEntriesFrom(ref input, _repeated_pickables_codec);
            break;
          }
          case 8192: {
            BackendUnconfirmedMask = input.ReadUInt64();
            break;
          }
          case 8200: {
            ShouldForceResync = input.ReadBool();
            break;
          }
          case 8210:
          case 8208: {
            speciesIdList_.AddEntriesFrom(ref input, _repeated_speciesIdList_codec);
            break;
          }
          case 8216: {
            BulletLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8224: {
            NpcLocalIdCounter = input.ReadInt32();
            break;
          }
          case 8232: {
            ParticipantChangeId = input.ReadInt32();
            break;
          }
          case 8240: {
            PickableLocalIdCounter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WsResp : pb::IMessage<WsResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WsResp> _parser = new pb::MessageParser<WsResp>(() => new WsResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp(WsResp other) : this() {
      ret_ = other.ret_;
      act_ = other.act_;
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      inputFrameDownsyncBatch_ = other.inputFrameDownsyncBatch_.Clone();
      bciFrame_ = other.bciFrame_ != null ? other.bciFrame_.Clone() : null;
      peerJoinIndex_ = other.peerJoinIndex_;
      peerUdpAddrList_ = other.peerUdpAddrList_.Clone();
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WsResp Clone() {
      return new WsResp(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 3;
    private global::shared.RoomDownsyncFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.RoomDownsyncFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "inputFrameDownsyncBatch" field.</summary>
    public const int InputFrameDownsyncBatchFieldNumber = 4;
    private static readonly pb::FieldCodec<global::shared.InputFrameDownsync> _repeated_inputFrameDownsyncBatch_codec
        = pb::FieldCodec.ForMessage(34, global::shared.InputFrameDownsync.Parser);
    private readonly pbc::RepeatedField<global::shared.InputFrameDownsync> inputFrameDownsyncBatch_ = new pbc::RepeatedField<global::shared.InputFrameDownsync>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InputFrameDownsync> InputFrameDownsyncBatch {
      get { return inputFrameDownsyncBatch_; }
    }

    /// <summary>Field number for the "bciFrame" field.</summary>
    public const int BciFrameFieldNumber = 5;
    private global::shared.BattleColliderInfo bciFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BattleColliderInfo BciFrame {
      get { return bciFrame_; }
      set {
        bciFrame_ = value;
      }
    }

    /// <summary>Field number for the "peerJoinIndex" field.</summary>
    public const int PeerJoinIndexFieldNumber = 6;
    private int peerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PeerJoinIndex {
      get { return peerJoinIndex_; }
      set {
        peerJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "peerUdpAddrList" field.</summary>
    public const int PeerUdpAddrListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::shared.PeerUdpAddr> _repeated_peerUdpAddrList_codec
        = pb::FieldCodec.ForMessage(58, global::shared.PeerUdpAddr.Parser);
    private readonly pbc::RepeatedField<global::shared.PeerUdpAddr> peerUdpAddrList_ = new pbc::RepeatedField<global::shared.PeerUdpAddr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.PeerUdpAddr> PeerUdpAddrList {
      get { return peerUdpAddrList_; }
    }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2048;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Act != other.Act) return false;
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if(!inputFrameDownsyncBatch_.Equals(other.inputFrameDownsyncBatch_)) return false;
      if (!object.Equals(BciFrame, other.BciFrame)) return false;
      if (PeerJoinIndex != other.PeerJoinIndex) return false;
      if(!peerUdpAddrList_.Equals(other.peerUdpAddrList_)) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      hash ^= inputFrameDownsyncBatch_.GetHashCode();
      if (bciFrame_ != null) hash ^= BciFrame.GetHashCode();
      if (PeerJoinIndex != 0) hash ^= PeerJoinIndex.GetHashCode();
      hash ^= peerUdpAddrList_.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (rdf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rdf);
      }
      inputFrameDownsyncBatch_.WriteTo(output, _repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PeerJoinIndex);
      }
      peerUdpAddrList_.WriteTo(output, _repeated_peerUdpAddrList_codec);
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (rdf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rdf);
      }
      inputFrameDownsyncBatch_.WriteTo(ref output, _repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PeerJoinIndex);
      }
      peerUdpAddrList_.WriteTo(ref output, _repeated_peerUdpAddrList_codec);
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(130, 128, 1);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      size += inputFrameDownsyncBatch_.CalculateSize(_repeated_inputFrameDownsyncBatch_codec);
      if (bciFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BciFrame);
      }
      if (PeerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PeerJoinIndex);
      }
      size += peerUdpAddrList_.CalculateSize(_repeated_peerUdpAddrList_codec);
      if (ErrMsg.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WsResp other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::shared.RoomDownsyncFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      inputFrameDownsyncBatch_.Add(other.inputFrameDownsyncBatch_);
      if (other.bciFrame_ != null) {
        if (bciFrame_ == null) {
          BciFrame = new global::shared.BattleColliderInfo();
        }
        BciFrame.MergeFrom(other.BciFrame);
      }
      if (other.PeerJoinIndex != 0) {
        PeerJoinIndex = other.PeerJoinIndex;
      }
      peerUdpAddrList_.Add(other.peerUdpAddrList_);
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 26: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 34: {
            inputFrameDownsyncBatch_.AddEntriesFrom(input, _repeated_inputFrameDownsyncBatch_codec);
            break;
          }
          case 42: {
            if (bciFrame_ == null) {
              BciFrame = new global::shared.BattleColliderInfo();
            }
            input.ReadMessage(BciFrame);
            break;
          }
          case 48: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
          case 58: {
            peerUdpAddrList_.AddEntriesFrom(input, _repeated_peerUdpAddrList_codec);
            break;
          }
          case 16386: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
          case 26: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 34: {
            inputFrameDownsyncBatch_.AddEntriesFrom(ref input, _repeated_inputFrameDownsyncBatch_codec);
            break;
          }
          case 42: {
            if (bciFrame_ == null) {
              BciFrame = new global::shared.BattleColliderInfo();
            }
            input.ReadMessage(BciFrame);
            break;
          }
          case 48: {
            PeerJoinIndex = input.ReadInt32();
            break;
          }
          case 58: {
            peerUdpAddrList_.AddEntriesFrom(ref input, _repeated_peerUdpAddrList_codec);
            break;
          }
          case 16386: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Skill : pb::IMessage<Skill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill(Skill other) : this() {
      battleLocalId_ = other.battleLocalId_;
      recoveryFrames_ = other.recoveryFrames_;
      recoveryFramesOnBlock_ = other.recoveryFramesOnBlock_;
      recoveryFramesOnHit_ = other.recoveryFramesOnHit_;
      triggerType_ = other.triggerType_;
      boundChState_ = other.boundChState_;
      boundChStateOnHit_ = other.boundChStateOnHit_;
      mpDelta_ = other.mpDelta_;
      id_ = other.id_;
      hits_ = other.hits_.Clone();
      selfNonStockBuff_ = other.selfNonStockBuff_ != null ? other.selfNonStockBuff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "battleLocalId" field.</summary>
    public const int BattleLocalIdFieldNumber = 1;
    private int battleLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BattleLocalId {
      get { return battleLocalId_; }
      set {
        battleLocalId_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFrames" field.</summary>
    public const int RecoveryFramesFieldNumber = 2;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFramesOnBlock" field.</summary>
    public const int RecoveryFramesOnBlockFieldNumber = 3;
    private int recoveryFramesOnBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFramesOnBlock {
      get { return recoveryFramesOnBlock_; }
      set {
        recoveryFramesOnBlock_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFramesOnHit" field.</summary>
    public const int RecoveryFramesOnHitFieldNumber = 4;
    private int recoveryFramesOnHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFramesOnHit {
      get { return recoveryFramesOnHit_; }
      set {
        recoveryFramesOnHit_ = value;
      }
    }

    /// <summary>Field number for the "triggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 5;
    private global::shared.SkillTriggerType triggerType_ = global::shared.SkillTriggerType.RisingEdge;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SkillTriggerType TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "boundChState" field.</summary>
    public const int BoundChStateFieldNumber = 6;
    private global::shared.CharacterState boundChState_ = global::shared.CharacterState.Idle1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.CharacterState BoundChState {
      get { return boundChState_; }
      set {
        boundChState_ = value;
      }
    }

    /// <summary>Field number for the "boundChStateOnHit" field.</summary>
    public const int BoundChStateOnHitFieldNumber = 7;
    private global::shared.CharacterState boundChStateOnHit_ = global::shared.CharacterState.Idle1;
    /// <summary>
    /// [WARNING] Only applicable to Melee. When transitting from "boundChState" to "boundChStateOnHit", keep "framesInChState" but "framesToRecover += (recoveryFramesOnHit - recoveryFrames)".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.CharacterState BoundChStateOnHit {
      get { return boundChStateOnHit_; }
      set {
        boundChStateOnHit_ = value;
      }
    }

    /// <summary>Field number for the "mpDelta" field.</summary>
    public const int MpDeltaFieldNumber = 8;
    private int mpDelta_;
    /// <summary>
    /// Usually used as "mp consumption"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MpDelta {
      get { return mpDelta_; }
      set {
        mpDelta_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 9;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 1024;
    private static readonly pb::FieldCodec<global::shared.BulletConfig> _repeated_hits_codec
        = pb::FieldCodec.ForMessage(8194, global::shared.BulletConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.BulletConfig> hits_ = new pbc::RepeatedField<global::shared.BulletConfig>();
    /// <summary>
    /// Hits within a "Skill" are automatically triggered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.BulletConfig> Hits {
      get { return hits_; }
    }

    /// <summary>Field number for the "selfNonStockBuff" field.</summary>
    public const int SelfNonStockBuffFieldNumber = 1025;
    private global::shared.BuffConfig selfNonStockBuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffConfig SelfNonStockBuff {
      get { return selfNonStockBuff_; }
      set {
        selfNonStockBuff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleLocalId != other.BattleLocalId) return false;
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if (RecoveryFramesOnBlock != other.RecoveryFramesOnBlock) return false;
      if (RecoveryFramesOnHit != other.RecoveryFramesOnHit) return false;
      if (TriggerType != other.TriggerType) return false;
      if (BoundChState != other.BoundChState) return false;
      if (BoundChStateOnHit != other.BoundChStateOnHit) return false;
      if (MpDelta != other.MpDelta) return false;
      if (Id != other.Id) return false;
      if(!hits_.Equals(other.hits_)) return false;
      if (!object.Equals(SelfNonStockBuff, other.SelfNonStockBuff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleLocalId != 0) hash ^= BattleLocalId.GetHashCode();
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      if (RecoveryFramesOnBlock != 0) hash ^= RecoveryFramesOnBlock.GetHashCode();
      if (RecoveryFramesOnHit != 0) hash ^= RecoveryFramesOnHit.GetHashCode();
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) hash ^= TriggerType.GetHashCode();
      if (BoundChState != global::shared.CharacterState.Idle1) hash ^= BoundChState.GetHashCode();
      if (BoundChStateOnHit != global::shared.CharacterState.Idle1) hash ^= BoundChStateOnHit.GetHashCode();
      if (MpDelta != 0) hash ^= MpDelta.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= hits_.GetHashCode();
      if (selfNonStockBuff_ != null) hash ^= SelfNonStockBuff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BattleLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BoundChState);
      }
      if (BoundChStateOnHit != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BoundChStateOnHit);
      }
      if (MpDelta != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MpDelta);
      }
      if (Id != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Id);
      }
      hits_.WriteTo(output, _repeated_hits_codec);
      if (selfNonStockBuff_ != null) {
        output.WriteRawTag(138, 64);
        output.WriteMessage(SelfNonStockBuff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BattleLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        output.WriteRawTag(40);
        output.WriteEnum((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BoundChState);
      }
      if (BoundChStateOnHit != global::shared.CharacterState.Idle1) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BoundChStateOnHit);
      }
      if (MpDelta != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MpDelta);
      }
      if (Id != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Id);
      }
      hits_.WriteTo(ref output, _repeated_hits_codec);
      if (selfNonStockBuff_ != null) {
        output.WriteRawTag(138, 64);
        output.WriteMessage(SelfNonStockBuff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BattleLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleLocalId);
      }
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      if (RecoveryFramesOnBlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnBlock);
      }
      if (RecoveryFramesOnHit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFramesOnHit);
      }
      if (TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerType);
      }
      if (BoundChState != global::shared.CharacterState.Idle1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoundChState);
      }
      if (BoundChStateOnHit != global::shared.CharacterState.Idle1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BoundChStateOnHit);
      }
      if (MpDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpDelta);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += hits_.CalculateSize(_repeated_hits_codec);
      if (selfNonStockBuff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfNonStockBuff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.BattleLocalId != 0) {
        BattleLocalId = other.BattleLocalId;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      if (other.RecoveryFramesOnBlock != 0) {
        RecoveryFramesOnBlock = other.RecoveryFramesOnBlock;
      }
      if (other.RecoveryFramesOnHit != 0) {
        RecoveryFramesOnHit = other.RecoveryFramesOnHit;
      }
      if (other.TriggerType != global::shared.SkillTriggerType.RisingEdge) {
        TriggerType = other.TriggerType;
      }
      if (other.BoundChState != global::shared.CharacterState.Idle1) {
        BoundChState = other.BoundChState;
      }
      if (other.BoundChStateOnHit != global::shared.CharacterState.Idle1) {
        BoundChStateOnHit = other.BoundChStateOnHit;
      }
      if (other.MpDelta != 0) {
        MpDelta = other.MpDelta;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      hits_.Add(other.hits_);
      if (other.selfNonStockBuff_ != null) {
        if (selfNonStockBuff_ == null) {
          SelfNonStockBuff = new global::shared.BuffConfig();
        }
        SelfNonStockBuff.MergeFrom(other.SelfNonStockBuff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFramesOnBlock = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFramesOnHit = input.ReadInt32();
            break;
          }
          case 40: {
            TriggerType = (global::shared.SkillTriggerType) input.ReadEnum();
            break;
          }
          case 48: {
            BoundChState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 56: {
            BoundChStateOnHit = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 64: {
            MpDelta = input.ReadInt32();
            break;
          }
          case 72: {
            Id = input.ReadUInt32();
            break;
          }
          case 8194: {
            hits_.AddEntriesFrom(input, _repeated_hits_codec);
            break;
          }
          case 8202: {
            if (selfNonStockBuff_ == null) {
              SelfNonStockBuff = new global::shared.BuffConfig();
            }
            input.ReadMessage(SelfNonStockBuff);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BattleLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 24: {
            RecoveryFramesOnBlock = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFramesOnHit = input.ReadInt32();
            break;
          }
          case 40: {
            TriggerType = (global::shared.SkillTriggerType) input.ReadEnum();
            break;
          }
          case 48: {
            BoundChState = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 56: {
            BoundChStateOnHit = (global::shared.CharacterState) input.ReadEnum();
            break;
          }
          case 64: {
            MpDelta = input.ReadInt32();
            break;
          }
          case 72: {
            Id = input.ReadUInt32();
            break;
          }
          case 8194: {
            hits_.AddEntriesFrom(ref input, _repeated_hits_codec);
            break;
          }
          case 8202: {
            if (selfNonStockBuff_ == null) {
              SelfNonStockBuff = new global::shared.BuffConfig();
            }
            input.ReadMessage(SelfNonStockBuff);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FrameLog : pb::IMessage<FrameLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameLog> _parser = new pb::MessageParser<FrameLog>(() => new FrameLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog(FrameLog other) : this() {
      rdf_ = other.rdf_ != null ? other.rdf_.Clone() : null;
      actuallyUsedIdf_ = other.actuallyUsedIdf_ != null ? other.actuallyUsedIdf_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameLog Clone() {
      return new FrameLog(this);
    }

    /// <summary>Field number for the "rdf" field.</summary>
    public const int RdfFieldNumber = 1;
    private global::shared.RoomDownsyncFrame rdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.RoomDownsyncFrame Rdf {
      get { return rdf_; }
      set {
        rdf_ = value;
      }
    }

    /// <summary>Field number for the "actuallyUsedIdf" field.</summary>
    public const int ActuallyUsedIdfFieldNumber = 2;
    private global::shared.InputFrameDownsync actuallyUsedIdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.InputFrameDownsync ActuallyUsedIdf {
      get { return actuallyUsedIdf_; }
      set {
        actuallyUsedIdf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rdf, other.Rdf)) return false;
      if (!object.Equals(ActuallyUsedIdf, other.ActuallyUsedIdf)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (rdf_ != null) hash ^= Rdf.GetHashCode();
      if (actuallyUsedIdf_ != null) hash ^= ActuallyUsedIdf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rdf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rdf_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (rdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rdf);
      }
      if (actuallyUsedIdf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActuallyUsedIdf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameLog other) {
      if (other == null) {
        return;
      }
      if (other.rdf_ != null) {
        if (rdf_ == null) {
          Rdf = new global::shared.RoomDownsyncFrame();
        }
        Rdf.MergeFrom(other.Rdf);
      }
      if (other.actuallyUsedIdf_ != null) {
        if (actuallyUsedIdf_ == null) {
          ActuallyUsedIdf = new global::shared.InputFrameDownsync();
        }
        ActuallyUsedIdf.MergeFrom(other.ActuallyUsedIdf);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 18: {
            if (actuallyUsedIdf_ == null) {
              ActuallyUsedIdf = new global::shared.InputFrameDownsync();
            }
            input.ReadMessage(ActuallyUsedIdf);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rdf_ == null) {
              Rdf = new global::shared.RoomDownsyncFrame();
            }
            input.ReadMessage(Rdf);
            break;
          }
          case 18: {
            if (actuallyUsedIdf_ == null) {
              ActuallyUsedIdf = new global::shared.InputFrameDownsync();
            }
            input.ReadMessage(ActuallyUsedIdf);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleResult : pb::IMessage<BattleResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleResult> _parser = new pb::MessageParser<BattleResult>(() => new BattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult(BattleResult other) : this() {
      winnerJoinIndex_ = other.winnerJoinIndex_;
      winnerBulletTeamId_ = other.winnerBulletTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleResult Clone() {
      return new BattleResult(this);
    }

    /// <summary>Field number for the "winnerJoinIndex" field.</summary>
    public const int WinnerJoinIndexFieldNumber = 1;
    private int winnerJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinnerJoinIndex {
      get { return winnerJoinIndex_; }
      set {
        winnerJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "winnerBulletTeamId" field.</summary>
    public const int WinnerBulletTeamIdFieldNumber = 2;
    private int winnerBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinnerBulletTeamId {
      get { return winnerBulletTeamId_; }
      set {
        winnerBulletTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinnerJoinIndex != other.WinnerJoinIndex) return false;
      if (WinnerBulletTeamId != other.WinnerBulletTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (WinnerJoinIndex != 0) hash ^= WinnerJoinIndex.GetHashCode();
      if (WinnerBulletTeamId != 0) hash ^= WinnerBulletTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinnerJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinnerJoinIndex);
      }
      if (WinnerBulletTeamId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinnerJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinnerJoinIndex);
      }
      if (WinnerBulletTeamId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (WinnerJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerJoinIndex);
      }
      if (WinnerBulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerBulletTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleResult other) {
      if (other == null) {
        return;
      }
      if (other.WinnerJoinIndex != 0) {
        WinnerJoinIndex = other.WinnerJoinIndex;
      }
      if (other.WinnerBulletTeamId != 0) {
        WinnerBulletTeamId = other.WinnerBulletTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinnerJoinIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WinnerBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinnerJoinIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WinnerBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DebuffConfig : pb::IMessage<DebuffConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebuffConfig> _parser = new pb::MessageParser<DebuffConfig>(() => new DebuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DebuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig(DebuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      type_ = other.type_;
      arrIdx_ = other.arrIdx_;
      impactPerInterval_ = other.impactPerInterval_;
      impactInterval_ = other.impactInterval_;
      frictionVelX_ = other.frictionVelX_;
      frictionVelY_ = other.frictionVelY_;
      frictionAccX_ = other.frictionAccX_;
      frictionAccY_ = other.frictionAccY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DebuffConfig Clone() {
      return new DebuffConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::shared.BuffStockType stockType_ = global::shared.BuffStockType.NoneBf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::shared.DebuffType type_ = global::shared.DebuffType.NoneDbf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.DebuffType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "arrIdx" field.</summary>
    public const int ArrIdxFieldNumber = 5;
    private int arrIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ArrIdx {
      get { return arrIdx_; }
      set {
        arrIdx_ = value;
      }
    }

    /// <summary>Field number for the "impactPerInterval" field.</summary>
    public const int ImpactPerIntervalFieldNumber = 6;
    private int impactPerInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImpactPerInterval {
      get { return impactPerInterval_; }
      set {
        impactPerInterval_ = value;
      }
    }

    /// <summary>Field number for the "impactInterval" field.</summary>
    public const int ImpactIntervalFieldNumber = 7;
    private int impactInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ImpactInterval {
      get { return impactInterval_; }
      set {
        impactInterval_ = value;
      }
    }

    /// <summary>Field number for the "frictionVelX" field.</summary>
    public const int FrictionVelXFieldNumber = 8;
    private int frictionVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionVelX {
      get { return frictionVelX_; }
      set {
        frictionVelX_ = value;
      }
    }

    /// <summary>Field number for the "frictionVelY" field.</summary>
    public const int FrictionVelYFieldNumber = 9;
    private int frictionVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionVelY {
      get { return frictionVelY_; }
      set {
        frictionVelY_ = value;
      }
    }

    /// <summary>Field number for the "frictionAccX" field.</summary>
    public const int FrictionAccXFieldNumber = 10;
    private int frictionAccX_;
    /// <summary>
    /// "Acc" here means "acceleration"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionAccX {
      get { return frictionAccX_; }
      set {
        frictionAccX_ = value;
      }
    }

    /// <summary>Field number for the "frictionAccY" field.</summary>
    public const int FrictionAccYFieldNumber = 11;
    private int frictionAccY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrictionAccY {
      get { return frictionAccY_; }
      set {
        frictionAccY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DebuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DebuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (Type != other.Type) return false;
      if (ArrIdx != other.ArrIdx) return false;
      if (ImpactPerInterval != other.ImpactPerInterval) return false;
      if (ImpactInterval != other.ImpactInterval) return false;
      if (FrictionVelX != other.FrictionVelX) return false;
      if (FrictionVelY != other.FrictionVelY) return false;
      if (FrictionAccX != other.FrictionAccX) return false;
      if (FrictionAccY != other.FrictionAccY) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != global::shared.BuffStockType.NoneBf) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (Type != global::shared.DebuffType.NoneDbf) hash ^= Type.GetHashCode();
      if (ArrIdx != 0) hash ^= ArrIdx.GetHashCode();
      if (ImpactPerInterval != 0) hash ^= ImpactPerInterval.GetHashCode();
      if (ImpactInterval != 0) hash ^= ImpactInterval.GetHashCode();
      if (FrictionVelX != 0) hash ^= FrictionVelX.GetHashCode();
      if (FrictionVelY != 0) hash ^= FrictionVelY.GetHashCode();
      if (FrictionAccX != 0) hash ^= FrictionAccX.GetHashCode();
      if (FrictionAccY != 0) hash ^= FrictionAccY.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ArrIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArrIdx);
      }
      if (ImpactPerInterval != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImpactPerInterval);
      }
      if (ImpactInterval != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImpactInterval);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FrictionVelX);
      }
      if (FrictionVelY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrictionVelY);
      }
      if (FrictionAccX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FrictionAccX);
      }
      if (FrictionAccY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FrictionAccY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ArrIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ArrIdx);
      }
      if (ImpactPerInterval != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ImpactPerInterval);
      }
      if (ImpactInterval != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ImpactInterval);
      }
      if (FrictionVelX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FrictionVelX);
      }
      if (FrictionVelY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FrictionVelY);
      }
      if (FrictionAccX != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FrictionAccX);
      }
      if (FrictionAccY != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FrictionAccY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (Type != global::shared.DebuffType.NoneDbf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ArrIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArrIdx);
      }
      if (ImpactPerInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactPerInterval);
      }
      if (ImpactInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactInterval);
      }
      if (FrictionVelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelX);
      }
      if (FrictionVelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionVelY);
      }
      if (FrictionAccX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionAccX);
      }
      if (FrictionAccY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrictionAccY);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DebuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != global::shared.BuffStockType.NoneBf) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.Type != global::shared.DebuffType.NoneDbf) {
        Type = other.Type;
      }
      if (other.ArrIdx != 0) {
        ArrIdx = other.ArrIdx;
      }
      if (other.ImpactPerInterval != 0) {
        ImpactPerInterval = other.ImpactPerInterval;
      }
      if (other.ImpactInterval != 0) {
        ImpactInterval = other.ImpactInterval;
      }
      if (other.FrictionVelX != 0) {
        FrictionVelX = other.FrictionVelX;
      }
      if (other.FrictionVelY != 0) {
        FrictionVelY = other.FrictionVelY;
      }
      if (other.FrictionAccX != 0) {
        FrictionAccX = other.FrictionAccX;
      }
      if (other.FrictionAccY != 0) {
        FrictionAccY = other.FrictionAccY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            Type = (global::shared.DebuffType) input.ReadEnum();
            break;
          }
          case 40: {
            ArrIdx = input.ReadInt32();
            break;
          }
          case 48: {
            ImpactPerInterval = input.ReadInt32();
            break;
          }
          case 56: {
            ImpactInterval = input.ReadInt32();
            break;
          }
          case 64: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 72: {
            FrictionVelY = input.ReadInt32();
            break;
          }
          case 80: {
            FrictionAccX = input.ReadInt32();
            break;
          }
          case 88: {
            FrictionAccY = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            Type = (global::shared.DebuffType) input.ReadEnum();
            break;
          }
          case 40: {
            ArrIdx = input.ReadInt32();
            break;
          }
          case 48: {
            ImpactPerInterval = input.ReadInt32();
            break;
          }
          case 56: {
            ImpactInterval = input.ReadInt32();
            break;
          }
          case 64: {
            FrictionVelX = input.ReadInt32();
            break;
          }
          case 72: {
            FrictionVelY = input.ReadInt32();
            break;
          }
          case 80: {
            FrictionAccX = input.ReadInt32();
            break;
          }
          case 88: {
            FrictionAccY = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuffConfig : pb::IMessage<BuffConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuffConfig> _parser = new pb::MessageParser<BuffConfig>(() => new BuffConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BuffConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig(BuffConfig other) : this() {
      speciesId_ = other.speciesId_;
      stockType_ = other.stockType_;
      stock_ = other.stock_;
      speedDelta_ = other.speedDelta_;
      hitboxSizeXDelta_ = other.hitboxSizeXDelta_;
      hitboxSizeYDelta_ = other.hitboxSizeYDelta_;
      damageDelta_ = other.damageDelta_;
      damageDeltaByPercentage_ = other.damageDeltaByPercentage_;
      characterHardnessDelta_ = other.characterHardnessDelta_;
      meleeHardnessDelta_ = other.meleeHardnessDelta_;
      fireballHardnessDelta_ = other.fireballHardnessDelta_;
      invinsible_ = other.invinsible_;
      xformChSpeciesId_ = other.xformChSpeciesId_;
      repelSoftPushback_ = other.repelSoftPushback_;
      omitGravity_ = other.omitGravity_;
      autoDef1_ = other.autoDef1_;
      associatedDebuffs_ = other.associatedDebuffs_.Clone();
      characterVfxSpeciesId_ = other.characterVfxSpeciesId_;
      isPixelatedVfxOnCharacter_ = other.isPixelatedVfxOnCharacter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BuffConfig Clone() {
      return new BuffConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 2;
    private global::shared.BuffStockType stockType_ = global::shared.BuffStockType.NoneBf;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.BuffStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 3;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "speedDelta" field.</summary>
    public const int SpeedDeltaFieldNumber = 4;
    private int speedDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeedDelta {
      get { return speedDelta_; }
      set {
        speedDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeXDelta" field.</summary>
    public const int HitboxSizeXDeltaFieldNumber = 5;
    private int hitboxSizeXDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeXDelta {
      get { return hitboxSizeXDelta_; }
      set {
        hitboxSizeXDelta_ = value;
      }
    }

    /// <summary>Field number for the "hitboxSizeYDelta" field.</summary>
    public const int HitboxSizeYDeltaFieldNumber = 6;
    private int hitboxSizeYDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitboxSizeYDelta {
      get { return hitboxSizeYDelta_; }
      set {
        hitboxSizeYDelta_ = value;
      }
    }

    /// <summary>Field number for the "damageDelta" field.</summary>
    public const int DamageDeltaFieldNumber = 7;
    private int damageDelta_;
    /// <summary>
    /// 
    ///It's not trivial to handle damage after the following sequence
    ///1. Pick up damageDelta=+10 for 600 frames
    ///2. Pick up damageDeltaByPercentage=+10% for 600 frames
    ///3. Buff "damageDelta=+10" expires 
    ///4. Buff "damageDeltaByPercentage=+10%" expires
    ///
    ///Pick a deterministic way :)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageDelta {
      get { return damageDelta_; }
      set {
        damageDelta_ = value;
      }
    }

    /// <summary>Field number for the "damageDeltaByPercentage" field.</summary>
    public const int DamageDeltaByPercentageFieldNumber = 8;
    private int damageDeltaByPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageDeltaByPercentage {
      get { return damageDeltaByPercentage_; }
      set {
        damageDeltaByPercentage_ = value;
      }
    }

    /// <summary>Field number for the "characterHardnessDelta" field.</summary>
    public const int CharacterHardnessDeltaFieldNumber = 9;
    private int characterHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharacterHardnessDelta {
      get { return characterHardnessDelta_; }
      set {
        characterHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "meleeHardnessDelta" field.</summary>
    public const int MeleeHardnessDeltaFieldNumber = 10;
    private int meleeHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MeleeHardnessDelta {
      get { return meleeHardnessDelta_; }
      set {
        meleeHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "fireballHardnessDelta" field.</summary>
    public const int FireballHardnessDeltaFieldNumber = 11;
    private int fireballHardnessDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FireballHardnessDelta {
      get { return fireballHardnessDelta_; }
      set {
        fireballHardnessDelta_ = value;
      }
    }

    /// <summary>Field number for the "invinsible" field.</summary>
    public const int InvinsibleFieldNumber = 12;
    private bool invinsible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Invinsible {
      get { return invinsible_; }
      set {
        invinsible_ = value;
      }
    }

    /// <summary>Field number for the "xformChSpeciesId" field.</summary>
    public const int XformChSpeciesIdFieldNumber = 13;
    private uint xformChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint XformChSpeciesId {
      get { return xformChSpeciesId_; }
      set {
        xformChSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "repelSoftPushback" field.</summary>
    public const int RepelSoftPushbackFieldNumber = 14;
    private bool repelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RepelSoftPushback {
      get { return repelSoftPushback_; }
      set {
        repelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "omitGravity" field.</summary>
    public const int OmitGravityFieldNumber = 15;
    private bool omitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OmitGravity {
      get { return omitGravity_; }
      set {
        omitGravity_ = value;
      }
    }

    /// <summary>Field number for the "autoDef1" field.</summary>
    public const int AutoDef1FieldNumber = 16;
    private bool autoDef1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AutoDef1 {
      get { return autoDef1_; }
      set {
        autoDef1_ = value;
      }
    }

    /// <summary>Field number for the "associatedDebuffs" field.</summary>
    public const int AssociatedDebuffsFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_associatedDebuffs_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> associatedDebuffs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// [WARNING] The following field previously had type "repeated DebuffConfig" and the reason given was "to reduce the count of heap-RAM access when stepping battle dynamics", it was not a bad reason yet such complicated type imposed a heavy burden on serialization/deserialization of "RoomDownsyncFrame" which would be used frequently when we use "backend forceResync" for "active slow ticker" or "recovery upon reconnection". See "ConcerningEdgeCases.md" for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AssociatedDebuffs {
      get { return associatedDebuffs_; }
    }

    /// <summary>Field number for the "characterVfxSpeciesId" field.</summary>
    public const int CharacterVfxSpeciesIdFieldNumber = 18;
    private int characterVfxSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharacterVfxSpeciesId {
      get { return characterVfxSpeciesId_; }
      set {
        characterVfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "isPixelatedVfxOnCharacter" field.</summary>
    public const int IsPixelatedVfxOnCharacterFieldNumber = 19;
    private bool isPixelatedVfxOnCharacter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPixelatedVfxOnCharacter {
      get { return isPixelatedVfxOnCharacter_; }
      set {
        isPixelatedVfxOnCharacter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BuffConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BuffConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (StockType != other.StockType) return false;
      if (Stock != other.Stock) return false;
      if (SpeedDelta != other.SpeedDelta) return false;
      if (HitboxSizeXDelta != other.HitboxSizeXDelta) return false;
      if (HitboxSizeYDelta != other.HitboxSizeYDelta) return false;
      if (DamageDelta != other.DamageDelta) return false;
      if (DamageDeltaByPercentage != other.DamageDeltaByPercentage) return false;
      if (CharacterHardnessDelta != other.CharacterHardnessDelta) return false;
      if (MeleeHardnessDelta != other.MeleeHardnessDelta) return false;
      if (FireballHardnessDelta != other.FireballHardnessDelta) return false;
      if (Invinsible != other.Invinsible) return false;
      if (XformChSpeciesId != other.XformChSpeciesId) return false;
      if (RepelSoftPushback != other.RepelSoftPushback) return false;
      if (OmitGravity != other.OmitGravity) return false;
      if (AutoDef1 != other.AutoDef1) return false;
      if(!associatedDebuffs_.Equals(other.associatedDebuffs_)) return false;
      if (CharacterVfxSpeciesId != other.CharacterVfxSpeciesId) return false;
      if (IsPixelatedVfxOnCharacter != other.IsPixelatedVfxOnCharacter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (StockType != global::shared.BuffStockType.NoneBf) hash ^= StockType.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (SpeedDelta != 0) hash ^= SpeedDelta.GetHashCode();
      if (HitboxSizeXDelta != 0) hash ^= HitboxSizeXDelta.GetHashCode();
      if (HitboxSizeYDelta != 0) hash ^= HitboxSizeYDelta.GetHashCode();
      if (DamageDelta != 0) hash ^= DamageDelta.GetHashCode();
      if (DamageDeltaByPercentage != 0) hash ^= DamageDeltaByPercentage.GetHashCode();
      if (CharacterHardnessDelta != 0) hash ^= CharacterHardnessDelta.GetHashCode();
      if (MeleeHardnessDelta != 0) hash ^= MeleeHardnessDelta.GetHashCode();
      if (FireballHardnessDelta != 0) hash ^= FireballHardnessDelta.GetHashCode();
      if (Invinsible != false) hash ^= Invinsible.GetHashCode();
      if (XformChSpeciesId != 0) hash ^= XformChSpeciesId.GetHashCode();
      if (RepelSoftPushback != false) hash ^= RepelSoftPushback.GetHashCode();
      if (OmitGravity != false) hash ^= OmitGravity.GetHashCode();
      if (AutoDef1 != false) hash ^= AutoDef1.GetHashCode();
      hash ^= associatedDebuffs_.GetHashCode();
      if (CharacterVfxSpeciesId != 0) hash ^= CharacterVfxSpeciesId.GetHashCode();
      if (IsPixelatedVfxOnCharacter != false) hash ^= IsPixelatedVfxOnCharacter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (SpeedDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        output.WriteRawTag(96);
        output.WriteBool(Invinsible);
      }
      if (XformChSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(XformChSpeciesId);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(112);
        output.WriteBool(RepelSoftPushback);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(120);
        output.WriteBool(OmitGravity);
      }
      if (AutoDef1 != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AutoDef1);
      }
      associatedDebuffs_.WriteTo(output, _repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CharacterVfxSpeciesId);
      }
      if (IsPixelatedVfxOnCharacter != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPixelatedVfxOnCharacter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StockType);
      }
      if (Stock != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stock);
      }
      if (SpeedDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        output.WriteRawTag(96);
        output.WriteBool(Invinsible);
      }
      if (XformChSpeciesId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(XformChSpeciesId);
      }
      if (RepelSoftPushback != false) {
        output.WriteRawTag(112);
        output.WriteBool(RepelSoftPushback);
      }
      if (OmitGravity != false) {
        output.WriteRawTag(120);
        output.WriteBool(OmitGravity);
      }
      if (AutoDef1 != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AutoDef1);
      }
      associatedDebuffs_.WriteTo(ref output, _repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CharacterVfxSpeciesId);
      }
      if (IsPixelatedVfxOnCharacter != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsPixelatedVfxOnCharacter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (StockType != global::shared.BuffStockType.NoneBf) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (SpeedDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedDelta);
      }
      if (HitboxSizeXDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeXDelta);
      }
      if (HitboxSizeYDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitboxSizeYDelta);
      }
      if (DamageDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDelta);
      }
      if (DamageDeltaByPercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageDeltaByPercentage);
      }
      if (CharacterHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterHardnessDelta);
      }
      if (MeleeHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MeleeHardnessDelta);
      }
      if (FireballHardnessDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireballHardnessDelta);
      }
      if (Invinsible != false) {
        size += 1 + 1;
      }
      if (XformChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XformChSpeciesId);
      }
      if (RepelSoftPushback != false) {
        size += 1 + 1;
      }
      if (OmitGravity != false) {
        size += 1 + 1;
      }
      if (AutoDef1 != false) {
        size += 2 + 1;
      }
      size += associatedDebuffs_.CalculateSize(_repeated_associatedDebuffs_codec);
      if (CharacterVfxSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharacterVfxSpeciesId);
      }
      if (IsPixelatedVfxOnCharacter != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BuffConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.StockType != global::shared.BuffStockType.NoneBf) {
        StockType = other.StockType;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.SpeedDelta != 0) {
        SpeedDelta = other.SpeedDelta;
      }
      if (other.HitboxSizeXDelta != 0) {
        HitboxSizeXDelta = other.HitboxSizeXDelta;
      }
      if (other.HitboxSizeYDelta != 0) {
        HitboxSizeYDelta = other.HitboxSizeYDelta;
      }
      if (other.DamageDelta != 0) {
        DamageDelta = other.DamageDelta;
      }
      if (other.DamageDeltaByPercentage != 0) {
        DamageDeltaByPercentage = other.DamageDeltaByPercentage;
      }
      if (other.CharacterHardnessDelta != 0) {
        CharacterHardnessDelta = other.CharacterHardnessDelta;
      }
      if (other.MeleeHardnessDelta != 0) {
        MeleeHardnessDelta = other.MeleeHardnessDelta;
      }
      if (other.FireballHardnessDelta != 0) {
        FireballHardnessDelta = other.FireballHardnessDelta;
      }
      if (other.Invinsible != false) {
        Invinsible = other.Invinsible;
      }
      if (other.XformChSpeciesId != 0) {
        XformChSpeciesId = other.XformChSpeciesId;
      }
      if (other.RepelSoftPushback != false) {
        RepelSoftPushback = other.RepelSoftPushback;
      }
      if (other.OmitGravity != false) {
        OmitGravity = other.OmitGravity;
      }
      if (other.AutoDef1 != false) {
        AutoDef1 = other.AutoDef1;
      }
      associatedDebuffs_.Add(other.associatedDebuffs_);
      if (other.CharacterVfxSpeciesId != 0) {
        CharacterVfxSpeciesId = other.CharacterVfxSpeciesId;
      }
      if (other.IsPixelatedVfxOnCharacter != false) {
        IsPixelatedVfxOnCharacter = other.IsPixelatedVfxOnCharacter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            SpeedDelta = input.ReadInt32();
            break;
          }
          case 40: {
            HitboxSizeXDelta = input.ReadInt32();
            break;
          }
          case 48: {
            HitboxSizeYDelta = input.ReadInt32();
            break;
          }
          case 56: {
            DamageDelta = input.ReadInt32();
            break;
          }
          case 64: {
            DamageDeltaByPercentage = input.ReadInt32();
            break;
          }
          case 72: {
            CharacterHardnessDelta = input.ReadInt32();
            break;
          }
          case 80: {
            MeleeHardnessDelta = input.ReadInt32();
            break;
          }
          case 88: {
            FireballHardnessDelta = input.ReadInt32();
            break;
          }
          case 96: {
            Invinsible = input.ReadBool();
            break;
          }
          case 104: {
            XformChSpeciesId = input.ReadUInt32();
            break;
          }
          case 112: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 120: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 128: {
            AutoDef1 = input.ReadBool();
            break;
          }
          case 138:
          case 136: {
            associatedDebuffs_.AddEntriesFrom(input, _repeated_associatedDebuffs_codec);
            break;
          }
          case 144: {
            CharacterVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 152: {
            IsPixelatedVfxOnCharacter = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            StockType = (global::shared.BuffStockType) input.ReadEnum();
            break;
          }
          case 24: {
            Stock = input.ReadInt32();
            break;
          }
          case 32: {
            SpeedDelta = input.ReadInt32();
            break;
          }
          case 40: {
            HitboxSizeXDelta = input.ReadInt32();
            break;
          }
          case 48: {
            HitboxSizeYDelta = input.ReadInt32();
            break;
          }
          case 56: {
            DamageDelta = input.ReadInt32();
            break;
          }
          case 64: {
            DamageDeltaByPercentage = input.ReadInt32();
            break;
          }
          case 72: {
            CharacterHardnessDelta = input.ReadInt32();
            break;
          }
          case 80: {
            MeleeHardnessDelta = input.ReadInt32();
            break;
          }
          case 88: {
            FireballHardnessDelta = input.ReadInt32();
            break;
          }
          case 96: {
            Invinsible = input.ReadBool();
            break;
          }
          case 104: {
            XformChSpeciesId = input.ReadUInt32();
            break;
          }
          case 112: {
            RepelSoftPushback = input.ReadBool();
            break;
          }
          case 120: {
            OmitGravity = input.ReadBool();
            break;
          }
          case 128: {
            AutoDef1 = input.ReadBool();
            break;
          }
          case 138:
          case 136: {
            associatedDebuffs_.AddEntriesFrom(ref input, _repeated_associatedDebuffs_codec);
            break;
          }
          case 144: {
            CharacterVfxSpeciesId = input.ReadInt32();
            break;
          }
          case 152: {
            IsPixelatedVfxOnCharacter = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Buff : pb::IMessage<Buff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Buff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff(Buff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      originatedRenderFrameId_ = other.originatedRenderFrameId_;
      origChSpeciesId_ = other.origChSpeciesId_;
      origRepelSoftPushback_ = other.origRepelSoftPushback_;
      origOmitGravity_ = other.origOmitGravity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Buff Clone() {
      return new Buff(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    /// <summary>Field number for the "originatedRenderFrameId" field.</summary>
    public const int OriginatedRenderFrameIdFieldNumber = 3;
    private int originatedRenderFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OriginatedRenderFrameId {
      get { return originatedRenderFrameId_; }
      set {
        originatedRenderFrameId_ = value;
      }
    }

    /// <summary>Field number for the "origChSpeciesId" field.</summary>
    public const int OrigChSpeciesIdFieldNumber = 4;
    private uint origChSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OrigChSpeciesId {
      get { return origChSpeciesId_; }
      set {
        origChSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "origRepelSoftPushback" field.</summary>
    public const int OrigRepelSoftPushbackFieldNumber = 5;
    private bool origRepelSoftPushback_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OrigRepelSoftPushback {
      get { return origRepelSoftPushback_; }
      set {
        origRepelSoftPushback_ = value;
      }
    }

    /// <summary>Field number for the "origOmitGravity" field.</summary>
    public const int OrigOmitGravityFieldNumber = 6;
    private bool origOmitGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OrigOmitGravity {
      get { return origOmitGravity_; }
      set {
        origOmitGravity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Buff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Buff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      if (OriginatedRenderFrameId != other.OriginatedRenderFrameId) return false;
      if (OrigChSpeciesId != other.OrigChSpeciesId) return false;
      if (OrigRepelSoftPushback != other.OrigRepelSoftPushback) return false;
      if (OrigOmitGravity != other.OrigOmitGravity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (OriginatedRenderFrameId != 0) hash ^= OriginatedRenderFrameId.GetHashCode();
      if (OrigChSpeciesId != 0) hash ^= OrigChSpeciesId.GetHashCode();
      if (OrigRepelSoftPushback != false) hash ^= OrigRepelSoftPushback.GetHashCode();
      if (OrigOmitGravity != false) hash ^= OrigOmitGravity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OrigChSpeciesId);
      }
      if (OrigRepelSoftPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(OrigRepelSoftPushback);
      }
      if (OrigOmitGravity != false) {
        output.WriteRawTag(48);
        output.WriteBool(OrigOmitGravity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (OriginatedRenderFrameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OrigChSpeciesId);
      }
      if (OrigRepelSoftPushback != false) {
        output.WriteRawTag(40);
        output.WriteBool(OrigRepelSoftPushback);
      }
      if (OrigOmitGravity != false) {
        output.WriteRawTag(48);
        output.WriteBool(OrigOmitGravity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (OriginatedRenderFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginatedRenderFrameId);
      }
      if (OrigChSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OrigChSpeciesId);
      }
      if (OrigRepelSoftPushback != false) {
        size += 1 + 1;
      }
      if (OrigOmitGravity != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Buff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      if (other.OriginatedRenderFrameId != 0) {
        OriginatedRenderFrameId = other.OriginatedRenderFrameId;
      }
      if (other.OrigChSpeciesId != 0) {
        OrigChSpeciesId = other.OrigChSpeciesId;
      }
      if (other.OrigRepelSoftPushback != false) {
        OrigRepelSoftPushback = other.OrigRepelSoftPushback;
      }
      if (other.OrigOmitGravity != false) {
        OrigOmitGravity = other.OrigOmitGravity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 24: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 32: {
            OrigChSpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            OrigRepelSoftPushback = input.ReadBool();
            break;
          }
          case 48: {
            OrigOmitGravity = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
          case 24: {
            OriginatedRenderFrameId = input.ReadInt32();
            break;
          }
          case 32: {
            OrigChSpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            OrigRepelSoftPushback = input.ReadBool();
            break;
          }
          case 48: {
            OrigOmitGravity = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Debuff : pb::IMessage<Debuff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Debuff> _parser = new pb::MessageParser<Debuff>(() => new Debuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Debuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff(Debuff other) : this() {
      speciesId_ = other.speciesId_;
      stock_ = other.stock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Debuff Clone() {
      return new Debuff(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    /// <summary>
    /// A redundancy of "debuffConfig" for easy termination detection 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "stock" field.</summary>
    public const int StockFieldNumber = 2;
    private int stock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stock {
      get { return stock_; }
      set {
        stock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Debuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Debuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (Stock != other.Stock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (Stock != 0) hash ^= Stock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (Stock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (Stock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Debuff other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.Stock != 0) {
        Stock = other.Stock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            Stock = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BulletImmuneRecord : pb::IMessage<BulletImmuneRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BulletImmuneRecord> _parser = new pb::MessageParser<BulletImmuneRecord>(() => new BulletImmuneRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BulletImmuneRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletImmuneRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletImmuneRecord(BulletImmuneRecord other) : this() {
      bulletLocalId_ = other.bulletLocalId_;
      remainingLifetimeRdfCount_ = other.remainingLifetimeRdfCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BulletImmuneRecord Clone() {
      return new BulletImmuneRecord(this);
    }

    /// <summary>Field number for the "bulletLocalId" field.</summary>
    public const int BulletLocalIdFieldNumber = 1;
    private int bulletLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletLocalId {
      get { return bulletLocalId_; }
      set {
        bulletLocalId_ = value;
      }
    }

    /// <summary>Field number for the "remainingLifetimeRdfCount" field.</summary>
    public const int RemainingLifetimeRdfCountFieldNumber = 2;
    private int remainingLifetimeRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemainingLifetimeRdfCount {
      get { return remainingLifetimeRdfCount_; }
      set {
        remainingLifetimeRdfCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BulletImmuneRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BulletImmuneRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletLocalId != other.BulletLocalId) return false;
      if (RemainingLifetimeRdfCount != other.RemainingLifetimeRdfCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletLocalId != 0) hash ^= BulletLocalId.GetHashCode();
      if (RemainingLifetimeRdfCount != 0) hash ^= RemainingLifetimeRdfCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BulletLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletLocalId);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BulletLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletLocalId);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BulletLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletLocalId);
      }
      if (RemainingLifetimeRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingLifetimeRdfCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BulletImmuneRecord other) {
      if (other == null) {
        return;
      }
      if (other.BulletLocalId != 0) {
        BulletLocalId = other.BulletLocalId;
      }
      if (other.RemainingLifetimeRdfCount != 0) {
        RemainingLifetimeRdfCount = other.RemainingLifetimeRdfCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BulletLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConsumableConfig : pb::IMessage<ConsumableConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConsumableConfig> _parser = new pb::MessageParser<ConsumableConfig>(() => new ConsumableConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConsumableConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsumableConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsumableConfig(ConsumableConfig other) : this() {
      speciesId_ = other.speciesId_;
      refillDelta_ = other.refillDelta_;
      vfxIdOnPicker_ = other.vfxIdOnPicker_;
      isPixelatedVfxOnPicker_ = other.isPixelatedVfxOnPicker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsumableConfig Clone() {
      return new ConsumableConfig(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "refillDelta" field.</summary>
    public const int RefillDeltaFieldNumber = 2;
    private int refillDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefillDelta {
      get { return refillDelta_; }
      set {
        refillDelta_ = value;
      }
    }

    /// <summary>Field number for the "vfxIdOnPicker" field.</summary>
    public const int VfxIdOnPickerFieldNumber = 3;
    private int vfxIdOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VfxIdOnPicker {
      get { return vfxIdOnPicker_; }
      set {
        vfxIdOnPicker_ = value;
      }
    }

    /// <summary>Field number for the "isPixelatedVfxOnPicker" field.</summary>
    public const int IsPixelatedVfxOnPickerFieldNumber = 4;
    private bool isPixelatedVfxOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPixelatedVfxOnPicker {
      get { return isPixelatedVfxOnPicker_; }
      set {
        isPixelatedVfxOnPicker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConsumableConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConsumableConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      if (RefillDelta != other.RefillDelta) return false;
      if (VfxIdOnPicker != other.VfxIdOnPicker) return false;
      if (IsPixelatedVfxOnPicker != other.IsPixelatedVfxOnPicker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (RefillDelta != 0) hash ^= RefillDelta.GetHashCode();
      if (VfxIdOnPicker != 0) hash ^= VfxIdOnPicker.GetHashCode();
      if (IsPixelatedVfxOnPicker != false) hash ^= IsPixelatedVfxOnPicker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (RefillDelta != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefillDelta);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (RefillDelta != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefillDelta);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (RefillDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefillDelta);
      }
      if (VfxIdOnPicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConsumableConfig other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.RefillDelta != 0) {
        RefillDelta = other.RefillDelta;
      }
      if (other.VfxIdOnPicker != 0) {
        VfxIdOnPicker = other.VfxIdOnPicker;
      }
      if (other.IsPixelatedVfxOnPicker != false) {
        IsPixelatedVfxOnPicker = other.IsPixelatedVfxOnPicker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            RefillDelta = input.ReadInt32();
            break;
          }
          case 24: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 32: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 16: {
            RefillDelta = input.ReadInt32();
            break;
          }
          case 24: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 32: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickableSkillConfig : pb::IMessage<PickableSkillConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickableSkillConfig> _parser = new pb::MessageParser<PickableSkillConfig>(() => new PickableSkillConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PickableSkillConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSkillConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSkillConfig(PickableSkillConfig other) : this() {
      skillId_ = other.skillId_;
      vfxIdOnPicker_ = other.vfxIdOnPicker_;
      isPixelatedVfxOnPicker_ = other.isPixelatedVfxOnPicker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSkillConfig Clone() {
      return new PickableSkillConfig(this);
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "vfxIdOnPicker" field.</summary>
    public const int VfxIdOnPickerFieldNumber = 2;
    private int vfxIdOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VfxIdOnPicker {
      get { return vfxIdOnPicker_; }
      set {
        vfxIdOnPicker_ = value;
      }
    }

    /// <summary>Field number for the "isPixelatedVfxOnPicker" field.</summary>
    public const int IsPixelatedVfxOnPickerFieldNumber = 3;
    private bool isPixelatedVfxOnPicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPixelatedVfxOnPicker {
      get { return isPixelatedVfxOnPicker_; }
      set {
        isPixelatedVfxOnPicker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PickableSkillConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PickableSkillConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (VfxIdOnPicker != other.VfxIdOnPicker) return false;
      if (IsPixelatedVfxOnPicker != other.IsPixelatedVfxOnPicker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (VfxIdOnPicker != 0) hash ^= VfxIdOnPicker.GetHashCode();
      if (IsPixelatedVfxOnPicker != false) hash ^= IsPixelatedVfxOnPicker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SkillId);
      }
      if (VfxIdOnPicker != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPixelatedVfxOnPicker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (VfxIdOnPicker != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxIdOnPicker);
      }
      if (IsPixelatedVfxOnPicker != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PickableSkillConfig other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.VfxIdOnPicker != 0) {
        VfxIdOnPicker = other.VfxIdOnPicker;
      }
      if (other.IsPixelatedVfxOnPicker != false) {
        IsPixelatedVfxOnPicker = other.IsPixelatedVfxOnPicker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 24: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 16: {
            VfxIdOnPicker = input.ReadInt32();
            break;
          }
          case 24: {
            IsPixelatedVfxOnPicker = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InventorySlot : pb::IMessage<InventorySlot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InventorySlot> _parser = new pb::MessageParser<InventorySlot>(() => new InventorySlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InventorySlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot(InventorySlot other) : this() {
      stockType_ = other.stockType_;
      quota_ = other.quota_;
      framesToRecover_ = other.framesToRecover_;
      defaultQuota_ = other.defaultQuota_;
      defaultFramesToRecover_ = other.defaultFramesToRecover_;
      buffSpeciesId_ = other.buffSpeciesId_;
      skillId_ = other.skillId_;
      skillIdAir_ = other.skillIdAir_;
      gaugeCharged_ = other.gaugeCharged_;
      gaugeRequired_ = other.gaugeRequired_;
      fullChargeBuffSpeciesId_ = other.fullChargeBuffSpeciesId_;
      fullChargeSkillId_ = other.fullChargeSkillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InventorySlot Clone() {
      return new InventorySlot(this);
    }

    /// <summary>Field number for the "stockType" field.</summary>
    public const int StockTypeFieldNumber = 1;
    private global::shared.InventorySlotStockType stockType_ = global::shared.InventorySlotStockType.NoneIv;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.InventorySlotStockType StockType {
      get { return stockType_; }
      set {
        stockType_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 2;
    private uint quota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 3;
    private int framesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "defaultQuota" field.</summary>
    public const int DefaultQuotaFieldNumber = 4;
    private uint defaultQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DefaultQuota {
      get { return defaultQuota_; }
      set {
        defaultQuota_ = value;
      }
    }

    /// <summary>Field number for the "defaultFramesToRecover" field.</summary>
    public const int DefaultFramesToRecoverFieldNumber = 5;
    private int defaultFramesToRecover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultFramesToRecover {
      get { return defaultFramesToRecover_; }
      set {
        defaultFramesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "buffSpeciesId" field.</summary>
    public const int BuffSpeciesIdFieldNumber = 6;
    private uint buffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BuffSpeciesId {
      get { return buffSpeciesId_; }
      set {
        buffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 7;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skillIdAir" field.</summary>
    public const int SkillIdAirFieldNumber = 8;
    private uint skillIdAir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SkillIdAir {
      get { return skillIdAir_; }
      set {
        skillIdAir_ = value;
      }
    }

    /// <summary>Field number for the "gaugeCharged" field.</summary>
    public const int GaugeChargedFieldNumber = 9;
    private int gaugeCharged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GaugeCharged {
      get { return gaugeCharged_; }
      set {
        gaugeCharged_ = value;
      }
    }

    /// <summary>Field number for the "gaugeRequired" field.</summary>
    public const int GaugeRequiredFieldNumber = 10;
    private int gaugeRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GaugeRequired {
      get { return gaugeRequired_; }
      set {
        gaugeRequired_ = value;
      }
    }

    /// <summary>Field number for the "fullChargeBuffSpeciesId" field.</summary>
    public const int FullChargeBuffSpeciesIdFieldNumber = 11;
    private uint fullChargeBuffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FullChargeBuffSpeciesId {
      get { return fullChargeBuffSpeciesId_; }
      set {
        fullChargeBuffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "fullChargeSkillId" field.</summary>
    public const int FullChargeSkillIdFieldNumber = 12;
    private uint fullChargeSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FullChargeSkillId {
      get { return fullChargeSkillId_; }
      set {
        fullChargeSkillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InventorySlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InventorySlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StockType != other.StockType) return false;
      if (Quota != other.Quota) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (DefaultQuota != other.DefaultQuota) return false;
      if (DefaultFramesToRecover != other.DefaultFramesToRecover) return false;
      if (BuffSpeciesId != other.BuffSpeciesId) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillIdAir != other.SkillIdAir) return false;
      if (GaugeCharged != other.GaugeCharged) return false;
      if (GaugeRequired != other.GaugeRequired) return false;
      if (FullChargeBuffSpeciesId != other.FullChargeBuffSpeciesId) return false;
      if (FullChargeSkillId != other.FullChargeSkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StockType != global::shared.InventorySlotStockType.NoneIv) hash ^= StockType.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (DefaultQuota != 0) hash ^= DefaultQuota.GetHashCode();
      if (DefaultFramesToRecover != 0) hash ^= DefaultFramesToRecover.GetHashCode();
      if (BuffSpeciesId != 0) hash ^= BuffSpeciesId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillIdAir != 0) hash ^= SkillIdAir.GetHashCode();
      if (GaugeCharged != 0) hash ^= GaugeCharged.GetHashCode();
      if (GaugeRequired != 0) hash ^= GaugeRequired.GetHashCode();
      if (FullChargeBuffSpeciesId != 0) hash ^= FullChargeBuffSpeciesId.GetHashCode();
      if (FullChargeSkillId != 0) hash ^= FullChargeSkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DefaultFramesToRecover);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SkillId);
      }
      if (SkillIdAir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SkillIdAir);
      }
      if (GaugeCharged != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GaugeCharged);
      }
      if (GaugeRequired != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GaugeRequired);
      }
      if (FullChargeBuffSpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FullChargeBuffSpeciesId);
      }
      if (FullChargeSkillId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FullChargeSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StockType);
      }
      if (Quota != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quota);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DefaultFramesToRecover);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SkillId);
      }
      if (SkillIdAir != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SkillIdAir);
      }
      if (GaugeCharged != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GaugeCharged);
      }
      if (GaugeRequired != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GaugeRequired);
      }
      if (FullChargeBuffSpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FullChargeBuffSpeciesId);
      }
      if (FullChargeSkillId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(FullChargeSkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StockType != global::shared.InventorySlotStockType.NoneIv) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StockType);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quota);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (DefaultQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefaultQuota);
      }
      if (DefaultFramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultFramesToRecover);
      }
      if (BuffSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffSpeciesId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (SkillIdAir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillIdAir);
      }
      if (GaugeCharged != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GaugeCharged);
      }
      if (GaugeRequired != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GaugeRequired);
      }
      if (FullChargeBuffSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullChargeBuffSpeciesId);
      }
      if (FullChargeSkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullChargeSkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InventorySlot other) {
      if (other == null) {
        return;
      }
      if (other.StockType != global::shared.InventorySlotStockType.NoneIv) {
        StockType = other.StockType;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.DefaultQuota != 0) {
        DefaultQuota = other.DefaultQuota;
      }
      if (other.DefaultFramesToRecover != 0) {
        DefaultFramesToRecover = other.DefaultFramesToRecover;
      }
      if (other.BuffSpeciesId != 0) {
        BuffSpeciesId = other.BuffSpeciesId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillIdAir != 0) {
        SkillIdAir = other.SkillIdAir;
      }
      if (other.GaugeCharged != 0) {
        GaugeCharged = other.GaugeCharged;
      }
      if (other.GaugeRequired != 0) {
        GaugeRequired = other.GaugeRequired;
      }
      if (other.FullChargeBuffSpeciesId != 0) {
        FullChargeBuffSpeciesId = other.FullChargeBuffSpeciesId;
      }
      if (other.FullChargeSkillId != 0) {
        FullChargeSkillId = other.FullChargeSkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StockType = (global::shared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadUInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultQuota = input.ReadUInt32();
            break;
          }
          case 40: {
            DefaultFramesToRecover = input.ReadInt32();
            break;
          }
          case 48: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 56: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 64: {
            SkillIdAir = input.ReadUInt32();
            break;
          }
          case 72: {
            GaugeCharged = input.ReadInt32();
            break;
          }
          case 80: {
            GaugeRequired = input.ReadInt32();
            break;
          }
          case 88: {
            FullChargeBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 96: {
            FullChargeSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StockType = (global::shared.InventorySlotStockType) input.ReadEnum();
            break;
          }
          case 16: {
            Quota = input.ReadUInt32();
            break;
          }
          case 24: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultQuota = input.ReadUInt32();
            break;
          }
          case 40: {
            DefaultFramesToRecover = input.ReadInt32();
            break;
          }
          case 48: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 56: {
            SkillId = input.ReadUInt32();
            break;
          }
          case 64: {
            SkillIdAir = input.ReadUInt32();
            break;
          }
          case 72: {
            GaugeCharged = input.ReadInt32();
            break;
          }
          case 80: {
            GaugeRequired = input.ReadInt32();
            break;
          }
          case 88: {
            FullChargeBuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 96: {
            FullChargeSkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Inventory : pb::IMessage<Inventory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory(Inventory other) : this() {
      slots_ = other.slots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::shared.InventorySlot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(10, global::shared.InventorySlot.Parser);
    private readonly pbc::RepeatedField<global::shared.InventorySlot> slots_ = new pbc::RepeatedField<global::shared.InventorySlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.InventorySlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slots_.Equals(other.slots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      slots_.WriteTo(output, _repeated_slots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      slots_.WriteTo(ref output, _repeated_slots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_repeated_slots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      slots_.Add(other.slots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            slots_.AddEntriesFrom(ref input, _repeated_slots_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BattleEquipment : pb::IMessage<BattleEquipment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleEquipment> _parser = new pb::MessageParser<BattleEquipment>(() => new BattleEquipment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleEquipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEquipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEquipment(BattleEquipment other) : this() {
      speciesId_ = other.speciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleEquipment Clone() {
      return new BattleEquipment(this);
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 1;
    private uint speciesId_;
    /// <summary>
    /// Unlike "InventorySlot", "BattleEquipment" has no varying state during a battle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleEquipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleEquipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpeciesId != other.SpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeciesId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleEquipment other) {
      if (other == null) {
        return;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpeciesId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerSettings : pb::IMessage<PlayerSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerSettings> _parser = new pb::MessageParser<PlayerSettings>(() => new PlayerSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSettings(PlayerSettings other) : this() {
      soundVolume_ = other.soundVolume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerSettings Clone() {
      return new PlayerSettings(this);
    }

    /// <summary>Field number for the "soundVolume" field.</summary>
    public const int SoundVolumeFieldNumber = 1;
    private int soundVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SoundVolume {
      get { return soundVolume_; }
      set {
        soundVolume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoundVolume != other.SoundVolume) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SoundVolume != 0) hash ^= SoundVolume.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SoundVolume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoundVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SoundVolume != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoundVolume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SoundVolume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoundVolume);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerSettings other) {
      if (other == null) {
        return;
      }
      if (other.SoundVolume != 0) {
        SoundVolume = other.SoundVolume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoundVolume = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SoundVolume = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerRegionProgress : pb::IMessage<PlayerRegionProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerRegionProgress> _parser = new pb::MessageParser<PlayerRegionProgress>(() => new PlayerRegionProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerRegionProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRegionProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRegionProgress(PlayerRegionProgress other) : this() {
      regionId_ = other.regionId_;
      completedLevelCount_ = other.completedLevelCount_;
      remainingDependencies_ = other.remainingDependencies_.Clone();
      removedDependencies_ = other.removedDependencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerRegionProgress Clone() {
      return new PlayerRegionProgress(this);
    }

    /// <summary>Field number for the "regionId" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private int regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    /// <summary>Field number for the "completedLevelCount" field.</summary>
    public const int CompletedLevelCountFieldNumber = 2;
    private int completedLevelCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CompletedLevelCount {
      get { return completedLevelCount_; }
      set {
        completedLevelCount_ = value;
      }
    }

    /// <summary>Field number for the "remainingDependencies" field.</summary>
    public const int RemainingDependenciesFieldNumber = 3;
    private static readonly pbc::MapField<int, bool>.Codec _map_remainingDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForBool(16, false), 26);
    private readonly pbc::MapField<int, bool> remainingDependencies_ = new pbc::MapField<int, bool>();
    /// <summary>
    /// Any region can be in a state of "partially unlocked"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, bool> RemainingDependencies {
      get { return remainingDependencies_; }
    }

    /// <summary>Field number for the "removedDependencies" field.</summary>
    public const int RemovedDependenciesFieldNumber = 4;
    private static readonly pbc::MapField<int, bool>.Codec _map_removedDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForBool(16, false), 34);
    private readonly pbc::MapField<int, bool> removedDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, bool> RemovedDependencies {
      get { return removedDependencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerRegionProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerRegionProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (CompletedLevelCount != other.CompletedLevelCount) return false;
      if (!RemainingDependencies.Equals(other.RemainingDependencies)) return false;
      if (!RemovedDependencies.Equals(other.RemovedDependencies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      if (CompletedLevelCount != 0) hash ^= CompletedLevelCount.GetHashCode();
      hash ^= RemainingDependencies.GetHashCode();
      hash ^= RemovedDependencies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (CompletedLevelCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompletedLevelCount);
      }
      remainingDependencies_.WriteTo(output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (CompletedLevelCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CompletedLevelCount);
      }
      remainingDependencies_.WriteTo(ref output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(ref output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      if (CompletedLevelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompletedLevelCount);
      }
      size += remainingDependencies_.CalculateSize(_map_remainingDependencies_codec);
      size += removedDependencies_.CalculateSize(_map_removedDependencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerRegionProgress other) {
      if (other == null) {
        return;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
      if (other.CompletedLevelCount != 0) {
        CompletedLevelCount = other.CompletedLevelCount;
      }
      remainingDependencies_.Add(other.remainingDependencies_);
      removedDependencies_.Add(other.removedDependencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            CompletedLevelCount = input.ReadInt32();
            break;
          }
          case 26: {
            remainingDependencies_.AddEntriesFrom(input, _map_remainingDependencies_codec);
            break;
          }
          case 34: {
            removedDependencies_.AddEntriesFrom(input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            CompletedLevelCount = input.ReadInt32();
            break;
          }
          case 26: {
            remainingDependencies_.AddEntriesFrom(ref input, _map_remainingDependencies_codec);
            break;
          }
          case 34: {
            removedDependencies_.AddEntriesFrom(ref input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerLevelProgress : pb::IMessage<PlayerLevelProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerLevelProgress> _parser = new pb::MessageParser<PlayerLevelProgress>(() => new PlayerLevelProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerLevelProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerLevelProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerLevelProgress(PlayerLevelProgress other) : this() {
      regionId_ = other.regionId_;
      levelId_ = other.levelId_;
      highestScore_ = other.highestScore_;
      shortestFinishTimeAtHighestScore_ = other.shortestFinishTimeAtHighestScore_;
      characterSpeciesIdAtHighestScore_ = other.characterSpeciesIdAtHighestScore_;
      shortestFinishTime_ = other.shortestFinishTime_;
      scoreAtShortestFinishTime_ = other.scoreAtShortestFinishTime_;
      characterSpeciesIdAtShortestFinishTime_ = other.characterSpeciesIdAtShortestFinishTime_;
      remainingDependencies_ = other.remainingDependencies_.Clone();
      removedDependencies_ = other.removedDependencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerLevelProgress Clone() {
      return new PlayerLevelProgress(this);
    }

    /// <summary>Field number for the "regionId" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private int regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    /// <summary>Field number for the "levelId" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "highestScore" field.</summary>
    public const int HighestScoreFieldNumber = 3;
    private int highestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HighestScore {
      get { return highestScore_; }
      set {
        highestScore_ = value;
      }
    }

    /// <summary>Field number for the "shortestFinishTimeAtHighestScore" field.</summary>
    public const int ShortestFinishTimeAtHighestScoreFieldNumber = 4;
    private int shortestFinishTimeAtHighestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShortestFinishTimeAtHighestScore {
      get { return shortestFinishTimeAtHighestScore_; }
      set {
        shortestFinishTimeAtHighestScore_ = value;
      }
    }

    /// <summary>Field number for the "characterSpeciesIdAtHighestScore" field.</summary>
    public const int CharacterSpeciesIdAtHighestScoreFieldNumber = 5;
    private uint characterSpeciesIdAtHighestScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CharacterSpeciesIdAtHighestScore {
      get { return characterSpeciesIdAtHighestScore_; }
      set {
        characterSpeciesIdAtHighestScore_ = value;
      }
    }

    /// <summary>Field number for the "shortestFinishTime" field.</summary>
    public const int ShortestFinishTimeFieldNumber = 6;
    private int shortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShortestFinishTime {
      get { return shortestFinishTime_; }
      set {
        shortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "scoreAtShortestFinishTime" field.</summary>
    public const int ScoreAtShortestFinishTimeFieldNumber = 7;
    private int scoreAtShortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScoreAtShortestFinishTime {
      get { return scoreAtShortestFinishTime_; }
      set {
        scoreAtShortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "characterSpeciesIdAtShortestFinishTime" field.</summary>
    public const int CharacterSpeciesIdAtShortestFinishTimeFieldNumber = 8;
    private uint characterSpeciesIdAtShortestFinishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CharacterSpeciesIdAtShortestFinishTime {
      get { return characterSpeciesIdAtShortestFinishTime_; }
      set {
        characterSpeciesIdAtShortestFinishTime_ = value;
      }
    }

    /// <summary>Field number for the "remainingDependencies" field.</summary>
    public const int RemainingDependenciesFieldNumber = 9;
    private static readonly pbc::MapField<int, bool>.Codec _map_remainingDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForBool(16, false), 74);
    private readonly pbc::MapField<int, bool> remainingDependencies_ = new pbc::MapField<int, bool>();
    /// <summary>
    /// Any level can be in a state of "partially unlocked", if a record exists in "PlayerStoryProgress.levelProgressDict" with non-empty "remainingDependencies", then it's locked but visible
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, bool> RemainingDependencies {
      get { return remainingDependencies_; }
    }

    /// <summary>Field number for the "removedDependencies" field.</summary>
    public const int RemovedDependenciesFieldNumber = 10;
    private static readonly pbc::MapField<int, bool>.Codec _map_removedDependencies_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForBool(16, false), 82);
    private readonly pbc::MapField<int, bool> removedDependencies_ = new pbc::MapField<int, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, bool> RemovedDependencies {
      get { return removedDependencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerLevelProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerLevelProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (LevelId != other.LevelId) return false;
      if (HighestScore != other.HighestScore) return false;
      if (ShortestFinishTimeAtHighestScore != other.ShortestFinishTimeAtHighestScore) return false;
      if (CharacterSpeciesIdAtHighestScore != other.CharacterSpeciesIdAtHighestScore) return false;
      if (ShortestFinishTime != other.ShortestFinishTime) return false;
      if (ScoreAtShortestFinishTime != other.ScoreAtShortestFinishTime) return false;
      if (CharacterSpeciesIdAtShortestFinishTime != other.CharacterSpeciesIdAtShortestFinishTime) return false;
      if (!RemainingDependencies.Equals(other.RemainingDependencies)) return false;
      if (!RemovedDependencies.Equals(other.RemovedDependencies)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId != 0) hash ^= RegionId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
      if (ShortestFinishTimeAtHighestScore != 0) hash ^= ShortestFinishTimeAtHighestScore.GetHashCode();
      if (CharacterSpeciesIdAtHighestScore != 0) hash ^= CharacterSpeciesIdAtHighestScore.GetHashCode();
      if (ShortestFinishTime != 0) hash ^= ShortestFinishTime.GetHashCode();
      if (ScoreAtShortestFinishTime != 0) hash ^= ScoreAtShortestFinishTime.GetHashCode();
      if (CharacterSpeciesIdAtShortestFinishTime != 0) hash ^= CharacterSpeciesIdAtShortestFinishTime.GetHashCode();
      hash ^= RemainingDependencies.GetHashCode();
      hash ^= RemovedDependencies.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
      if (HighestScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HighestScore);
      }
      if (ShortestFinishTimeAtHighestScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShortestFinishTimeAtHighestScore);
      }
      if (CharacterSpeciesIdAtHighestScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CharacterSpeciesIdAtHighestScore);
      }
      if (ShortestFinishTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ShortestFinishTime);
      }
      if (ScoreAtShortestFinishTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScoreAtShortestFinishTime);
      }
      if (CharacterSpeciesIdAtShortestFinishTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CharacterSpeciesIdAtShortestFinishTime);
      }
      remainingDependencies_.WriteTo(output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RegionId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
      if (HighestScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HighestScore);
      }
      if (ShortestFinishTimeAtHighestScore != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ShortestFinishTimeAtHighestScore);
      }
      if (CharacterSpeciesIdAtHighestScore != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CharacterSpeciesIdAtHighestScore);
      }
      if (ShortestFinishTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ShortestFinishTime);
      }
      if (ScoreAtShortestFinishTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScoreAtShortestFinishTime);
      }
      if (CharacterSpeciesIdAtShortestFinishTime != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CharacterSpeciesIdAtShortestFinishTime);
      }
      remainingDependencies_.WriteTo(ref output, _map_remainingDependencies_codec);
      removedDependencies_.WriteTo(ref output, _map_removedDependencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (HighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighestScore);
      }
      if (ShortestFinishTimeAtHighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortestFinishTimeAtHighestScore);
      }
      if (CharacterSpeciesIdAtHighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterSpeciesIdAtHighestScore);
      }
      if (ShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortestFinishTime);
      }
      if (ScoreAtShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreAtShortestFinishTime);
      }
      if (CharacterSpeciesIdAtShortestFinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterSpeciesIdAtShortestFinishTime);
      }
      size += remainingDependencies_.CalculateSize(_map_remainingDependencies_codec);
      size += removedDependencies_.CalculateSize(_map_removedDependencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerLevelProgress other) {
      if (other == null) {
        return;
      }
      if (other.RegionId != 0) {
        RegionId = other.RegionId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.HighestScore != 0) {
        HighestScore = other.HighestScore;
      }
      if (other.ShortestFinishTimeAtHighestScore != 0) {
        ShortestFinishTimeAtHighestScore = other.ShortestFinishTimeAtHighestScore;
      }
      if (other.CharacterSpeciesIdAtHighestScore != 0) {
        CharacterSpeciesIdAtHighestScore = other.CharacterSpeciesIdAtHighestScore;
      }
      if (other.ShortestFinishTime != 0) {
        ShortestFinishTime = other.ShortestFinishTime;
      }
      if (other.ScoreAtShortestFinishTime != 0) {
        ScoreAtShortestFinishTime = other.ScoreAtShortestFinishTime;
      }
      if (other.CharacterSpeciesIdAtShortestFinishTime != 0) {
        CharacterSpeciesIdAtShortestFinishTime = other.CharacterSpeciesIdAtShortestFinishTime;
      }
      remainingDependencies_.Add(other.remainingDependencies_);
      removedDependencies_.Add(other.removedDependencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
          case 24: {
            HighestScore = input.ReadInt32();
            break;
          }
          case 32: {
            ShortestFinishTimeAtHighestScore = input.ReadInt32();
            break;
          }
          case 40: {
            CharacterSpeciesIdAtHighestScore = input.ReadUInt32();
            break;
          }
          case 48: {
            ShortestFinishTime = input.ReadInt32();
            break;
          }
          case 56: {
            ScoreAtShortestFinishTime = input.ReadInt32();
            break;
          }
          case 64: {
            CharacterSpeciesIdAtShortestFinishTime = input.ReadUInt32();
            break;
          }
          case 74: {
            remainingDependencies_.AddEntriesFrom(input, _map_remainingDependencies_codec);
            break;
          }
          case 82: {
            removedDependencies_.AddEntriesFrom(input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RegionId = input.ReadInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
          case 24: {
            HighestScore = input.ReadInt32();
            break;
          }
          case 32: {
            ShortestFinishTimeAtHighestScore = input.ReadInt32();
            break;
          }
          case 40: {
            CharacterSpeciesIdAtHighestScore = input.ReadUInt32();
            break;
          }
          case 48: {
            ShortestFinishTime = input.ReadInt32();
            break;
          }
          case 56: {
            ScoreAtShortestFinishTime = input.ReadInt32();
            break;
          }
          case 64: {
            CharacterSpeciesIdAtShortestFinishTime = input.ReadUInt32();
            break;
          }
          case 74: {
            remainingDependencies_.AddEntriesFrom(ref input, _map_remainingDependencies_codec);
            break;
          }
          case 82: {
            removedDependencies_.AddEntriesFrom(ref input, _map_removedDependencies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerStoryProgress : pb::IMessage<PlayerStoryProgress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerStoryProgress> _parser = new pb::MessageParser<PlayerStoryProgress>(() => new PlayerStoryProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerStoryProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStoryProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStoryProgress(PlayerStoryProgress other) : this() {
      regionProgressDict_ = other.regionProgressDict_.Clone();
      levelProgressDict_ = other.levelProgressDict_.Clone();
      cursorRegionId_ = other.cursorRegionId_;
      cursorLevelId_ = other.cursorLevelId_;
      view_ = other.view_;
      savedAtGmtMillis_ = other.savedAtGmtMillis_;
      unlockedPlayableCharacters_ = other.unlockedPlayableCharacters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerStoryProgress Clone() {
      return new PlayerStoryProgress(this);
    }

    /// <summary>Field number for the "regionProgressDict" field.</summary>
    public const int RegionProgressDictFieldNumber = 1;
    private static readonly pbc::MapField<int, global::shared.PlayerRegionProgress>.Codec _map_regionProgressDict_codec
        = new pbc::MapField<int, global::shared.PlayerRegionProgress>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::shared.PlayerRegionProgress.Parser), 10);
    private readonly pbc::MapField<int, global::shared.PlayerRegionProgress> regionProgressDict_ = new pbc::MapField<int, global::shared.PlayerRegionProgress>();
    /// <summary>
    /// Including just unlocked regions with 0 progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::shared.PlayerRegionProgress> RegionProgressDict {
      get { return regionProgressDict_; }
    }

    /// <summary>Field number for the "levelProgressDict" field.</summary>
    public const int LevelProgressDictFieldNumber = 2;
    private static readonly pbc::MapField<int, global::shared.PlayerLevelProgress>.Codec _map_levelProgressDict_codec
        = new pbc::MapField<int, global::shared.PlayerLevelProgress>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::shared.PlayerLevelProgress.Parser), 18);
    private readonly pbc::MapField<int, global::shared.PlayerLevelProgress> levelProgressDict_ = new pbc::MapField<int, global::shared.PlayerLevelProgress>();
    /// <summary>
    /// Including just unlocked levels with 0 progress 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::shared.PlayerLevelProgress> LevelProgressDict {
      get { return levelProgressDict_; }
    }

    /// <summary>Field number for the "cursorRegionId" field.</summary>
    public const int CursorRegionIdFieldNumber = 3;
    private int cursorRegionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CursorRegionId {
      get { return cursorRegionId_; }
      set {
        cursorRegionId_ = value;
      }
    }

    /// <summary>Field number for the "cursorLevelId" field.</summary>
    public const int CursorLevelIdFieldNumber = 4;
    private int cursorLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CursorLevelId {
      get { return cursorLevelId_; }
      set {
        cursorLevelId_ = value;
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 5;
    private global::shared.PlayerStoryModeSelectView view_ = global::shared.PlayerStoryModeSelectView.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PlayerStoryModeSelectView View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    /// <summary>Field number for the "savedAtGmtMillis" field.</summary>
    public const int SavedAtGmtMillisFieldNumber = 6;
    private ulong savedAtGmtMillis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SavedAtGmtMillis {
      get { return savedAtGmtMillis_; }
      set {
        savedAtGmtMillis_ = value;
      }
    }

    /// <summary>Field number for the "unlockedPlayableCharacters" field.</summary>
    public const int UnlockedPlayableCharactersFieldNumber = 7;
    private static readonly pbc::MapField<uint, bool>.Codec _map_unlockedPlayableCharacters_codec
        = new pbc::MapField<uint, bool>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForBool(16, false), 58);
    private readonly pbc::MapField<uint, bool> unlockedPlayableCharacters_ = new pbc::MapField<uint, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, bool> UnlockedPlayableCharacters {
      get { return unlockedPlayableCharacters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerStoryProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerStoryProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!RegionProgressDict.Equals(other.RegionProgressDict)) return false;
      if (!LevelProgressDict.Equals(other.LevelProgressDict)) return false;
      if (CursorRegionId != other.CursorRegionId) return false;
      if (CursorLevelId != other.CursorLevelId) return false;
      if (View != other.View) return false;
      if (SavedAtGmtMillis != other.SavedAtGmtMillis) return false;
      if (!UnlockedPlayableCharacters.Equals(other.UnlockedPlayableCharacters)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= RegionProgressDict.GetHashCode();
      hash ^= LevelProgressDict.GetHashCode();
      if (CursorRegionId != 0) hash ^= CursorRegionId.GetHashCode();
      if (CursorLevelId != 0) hash ^= CursorLevelId.GetHashCode();
      if (View != global::shared.PlayerStoryModeSelectView.None) hash ^= View.GetHashCode();
      if (SavedAtGmtMillis != 0UL) hash ^= SavedAtGmtMillis.GetHashCode();
      hash ^= UnlockedPlayableCharacters.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      regionProgressDict_.WriteTo(output, _map_regionProgressDict_codec);
      levelProgressDict_.WriteTo(output, _map_levelProgressDict_codec);
      if (CursorRegionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CursorRegionId);
      }
      if (CursorLevelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CursorLevelId);
      }
      if (View != global::shared.PlayerStoryModeSelectView.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) View);
      }
      if (SavedAtGmtMillis != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SavedAtGmtMillis);
      }
      unlockedPlayableCharacters_.WriteTo(output, _map_unlockedPlayableCharacters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      regionProgressDict_.WriteTo(ref output, _map_regionProgressDict_codec);
      levelProgressDict_.WriteTo(ref output, _map_levelProgressDict_codec);
      if (CursorRegionId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CursorRegionId);
      }
      if (CursorLevelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CursorLevelId);
      }
      if (View != global::shared.PlayerStoryModeSelectView.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) View);
      }
      if (SavedAtGmtMillis != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SavedAtGmtMillis);
      }
      unlockedPlayableCharacters_.WriteTo(ref output, _map_unlockedPlayableCharacters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += regionProgressDict_.CalculateSize(_map_regionProgressDict_codec);
      size += levelProgressDict_.CalculateSize(_map_levelProgressDict_codec);
      if (CursorRegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorRegionId);
      }
      if (CursorLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CursorLevelId);
      }
      if (View != global::shared.PlayerStoryModeSelectView.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (SavedAtGmtMillis != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SavedAtGmtMillis);
      }
      size += unlockedPlayableCharacters_.CalculateSize(_map_unlockedPlayableCharacters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerStoryProgress other) {
      if (other == null) {
        return;
      }
      regionProgressDict_.Add(other.regionProgressDict_);
      levelProgressDict_.Add(other.levelProgressDict_);
      if (other.CursorRegionId != 0) {
        CursorRegionId = other.CursorRegionId;
      }
      if (other.CursorLevelId != 0) {
        CursorLevelId = other.CursorLevelId;
      }
      if (other.View != global::shared.PlayerStoryModeSelectView.None) {
        View = other.View;
      }
      if (other.SavedAtGmtMillis != 0UL) {
        SavedAtGmtMillis = other.SavedAtGmtMillis;
      }
      unlockedPlayableCharacters_.Add(other.unlockedPlayableCharacters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            regionProgressDict_.AddEntriesFrom(input, _map_regionProgressDict_codec);
            break;
          }
          case 18: {
            levelProgressDict_.AddEntriesFrom(input, _map_levelProgressDict_codec);
            break;
          }
          case 24: {
            CursorRegionId = input.ReadInt32();
            break;
          }
          case 32: {
            CursorLevelId = input.ReadInt32();
            break;
          }
          case 40: {
            View = (global::shared.PlayerStoryModeSelectView) input.ReadEnum();
            break;
          }
          case 48: {
            SavedAtGmtMillis = input.ReadUInt64();
            break;
          }
          case 58: {
            unlockedPlayableCharacters_.AddEntriesFrom(input, _map_unlockedPlayableCharacters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            regionProgressDict_.AddEntriesFrom(ref input, _map_regionProgressDict_codec);
            break;
          }
          case 18: {
            levelProgressDict_.AddEntriesFrom(ref input, _map_levelProgressDict_codec);
            break;
          }
          case 24: {
            CursorRegionId = input.ReadInt32();
            break;
          }
          case 32: {
            CursorLevelId = input.ReadInt32();
            break;
          }
          case 40: {
            View = (global::shared.PlayerStoryModeSelectView) input.ReadEnum();
            break;
          }
          case 48: {
            SavedAtGmtMillis = input.ReadUInt64();
            break;
          }
          case 58: {
            unlockedPlayableCharacters_.AddEntriesFrom(ref input, _map_unlockedPlayableCharacters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StoryPointDialogLine : pb::IMessage<StoryPointDialogLine>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StoryPointDialogLine> _parser = new pb::MessageParser<StoryPointDialogLine>(() => new StoryPointDialogLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StoryPointDialogLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointDialogLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointDialogLine(StoryPointDialogLine other) : this() {
      narratorJoinIndex_ = other.narratorJoinIndex_;
      narratorSpeciesId_ = other.narratorSpeciesId_;
      content_ = other.content_;
      downOrNot_ = other.downOrNot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointDialogLine Clone() {
      return new StoryPointDialogLine(this);
    }

    /// <summary>Field number for the "narratorJoinIndex" field.</summary>
    public const int NarratorJoinIndexFieldNumber = 1;
    private int narratorJoinIndex_;
    /// <summary>
    /// [WARNING] Only one of "narratorJoinIndex" and "narratorSpeciesId" should be available for each "StoryPointDialogLine".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NarratorJoinIndex {
      get { return narratorJoinIndex_; }
      set {
        narratorJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "narratorSpeciesId" field.</summary>
    public const int NarratorSpeciesIdFieldNumber = 2;
    private uint narratorSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NarratorSpeciesId {
      get { return narratorSpeciesId_; }
      set {
        narratorSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "downOrNot" field.</summary>
    public const int DownOrNotFieldNumber = 4;
    private bool downOrNot_;
    /// <summary>
    /// true is "down"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DownOrNot {
      get { return downOrNot_; }
      set {
        downOrNot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StoryPointDialogLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StoryPointDialogLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NarratorJoinIndex != other.NarratorJoinIndex) return false;
      if (NarratorSpeciesId != other.NarratorSpeciesId) return false;
      if (Content != other.Content) return false;
      if (DownOrNot != other.DownOrNot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NarratorJoinIndex != 0) hash ^= NarratorJoinIndex.GetHashCode();
      if (NarratorSpeciesId != 0) hash ^= NarratorSpeciesId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (DownOrNot != false) hash ^= DownOrNot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NarratorJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NarratorJoinIndex);
      }
      if (NarratorSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NarratorSpeciesId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (DownOrNot != false) {
        output.WriteRawTag(32);
        output.WriteBool(DownOrNot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NarratorJoinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NarratorJoinIndex);
      }
      if (NarratorSpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NarratorSpeciesId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (DownOrNot != false) {
        output.WriteRawTag(32);
        output.WriteBool(DownOrNot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NarratorJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NarratorJoinIndex);
      }
      if (NarratorSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NarratorSpeciesId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (DownOrNot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StoryPointDialogLine other) {
      if (other == null) {
        return;
      }
      if (other.NarratorJoinIndex != 0) {
        NarratorJoinIndex = other.NarratorJoinIndex;
      }
      if (other.NarratorSpeciesId != 0) {
        NarratorSpeciesId = other.NarratorSpeciesId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.DownOrNot != false) {
        DownOrNot = other.DownOrNot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NarratorJoinIndex = input.ReadInt32();
            break;
          }
          case 16: {
            NarratorSpeciesId = input.ReadUInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            DownOrNot = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NarratorJoinIndex = input.ReadInt32();
            break;
          }
          case 16: {
            NarratorSpeciesId = input.ReadUInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            DownOrNot = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StoryPointStep : pb::IMessage<StoryPointStep>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StoryPointStep> _parser = new pb::MessageParser<StoryPointStep>(() => new StoryPointStep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StoryPointStep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointStep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointStep(StoryPointStep other) : this() {
      lines_ = other.lines_.Clone();
      nonctrlAliveRdfCount_ = other.nonctrlAliveRdfCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPointStep Clone() {
      return new StoryPointStep(this);
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::shared.StoryPointDialogLine> _repeated_lines_codec
        = pb::FieldCodec.ForMessage(10, global::shared.StoryPointDialogLine.Parser);
    private readonly pbc::RepeatedField<global::shared.StoryPointDialogLine> lines_ = new pbc::RepeatedField<global::shared.StoryPointDialogLine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.StoryPointDialogLine> Lines {
      get { return lines_; }
    }

    /// <summary>Field number for the "nonctrlAliveRdfCount" field.</summary>
    public const int NonctrlAliveRdfCountFieldNumber = 2;
    private int nonctrlAliveRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NonctrlAliveRdfCount {
      get { return nonctrlAliveRdfCount_; }
      set {
        nonctrlAliveRdfCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StoryPointStep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StoryPointStep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lines_.Equals(other.lines_)) return false;
      if (NonctrlAliveRdfCount != other.NonctrlAliveRdfCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lines_.GetHashCode();
      if (NonctrlAliveRdfCount != 0) hash ^= NonctrlAliveRdfCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      lines_.WriteTo(output, _repeated_lines_codec);
      if (NonctrlAliveRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NonctrlAliveRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      lines_.WriteTo(ref output, _repeated_lines_codec);
      if (NonctrlAliveRdfCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NonctrlAliveRdfCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += lines_.CalculateSize(_repeated_lines_codec);
      if (NonctrlAliveRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NonctrlAliveRdfCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StoryPointStep other) {
      if (other == null) {
        return;
      }
      lines_.Add(other.lines_);
      if (other.NonctrlAliveRdfCount != 0) {
        NonctrlAliveRdfCount = other.NonctrlAliveRdfCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
          case 16: {
            NonctrlAliveRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            lines_.AddEntriesFrom(ref input, _repeated_lines_codec);
            break;
          }
          case 16: {
            NonctrlAliveRdfCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StoryPoint : pb::IMessage<StoryPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StoryPoint> _parser = new pb::MessageParser<StoryPoint>(() => new StoryPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StoryPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPoint(StoryPoint other) : this() {
      steps_ = other.steps_.Clone();
      nonctrl_ = other.nonctrl_;
      cutsceneName_ = other.cutsceneName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StoryPoint Clone() {
      return new StoryPoint(this);
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::shared.StoryPointStep> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(10, global::shared.StoryPointStep.Parser);
    private readonly pbc::RepeatedField<global::shared.StoryPointStep> steps_ = new pbc::RepeatedField<global::shared.StoryPointStep>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.StoryPointStep> Steps {
      get { return steps_; }
    }

    /// <summary>Field number for the "nonctrl" field.</summary>
    public const int NonctrlFieldNumber = 2;
    private bool nonctrl_;
    /// <summary>
    /// not taking over control if true
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Nonctrl {
      get { return nonctrl_; }
      set {
        nonctrl_ = value;
      }
    }

    /// <summary>Field number for the "cutsceneName" field.</summary>
    public const int CutsceneNameFieldNumber = 3;
    private string cutsceneName_ = "";
    /// <summary>
    /// null for no cut scene
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CutsceneName {
      get { return cutsceneName_; }
      set {
        cutsceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StoryPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StoryPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!steps_.Equals(other.steps_)) return false;
      if (Nonctrl != other.Nonctrl) return false;
      if (CutsceneName != other.CutsceneName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= steps_.GetHashCode();
      if (Nonctrl != false) hash ^= Nonctrl.GetHashCode();
      if (CutsceneName.Length != 0) hash ^= CutsceneName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      steps_.WriteTo(output, _repeated_steps_codec);
      if (Nonctrl != false) {
        output.WriteRawTag(16);
        output.WriteBool(Nonctrl);
      }
      if (CutsceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CutsceneName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      steps_.WriteTo(ref output, _repeated_steps_codec);
      if (Nonctrl != false) {
        output.WriteRawTag(16);
        output.WriteBool(Nonctrl);
      }
      if (CutsceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CutsceneName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += steps_.CalculateSize(_repeated_steps_codec);
      if (Nonctrl != false) {
        size += 1 + 1;
      }
      if (CutsceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CutsceneName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StoryPoint other) {
      if (other == null) {
        return;
      }
      steps_.Add(other.steps_);
      if (other.Nonctrl != false) {
        Nonctrl = other.Nonctrl;
      }
      if (other.CutsceneName.Length != 0) {
        CutsceneName = other.CutsceneName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 16: {
            Nonctrl = input.ReadBool();
            break;
          }
          case 26: {
            CutsceneName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            steps_.AddEntriesFrom(ref input, _repeated_steps_codec);
            break;
          }
          case 16: {
            Nonctrl = input.ReadBool();
            break;
          }
          case 26: {
            CutsceneName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelStory : pb::IMessage<LevelStory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelStory> _parser = new pb::MessageParser<LevelStory>(() => new LevelStory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LevelStory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LevelStory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LevelStory(LevelStory other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LevelStory Clone() {
      return new LevelStory(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::shared.StoryPoint>.Codec _map_points_codec
        = new pbc::MapField<int, global::shared.StoryPoint>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::shared.StoryPoint.Parser), 10);
    private readonly pbc::MapField<int, global::shared.StoryPoint> points_ = new pbc::MapField<int, global::shared.StoryPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::shared.StoryPoint> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LevelStory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LevelStory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Points.Equals(other.Points)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      points_.WriteTo(output, _map_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      points_.WriteTo(ref output, _map_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_map_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LevelStory other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _map_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            points_.AddEntriesFrom(ref input, _map_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializableConvexPolygon : pb::IMessage<SerializableConvexPolygon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializableConvexPolygon> _parser = new pb::MessageParser<SerializableConvexPolygon>(() => new SerializableConvexPolygon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializableConvexPolygon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializableConvexPolygon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializableConvexPolygon(SerializableConvexPolygon other) : this() {
      anchorX_ = other.anchorX_;
      anchorY_ = other.anchorY_;
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializableConvexPolygon Clone() {
      return new SerializableConvexPolygon(this);
    }

    /// <summary>Field number for the "anchorX" field.</summary>
    public const int AnchorXFieldNumber = 1;
    private float anchorX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AnchorX {
      get { return anchorX_; }
      set {
        anchorX_ = value;
      }
    }

    /// <summary>Field number for the "anchorY" field.</summary>
    public const int AnchorYFieldNumber = 2;
    private float anchorY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AnchorY {
      get { return anchorY_; }
      set {
        anchorY_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_points_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializableConvexPolygon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializableConvexPolygon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnchorX, other.AnchorX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AnchorY, other.AnchorY)) return false;
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AnchorX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnchorX);
      if (AnchorY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AnchorY);
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnchorX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AnchorX);
      }
      if (AnchorY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AnchorY);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnchorX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AnchorX);
      }
      if (AnchorY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AnchorY);
      }
      points_.WriteTo(ref output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AnchorX != 0F) {
        size += 1 + 4;
      }
      if (AnchorY != 0F) {
        size += 1 + 4;
      }
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializableConvexPolygon other) {
      if (other == null) {
        return;
      }
      if (other.AnchorX != 0F) {
        AnchorX = other.AnchorX;
      }
      if (other.AnchorY != 0F) {
        AnchorY = other.AnchorY;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AnchorX = input.ReadFloat();
            break;
          }
          case 21: {
            AnchorY = input.ReadFloat();
            break;
          }
          case 26:
          case 29: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            AnchorX = input.ReadFloat();
            break;
          }
          case 21: {
            AnchorY = input.ReadFloat();
            break;
          }
          case 26:
          case 29: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializedCompletelyStaticPatrolCueCollider : pb::IMessage<SerializedCompletelyStaticPatrolCueCollider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider>(() => new SerializedCompletelyStaticPatrolCueCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializedCompletelyStaticPatrolCueCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticPatrolCueCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticPatrolCueCollider(SerializedCompletelyStaticPatrolCueCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticPatrolCueCollider Clone() {
      return new SerializedCompletelyStaticPatrolCueCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::shared.PatrolCue attr_;
    /// <summary>
    /// "collisionTypeMask" is contained here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PatrolCue Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::shared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticPatrolCueCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializedCompletelyStaticPatrolCueCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializedCompletelyStaticPatrolCueCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::shared.PatrolCue();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::shared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.PatrolCue();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.PatrolCue();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializedCompletelyStaticTrapCollider : pb::IMessage<SerializedCompletelyStaticTrapCollider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializedCompletelyStaticTrapCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticTrapCollider>(() => new SerializedCompletelyStaticTrapCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializedCompletelyStaticTrapCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTrapCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTrapCollider(SerializedCompletelyStaticTrapCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTrapCollider Clone() {
      return new SerializedCompletelyStaticTrapCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::shared.TrapColliderAttr attr_;
    /// <summary>
    /// "TrapColliderAttr.collisionTypeMask" is a little peculiar, it can be a composite of different COLLISION_*_INDEX_PREFIX, thus often NOT taken care of by the COLLIDABLE_PAIRS set 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TrapColliderAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::shared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticTrapCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializedCompletelyStaticTrapCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializedCompletelyStaticTrapCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::shared.TrapColliderAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::shared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.TrapColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.TrapColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializedCompletelyStaticTriggerCollider : pb::IMessage<SerializedCompletelyStaticTriggerCollider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializedCompletelyStaticTriggerCollider> _parser = new pb::MessageParser<SerializedCompletelyStaticTriggerCollider>(() => new SerializedCompletelyStaticTriggerCollider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializedCompletelyStaticTriggerCollider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTriggerCollider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTriggerCollider(SerializedCompletelyStaticTriggerCollider other) : this() {
      attr_ = other.attr_ != null ? other.attr_.Clone() : null;
      polygon_ = other.polygon_ != null ? other.polygon_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedCompletelyStaticTriggerCollider Clone() {
      return new SerializedCompletelyStaticTriggerCollider(this);
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 1;
    private global::shared.TriggerColliderAttr attr_;
    /// <summary>
    /// "collisionTypeMask" can be derived from here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerColliderAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "polygon" field.</summary>
    public const int PolygonFieldNumber = 2;
    private global::shared.SerializableConvexPolygon polygon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.SerializableConvexPolygon Polygon {
      get { return polygon_; }
      set {
        polygon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializedCompletelyStaticTriggerCollider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializedCompletelyStaticTriggerCollider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Attr, other.Attr)) return false;
      if (!object.Equals(Polygon, other.Polygon)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (attr_ != null) hash ^= Attr.GetHashCode();
      if (polygon_ != null) hash ^= Polygon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (attr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Attr);
      }
      if (polygon_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Polygon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      if (polygon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Polygon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializedCompletelyStaticTriggerCollider other) {
      if (other == null) {
        return;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          Attr = new global::shared.TriggerColliderAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      if (other.polygon_ != null) {
        if (polygon_ == null) {
          Polygon = new global::shared.SerializableConvexPolygon();
        }
        Polygon.MergeFrom(other.Polygon);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.TriggerColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (attr_ == null) {
              Attr = new global::shared.TriggerColliderAttr();
            }
            input.ReadMessage(Attr);
            break;
          }
          case 18: {
            if (polygon_ == null) {
              Polygon = new global::shared.SerializableConvexPolygon();
            }
            input.ReadMessage(Polygon);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrapColliderAttrArray : pb::IMessage<TrapColliderAttrArray>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrapColliderAttrArray> _parser = new pb::MessageParser<TrapColliderAttrArray>(() => new TrapColliderAttrArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrapColliderAttrArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttrArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttrArray(TrapColliderAttrArray other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrapColliderAttrArray Clone() {
      return new TrapColliderAttrArray(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::shared.TrapColliderAttr> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::shared.TrapColliderAttr.Parser);
    private readonly pbc::RepeatedField<global::shared.TrapColliderAttr> list_ = new pbc::RepeatedField<global::shared.TrapColliderAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.TrapColliderAttr> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrapColliderAttrArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrapColliderAttrArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      list_.WriteTo(ref output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrapColliderAttrArray other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            list_.AddEntriesFrom(ref input, _repeated_list_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializedTrapLocalIdToColliderAttrs : pb::IMessage<SerializedTrapLocalIdToColliderAttrs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializedTrapLocalIdToColliderAttrs> _parser = new pb::MessageParser<SerializedTrapLocalIdToColliderAttrs>(() => new SerializedTrapLocalIdToColliderAttrs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializedTrapLocalIdToColliderAttrs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTrapLocalIdToColliderAttrs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTrapLocalIdToColliderAttrs(SerializedTrapLocalIdToColliderAttrs other) : this() {
      dict_ = other.dict_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTrapLocalIdToColliderAttrs Clone() {
      return new SerializedTrapLocalIdToColliderAttrs(this);
    }

    /// <summary>Field number for the "dict" field.</summary>
    public const int DictFieldNumber = 1;
    private static readonly pbc::MapField<int, global::shared.TrapColliderAttrArray>.Codec _map_dict_codec
        = new pbc::MapField<int, global::shared.TrapColliderAttrArray>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::shared.TrapColliderAttrArray.Parser), 10);
    private readonly pbc::MapField<int, global::shared.TrapColliderAttrArray> dict_ = new pbc::MapField<int, global::shared.TrapColliderAttrArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::shared.TrapColliderAttrArray> Dict {
      get { return dict_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializedTrapLocalIdToColliderAttrs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializedTrapLocalIdToColliderAttrs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Dict.Equals(other.Dict)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Dict.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dict_.WriteTo(output, _map_dict_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dict_.WriteTo(ref output, _map_dict_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dict_.CalculateSize(_map_dict_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializedTrapLocalIdToColliderAttrs other) {
      if (other == null) {
        return;
      }
      dict_.Add(other.dict_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dict_.AddEntriesFrom(input, _map_dict_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dict_.AddEntriesFrom(ref input, _map_dict_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SerializedTriggerEditorIdToLocalId : pb::IMessage<SerializedTriggerEditorIdToLocalId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SerializedTriggerEditorIdToLocalId> _parser = new pb::MessageParser<SerializedTriggerEditorIdToLocalId>(() => new SerializedTriggerEditorIdToLocalId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SerializedTriggerEditorIdToLocalId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTriggerEditorIdToLocalId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTriggerEditorIdToLocalId(SerializedTriggerEditorIdToLocalId other) : this() {
      dict_ = other.dict_.Clone();
      dict2_ = other.dict2_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SerializedTriggerEditorIdToLocalId Clone() {
      return new SerializedTriggerEditorIdToLocalId(this);
    }

    /// <summary>Field number for the "dict" field.</summary>
    public const int DictFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_dict_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<int, int> dict_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, int> Dict {
      get { return dict_; }
    }

    /// <summary>Field number for the "dict2" field.</summary>
    public const int Dict2FieldNumber = 2;
    private static readonly pbc::MapField<int, global::shared.TriggerConfigFromTiled>.Codec _map_dict2_codec
        = new pbc::MapField<int, global::shared.TriggerConfigFromTiled>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::shared.TriggerConfigFromTiled.Parser), 18);
    private readonly pbc::MapField<int, global::shared.TriggerConfigFromTiled> dict2_ = new pbc::MapField<int, global::shared.TriggerConfigFromTiled>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::shared.TriggerConfigFromTiled> Dict2 {
      get { return dict2_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SerializedTriggerEditorIdToLocalId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SerializedTriggerEditorIdToLocalId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Dict.Equals(other.Dict)) return false;
      if (!Dict2.Equals(other.Dict2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Dict.GetHashCode();
      hash ^= Dict2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dict_.WriteTo(output, _map_dict_codec);
      dict2_.WriteTo(output, _map_dict2_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dict_.WriteTo(ref output, _map_dict_codec);
      dict2_.WriteTo(ref output, _map_dict2_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dict_.CalculateSize(_map_dict_codec);
      size += dict2_.CalculateSize(_map_dict2_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SerializedTriggerEditorIdToLocalId other) {
      if (other == null) {
        return;
      }
      dict_.Add(other.dict_);
      dict2_.Add(other.dict2_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dict_.AddEntriesFrom(input, _map_dict_codec);
            break;
          }
          case 18: {
            dict2_.AddEntriesFrom(input, _map_dict2_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dict_.AddEntriesFrom(ref input, _map_dict_codec);
            break;
          }
          case 18: {
            dict2_.AddEntriesFrom(ref input, _map_dict2_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickableConfigFromTiled : pb::IMessage<PickableConfigFromTiled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickableConfigFromTiled> _parser = new pb::MessageParser<PickableConfigFromTiled>(() => new PickableConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PickableConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableConfigFromTiled(PickableConfigFromTiled other) : this() {
      initVirtualGridX_ = other.initVirtualGridX_;
      initVirtualGridY_ = other.initVirtualGridY_;
      takesGravity_ = other.takesGravity_;
      firstShowRdfId_ = other.firstShowRdfId_;
      recurQuota_ = other.recurQuota_;
      recurIntervalRdfCount_ = other.recurIntervalRdfCount_;
      lifetimeRdfCountPerOccurrence_ = other.lifetimeRdfCountPerOccurrence_;
      pickupType_ = other.pickupType_;
      stockQuotaPerOccurrence_ = other.stockQuotaPerOccurrence_;
      subscriptionId_ = other.subscriptionId_;
      vfxSpeciesId_ = other.vfxSpeciesId_;
      consumableSpeciesId_ = other.consumableSpeciesId_;
      buffSpeciesId_ = other.buffSpeciesId_;
      skillId_ = other.skillId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableConfigFromTiled Clone() {
      return new PickableConfigFromTiled(this);
    }

    /// <summary>Field number for the "initVirtualGridX" field.</summary>
    public const int InitVirtualGridXFieldNumber = 1;
    private int initVirtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitVirtualGridX {
      get { return initVirtualGridX_; }
      set {
        initVirtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "initVirtualGridY" field.</summary>
    public const int InitVirtualGridYFieldNumber = 2;
    private int initVirtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitVirtualGridY {
      get { return initVirtualGridY_; }
      set {
        initVirtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "takesGravity" field.</summary>
    public const int TakesGravityFieldNumber = 3;
    private bool takesGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TakesGravity {
      get { return takesGravity_; }
      set {
        takesGravity_ = value;
      }
    }

    /// <summary>Field number for the "firstShowRdfId" field.</summary>
    public const int FirstShowRdfIdFieldNumber = 4;
    private int firstShowRdfId_;
    /// <summary>
    /// If "MAGIC_EVTSUB_ID_NONE != subscriptionId", then this field represents the "firstShowRdfId" after subscriptionId is fulfilled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirstShowRdfId {
      get { return firstShowRdfId_; }
      set {
        firstShowRdfId_ = value;
      }
    }

    /// <summary>Field number for the "recurQuota" field.</summary>
    public const int RecurQuotaFieldNumber = 5;
    private int recurQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecurQuota {
      get { return recurQuota_; }
      set {
        recurQuota_ = value;
      }
    }

    /// <summary>Field number for the "recurIntervalRdfCount" field.</summary>
    public const int RecurIntervalRdfCountFieldNumber = 6;
    private uint recurIntervalRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RecurIntervalRdfCount {
      get { return recurIntervalRdfCount_; }
      set {
        recurIntervalRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "lifetimeRdfCountPerOccurrence" field.</summary>
    public const int LifetimeRdfCountPerOccurrenceFieldNumber = 7;
    private uint lifetimeRdfCountPerOccurrence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LifetimeRdfCountPerOccurrence {
      get { return lifetimeRdfCountPerOccurrence_; }
      set {
        lifetimeRdfCountPerOccurrence_ = value;
      }
    }

    /// <summary>Field number for the "pickupType" field.</summary>
    public const int PickupTypeFieldNumber = 8;
    private global::shared.PickupType pickupType_ = global::shared.PickupType.Immediate;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PickupType PickupType {
      get { return pickupType_; }
      set {
        pickupType_ = value;
      }
    }

    /// <summary>Field number for the "stockQuotaPerOccurrence" field.</summary>
    public const int StockQuotaPerOccurrenceFieldNumber = 9;
    private uint stockQuotaPerOccurrence_;
    /// <summary>
    /// Only meaningful when "pickupType == PutIntoInventory"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StockQuotaPerOccurrence {
      get { return stockQuotaPerOccurrence_; }
      set {
        stockQuotaPerOccurrence_ = value;
      }
    }

    /// <summary>Field number for the "subscriptionId" field.</summary>
    public const int SubscriptionIdFieldNumber = 10;
    private int subscriptionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = value;
      }
    }

    /// <summary>Field number for the "vfxSpeciesId" field.</summary>
    public const int VfxSpeciesIdFieldNumber = 11;
    private int vfxSpeciesId_;
    /// <summary>
    /// Always use pixelated vfx
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VfxSpeciesId {
      get { return vfxSpeciesId_; }
      set {
        vfxSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "consumableSpeciesId" field.</summary>
    public const int ConsumableSpeciesIdFieldNumber = 1024;
    private uint consumableSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ConsumableSpeciesId {
      get { return consumableSpeciesId_; }
      set {
        consumableSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "buffSpeciesId" field.</summary>
    public const int BuffSpeciesIdFieldNumber = 1025;
    private uint buffSpeciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BuffSpeciesId {
      get { return buffSpeciesId_; }
      set {
        buffSpeciesId_ = value;
      }
    }

    /// <summary>Field number for the "skillId" field.</summary>
    public const int SkillIdFieldNumber = 1026;
    private uint skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PickableConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PickableConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InitVirtualGridX != other.InitVirtualGridX) return false;
      if (InitVirtualGridY != other.InitVirtualGridY) return false;
      if (TakesGravity != other.TakesGravity) return false;
      if (FirstShowRdfId != other.FirstShowRdfId) return false;
      if (RecurQuota != other.RecurQuota) return false;
      if (RecurIntervalRdfCount != other.RecurIntervalRdfCount) return false;
      if (LifetimeRdfCountPerOccurrence != other.LifetimeRdfCountPerOccurrence) return false;
      if (PickupType != other.PickupType) return false;
      if (StockQuotaPerOccurrence != other.StockQuotaPerOccurrence) return false;
      if (SubscriptionId != other.SubscriptionId) return false;
      if (VfxSpeciesId != other.VfxSpeciesId) return false;
      if (ConsumableSpeciesId != other.ConsumableSpeciesId) return false;
      if (BuffSpeciesId != other.BuffSpeciesId) return false;
      if (SkillId != other.SkillId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InitVirtualGridX != 0) hash ^= InitVirtualGridX.GetHashCode();
      if (InitVirtualGridY != 0) hash ^= InitVirtualGridY.GetHashCode();
      if (TakesGravity != false) hash ^= TakesGravity.GetHashCode();
      if (FirstShowRdfId != 0) hash ^= FirstShowRdfId.GetHashCode();
      if (RecurQuota != 0) hash ^= RecurQuota.GetHashCode();
      if (RecurIntervalRdfCount != 0) hash ^= RecurIntervalRdfCount.GetHashCode();
      if (LifetimeRdfCountPerOccurrence != 0) hash ^= LifetimeRdfCountPerOccurrence.GetHashCode();
      if (PickupType != global::shared.PickupType.Immediate) hash ^= PickupType.GetHashCode();
      if (StockQuotaPerOccurrence != 0) hash ^= StockQuotaPerOccurrence.GetHashCode();
      if (SubscriptionId != 0) hash ^= SubscriptionId.GetHashCode();
      if (VfxSpeciesId != 0) hash ^= VfxSpeciesId.GetHashCode();
      if (ConsumableSpeciesId != 0) hash ^= ConsumableSpeciesId.GetHashCode();
      if (BuffSpeciesId != 0) hash ^= BuffSpeciesId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InitVirtualGridX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitVirtualGridX);
      }
      if (InitVirtualGridY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InitVirtualGridY);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(24);
        output.WriteBool(TakesGravity);
      }
      if (FirstShowRdfId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstShowRdfId);
      }
      if (RecurQuota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RecurQuota);
      }
      if (RecurIntervalRdfCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RecurIntervalRdfCount);
      }
      if (LifetimeRdfCountPerOccurrence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LifetimeRdfCountPerOccurrence);
      }
      if (PickupType != global::shared.PickupType.Immediate) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PickupType);
      }
      if (StockQuotaPerOccurrence != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(StockQuotaPerOccurrence);
      }
      if (SubscriptionId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SubscriptionId);
      }
      if (VfxSpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VfxSpeciesId);
      }
      if (ConsumableSpeciesId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(ConsumableSpeciesId);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(144, 64);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InitVirtualGridX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InitVirtualGridX);
      }
      if (InitVirtualGridY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InitVirtualGridY);
      }
      if (TakesGravity != false) {
        output.WriteRawTag(24);
        output.WriteBool(TakesGravity);
      }
      if (FirstShowRdfId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstShowRdfId);
      }
      if (RecurQuota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RecurQuota);
      }
      if (RecurIntervalRdfCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RecurIntervalRdfCount);
      }
      if (LifetimeRdfCountPerOccurrence != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LifetimeRdfCountPerOccurrence);
      }
      if (PickupType != global::shared.PickupType.Immediate) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PickupType);
      }
      if (StockQuotaPerOccurrence != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(StockQuotaPerOccurrence);
      }
      if (SubscriptionId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SubscriptionId);
      }
      if (VfxSpeciesId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(VfxSpeciesId);
      }
      if (ConsumableSpeciesId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteUInt32(ConsumableSpeciesId);
      }
      if (BuffSpeciesId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteUInt32(BuffSpeciesId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(144, 64);
        output.WriteUInt32(SkillId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InitVirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVirtualGridX);
      }
      if (InitVirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitVirtualGridY);
      }
      if (TakesGravity != false) {
        size += 1 + 1;
      }
      if (FirstShowRdfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstShowRdfId);
      }
      if (RecurQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecurQuota);
      }
      if (RecurIntervalRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecurIntervalRdfCount);
      }
      if (LifetimeRdfCountPerOccurrence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LifetimeRdfCountPerOccurrence);
      }
      if (PickupType != global::shared.PickupType.Immediate) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PickupType);
      }
      if (StockQuotaPerOccurrence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StockQuotaPerOccurrence);
      }
      if (SubscriptionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriptionId);
      }
      if (VfxSpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VfxSpeciesId);
      }
      if (ConsumableSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConsumableSpeciesId);
      }
      if (BuffSpeciesId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BuffSpeciesId);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SkillId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PickableConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.InitVirtualGridX != 0) {
        InitVirtualGridX = other.InitVirtualGridX;
      }
      if (other.InitVirtualGridY != 0) {
        InitVirtualGridY = other.InitVirtualGridY;
      }
      if (other.TakesGravity != false) {
        TakesGravity = other.TakesGravity;
      }
      if (other.FirstShowRdfId != 0) {
        FirstShowRdfId = other.FirstShowRdfId;
      }
      if (other.RecurQuota != 0) {
        RecurQuota = other.RecurQuota;
      }
      if (other.RecurIntervalRdfCount != 0) {
        RecurIntervalRdfCount = other.RecurIntervalRdfCount;
      }
      if (other.LifetimeRdfCountPerOccurrence != 0) {
        LifetimeRdfCountPerOccurrence = other.LifetimeRdfCountPerOccurrence;
      }
      if (other.PickupType != global::shared.PickupType.Immediate) {
        PickupType = other.PickupType;
      }
      if (other.StockQuotaPerOccurrence != 0) {
        StockQuotaPerOccurrence = other.StockQuotaPerOccurrence;
      }
      if (other.SubscriptionId != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      if (other.VfxSpeciesId != 0) {
        VfxSpeciesId = other.VfxSpeciesId;
      }
      if (other.ConsumableSpeciesId != 0) {
        ConsumableSpeciesId = other.ConsumableSpeciesId;
      }
      if (other.BuffSpeciesId != 0) {
        BuffSpeciesId = other.BuffSpeciesId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InitVirtualGridX = input.ReadInt32();
            break;
          }
          case 16: {
            InitVirtualGridY = input.ReadInt32();
            break;
          }
          case 24: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 32: {
            FirstShowRdfId = input.ReadInt32();
            break;
          }
          case 40: {
            RecurQuota = input.ReadInt32();
            break;
          }
          case 48: {
            RecurIntervalRdfCount = input.ReadUInt32();
            break;
          }
          case 56: {
            LifetimeRdfCountPerOccurrence = input.ReadUInt32();
            break;
          }
          case 64: {
            PickupType = (global::shared.PickupType) input.ReadEnum();
            break;
          }
          case 72: {
            StockQuotaPerOccurrence = input.ReadUInt32();
            break;
          }
          case 80: {
            SubscriptionId = input.ReadInt32();
            break;
          }
          case 88: {
            VfxSpeciesId = input.ReadInt32();
            break;
          }
          case 8192: {
            ConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 8200: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 8208: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InitVirtualGridX = input.ReadInt32();
            break;
          }
          case 16: {
            InitVirtualGridY = input.ReadInt32();
            break;
          }
          case 24: {
            TakesGravity = input.ReadBool();
            break;
          }
          case 32: {
            FirstShowRdfId = input.ReadInt32();
            break;
          }
          case 40: {
            RecurQuota = input.ReadInt32();
            break;
          }
          case 48: {
            RecurIntervalRdfCount = input.ReadUInt32();
            break;
          }
          case 56: {
            LifetimeRdfCountPerOccurrence = input.ReadUInt32();
            break;
          }
          case 64: {
            PickupType = (global::shared.PickupType) input.ReadEnum();
            break;
          }
          case 72: {
            StockQuotaPerOccurrence = input.ReadUInt32();
            break;
          }
          case 80: {
            SubscriptionId = input.ReadInt32();
            break;
          }
          case 88: {
            VfxSpeciesId = input.ReadInt32();
            break;
          }
          case 8192: {
            ConsumableSpeciesId = input.ReadUInt32();
            break;
          }
          case 8200: {
            BuffSpeciesId = input.ReadUInt32();
            break;
          }
          case 8208: {
            SkillId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Pickable : pb::IMessage<Pickable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pickable> _parser = new pb::MessageParser<Pickable>(() => new Pickable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Pickable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Pickable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Pickable(Pickable other) : this() {
      pickableLocalId_ = other.pickableLocalId_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      configFromTiled_ = other.configFromTiled_ != null ? other.configFromTiled_.Clone() : null;
      remainingLifetimeRdfCount_ = other.remainingLifetimeRdfCount_;
      remainingRecurQuota_ = other.remainingRecurQuota_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      pkState_ = other.pkState_;
      framesInPkState_ = other.framesInPkState_;
      pickedByJoinIndex_ = other.pickedByJoinIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Pickable Clone() {
      return new Pickable(this);
    }

    /// <summary>Field number for the "pickableLocalId" field.</summary>
    public const int PickableLocalIdFieldNumber = 1;
    private int pickableLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PickableLocalId {
      get { return pickableLocalId_; }
      set {
        pickableLocalId_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 2;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 3;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "configFromTiled" field.</summary>
    public const int ConfigFromTiledFieldNumber = 4;
    private global::shared.PickableConfigFromTiled configFromTiled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PickableConfigFromTiled ConfigFromTiled {
      get { return configFromTiled_; }
      set {
        configFromTiled_ = value;
      }
    }

    /// <summary>Field number for the "remainingLifetimeRdfCount" field.</summary>
    public const int RemainingLifetimeRdfCountFieldNumber = 5;
    private int remainingLifetimeRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemainingLifetimeRdfCount {
      get { return remainingLifetimeRdfCount_; }
      set {
        remainingLifetimeRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "remainingRecurQuota" field.</summary>
    public const int RemainingRecurQuotaFieldNumber = 6;
    private int remainingRecurQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemainingRecurQuota {
      get { return remainingRecurQuota_; }
      set {
        remainingRecurQuota_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 7;
    private int velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 8;
    private int velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "pkState" field.</summary>
    public const int PkStateFieldNumber = 9;
    private global::shared.PickableState pkState_ = global::shared.PickableState.Pidle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.PickableState PkState {
      get { return pkState_; }
      set {
        pkState_ = value;
      }
    }

    /// <summary>Field number for the "framesInPkState" field.</summary>
    public const int FramesInPkStateFieldNumber = 10;
    private int framesInPkState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInPkState {
      get { return framesInPkState_; }
      set {
        framesInPkState_ = value;
      }
    }

    /// <summary>Field number for the "pickedByJoinIndex" field.</summary>
    public const int PickedByJoinIndexFieldNumber = 11;
    private int pickedByJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PickedByJoinIndex {
      get { return pickedByJoinIndex_; }
      set {
        pickedByJoinIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Pickable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Pickable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PickableLocalId != other.PickableLocalId) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (!object.Equals(ConfigFromTiled, other.ConfigFromTiled)) return false;
      if (RemainingLifetimeRdfCount != other.RemainingLifetimeRdfCount) return false;
      if (RemainingRecurQuota != other.RemainingRecurQuota) return false;
      if (VelX != other.VelX) return false;
      if (VelY != other.VelY) return false;
      if (PkState != other.PkState) return false;
      if (FramesInPkState != other.FramesInPkState) return false;
      if (PickedByJoinIndex != other.PickedByJoinIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PickableLocalId != 0) hash ^= PickableLocalId.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (configFromTiled_ != null) hash ^= ConfigFromTiled.GetHashCode();
      if (RemainingLifetimeRdfCount != 0) hash ^= RemainingLifetimeRdfCount.GetHashCode();
      if (RemainingRecurQuota != 0) hash ^= RemainingRecurQuota.GetHashCode();
      if (VelX != 0) hash ^= VelX.GetHashCode();
      if (VelY != 0) hash ^= VelY.GetHashCode();
      if (PkState != global::shared.PickableState.Pidle) hash ^= PkState.GetHashCode();
      if (FramesInPkState != 0) hash ^= FramesInPkState.GetHashCode();
      if (PickedByJoinIndex != 0) hash ^= PickedByJoinIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PickableLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PickableLocalId);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfigFromTiled);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (RemainingRecurQuota != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RemainingRecurQuota);
      }
      if (VelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VelY);
      }
      if (PkState != global::shared.PickableState.Pidle) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PkState);
      }
      if (FramesInPkState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesInPkState);
      }
      if (PickedByJoinIndex != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PickedByJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PickableLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PickableLocalId);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VirtualGridY);
      }
      if (configFromTiled_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfigFromTiled);
      }
      if (RemainingLifetimeRdfCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainingLifetimeRdfCount);
      }
      if (RemainingRecurQuota != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RemainingRecurQuota);
      }
      if (VelX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VelX);
      }
      if (VelY != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VelY);
      }
      if (PkState != global::shared.PickableState.Pidle) {
        output.WriteRawTag(72);
        output.WriteEnum((int) PkState);
      }
      if (FramesInPkState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FramesInPkState);
      }
      if (PickedByJoinIndex != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PickedByJoinIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PickableLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PickableLocalId);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (configFromTiled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigFromTiled);
      }
      if (RemainingLifetimeRdfCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingLifetimeRdfCount);
      }
      if (RemainingRecurQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingRecurQuota);
      }
      if (VelX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelX);
      }
      if (VelY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VelY);
      }
      if (PkState != global::shared.PickableState.Pidle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkState);
      }
      if (FramesInPkState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInPkState);
      }
      if (PickedByJoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PickedByJoinIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Pickable other) {
      if (other == null) {
        return;
      }
      if (other.PickableLocalId != 0) {
        PickableLocalId = other.PickableLocalId;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.configFromTiled_ != null) {
        if (configFromTiled_ == null) {
          ConfigFromTiled = new global::shared.PickableConfigFromTiled();
        }
        ConfigFromTiled.MergeFrom(other.ConfigFromTiled);
      }
      if (other.RemainingLifetimeRdfCount != 0) {
        RemainingLifetimeRdfCount = other.RemainingLifetimeRdfCount;
      }
      if (other.RemainingRecurQuota != 0) {
        RemainingRecurQuota = other.RemainingRecurQuota;
      }
      if (other.VelX != 0) {
        VelX = other.VelX;
      }
      if (other.VelY != 0) {
        VelY = other.VelY;
      }
      if (other.PkState != global::shared.PickableState.Pidle) {
        PkState = other.PkState;
      }
      if (other.FramesInPkState != 0) {
        FramesInPkState = other.FramesInPkState;
      }
      if (other.PickedByJoinIndex != 0) {
        PickedByJoinIndex = other.PickedByJoinIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PickableLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 34: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.PickableConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 40: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
          case 48: {
            RemainingRecurQuota = input.ReadInt32();
            break;
          }
          case 56: {
            VelX = input.ReadInt32();
            break;
          }
          case 64: {
            VelY = input.ReadInt32();
            break;
          }
          case 72: {
            PkState = (global::shared.PickableState) input.ReadEnum();
            break;
          }
          case 80: {
            FramesInPkState = input.ReadInt32();
            break;
          }
          case 88: {
            PickedByJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PickableLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 24: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 34: {
            if (configFromTiled_ == null) {
              ConfigFromTiled = new global::shared.PickableConfigFromTiled();
            }
            input.ReadMessage(ConfigFromTiled);
            break;
          }
          case 40: {
            RemainingLifetimeRdfCount = input.ReadInt32();
            break;
          }
          case 48: {
            RemainingRecurQuota = input.ReadInt32();
            break;
          }
          case 56: {
            VelX = input.ReadInt32();
            break;
          }
          case 64: {
            VelY = input.ReadInt32();
            break;
          }
          case 72: {
            PkState = (global::shared.PickableState) input.ReadEnum();
            break;
          }
          case 80: {
            FramesInPkState = input.ReadInt32();
            break;
          }
          case 88: {
            PickedByJoinIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CharacterSpawnerConfig : pb::IMessage<CharacterSpawnerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CharacterSpawnerConfig> _parser = new pb::MessageParser<CharacterSpawnerConfig>(() => new CharacterSpawnerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CharacterSpawnerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig(CharacterSpawnerConfig other) : this() {
      cutoffRdfFrameId_ = other.cutoffRdfFrameId_;
      speciesIdList_ = other.speciesIdList_.Clone();
      initOpList_ = other.initOpList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CharacterSpawnerConfig Clone() {
      return new CharacterSpawnerConfig(this);
    }

    /// <summary>Field number for the "cutoffRdfFrameId" field.</summary>
    public const int CutoffRdfFrameIdFieldNumber = 1;
    private int cutoffRdfFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CutoffRdfFrameId {
      get { return cutoffRdfFrameId_; }
      set {
        cutoffRdfFrameId_ = value;
      }
    }

    /// <summary>Field number for the "speciesIdList" field.</summary>
    public const int SpeciesIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> speciesIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// the k-th subcycle tick corresponds to speciesIdList[k]   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "initOpList" field.</summary>
    public const int InitOpListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_initOpList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> initOpList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> InitOpList {
      get { return initOpList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CharacterSpawnerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CharacterSpawnerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfFrameId != other.CutoffRdfFrameId) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if(!initOpList_.Equals(other.initOpList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfFrameId != 0) hash ^= CutoffRdfFrameId.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      hash ^= initOpList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(output, _repeated_initOpList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(ref output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(ref output, _repeated_initOpList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfFrameId);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      size += initOpList_.CalculateSize(_repeated_initOpList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CharacterSpawnerConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfFrameId != 0) {
        CutoffRdfFrameId = other.CutoffRdfFrameId;
      }
      speciesIdList_.Add(other.speciesIdList_);
      initOpList_.Add(other.initOpList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(input, _repeated_initOpList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(ref input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(ref input, _repeated_initOpList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PickableSpawnerConfig : pb::IMessage<PickableSpawnerConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PickableSpawnerConfig> _parser = new pb::MessageParser<PickableSpawnerConfig>(() => new PickableSpawnerConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PickableSpawnerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSpawnerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSpawnerConfig(PickableSpawnerConfig other) : this() {
      cutoffRdfFrameId_ = other.cutoffRdfFrameId_;
      speciesIdList_ = other.speciesIdList_.Clone();
      initOpList_ = other.initOpList_.Clone();
      pickupTypeList_ = other.pickupTypeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PickableSpawnerConfig Clone() {
      return new PickableSpawnerConfig(this);
    }

    /// <summary>Field number for the "cutoffRdfFrameId" field.</summary>
    public const int CutoffRdfFrameIdFieldNumber = 1;
    private int cutoffRdfFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CutoffRdfFrameId {
      get { return cutoffRdfFrameId_; }
      set {
        cutoffRdfFrameId_ = value;
      }
    }

    /// <summary>Field number for the "speciesIdList" field.</summary>
    public const int SpeciesIdListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_speciesIdList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> speciesIdList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// the k-th subcycle tick corresponds to speciesIdList[k]   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> SpeciesIdList {
      get { return speciesIdList_; }
    }

    /// <summary>Field number for the "initOpList" field.</summary>
    public const int InitOpListFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_initOpList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> initOpList_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<ulong> InitOpList {
      get { return initOpList_; }
    }

    /// <summary>Field number for the "pickupTypeList" field.</summary>
    public const int PickupTypeListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::shared.PickupType> _repeated_pickupTypeList_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::shared.PickupType) x);
    private readonly pbc::RepeatedField<global::shared.PickupType> pickupTypeList_ = new pbc::RepeatedField<global::shared.PickupType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.PickupType> PickupTypeList {
      get { return pickupTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PickableSpawnerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PickableSpawnerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CutoffRdfFrameId != other.CutoffRdfFrameId) return false;
      if(!speciesIdList_.Equals(other.speciesIdList_)) return false;
      if(!initOpList_.Equals(other.initOpList_)) return false;
      if(!pickupTypeList_.Equals(other.pickupTypeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CutoffRdfFrameId != 0) hash ^= CutoffRdfFrameId.GetHashCode();
      hash ^= speciesIdList_.GetHashCode();
      hash ^= initOpList_.GetHashCode();
      hash ^= pickupTypeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(output, _repeated_initOpList_codec);
      pickupTypeList_.WriteTo(output, _repeated_pickupTypeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CutoffRdfFrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CutoffRdfFrameId);
      }
      speciesIdList_.WriteTo(ref output, _repeated_speciesIdList_codec);
      initOpList_.WriteTo(ref output, _repeated_initOpList_codec);
      pickupTypeList_.WriteTo(ref output, _repeated_pickupTypeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CutoffRdfFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CutoffRdfFrameId);
      }
      size += speciesIdList_.CalculateSize(_repeated_speciesIdList_codec);
      size += initOpList_.CalculateSize(_repeated_initOpList_codec);
      size += pickupTypeList_.CalculateSize(_repeated_pickupTypeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PickableSpawnerConfig other) {
      if (other == null) {
        return;
      }
      if (other.CutoffRdfFrameId != 0) {
        CutoffRdfFrameId = other.CutoffRdfFrameId;
      }
      speciesIdList_.Add(other.speciesIdList_);
      initOpList_.Add(other.initOpList_);
      pickupTypeList_.Add(other.pickupTypeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(input, _repeated_initOpList_codec);
            break;
          }
          case 34:
          case 32: {
            pickupTypeList_.AddEntriesFrom(input, _repeated_pickupTypeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CutoffRdfFrameId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            speciesIdList_.AddEntriesFrom(ref input, _repeated_speciesIdList_codec);
            break;
          }
          case 26:
          case 24: {
            initOpList_.AddEntriesFrom(ref input, _repeated_initOpList_codec);
            break;
          }
          case 34:
          case 32: {
            pickupTypeList_.AddEntriesFrom(ref input, _repeated_pickupTypeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerColliderAttr : pb::IMessage<TriggerColliderAttr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerColliderAttr> _parser = new pb::MessageParser<TriggerColliderAttr>(() => new TriggerColliderAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerColliderAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr(TriggerColliderAttr other) : this() {
      triggerLocalId_ = other.triggerLocalId_;
      speciesId_ = other.speciesId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerColliderAttr Clone() {
      return new TriggerColliderAttr(this);
    }

    /// <summary>Field number for the "triggerLocalId" field.</summary>
    public const int TriggerLocalIdFieldNumber = 1;
    private int triggerLocalId_;
    /// <summary>
    /// ref-back upon collision, most (actually by now ALL) triggers are static, we use this "TriggerColliderAttr.triggerLocalId" to save the need of dynamically inserting and deleting colliders of each trigger while still being able to be rollback-compatible for "trigger.framesToFire &amp; trigger.framesToRecover"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerLocalId {
      get { return triggerLocalId_; }
      set {
        triggerLocalId_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 2;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerColliderAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerColliderAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TriggerLocalId != other.TriggerLocalId) return false;
      if (SpeciesId != other.SpeciesId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TriggerLocalId != 0) hash ^= TriggerLocalId.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TriggerLocalId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TriggerLocalId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TriggerLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerLocalId);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerColliderAttr other) {
      if (other == null) {
        return;
      }
      if (other.TriggerLocalId != 0) {
        TriggerLocalId = other.TriggerLocalId;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerConfigFromTiled : pb::IMessage<TriggerConfigFromTiled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerConfigFromTiled> _parser = new pb::MessageParser<TriggerConfigFromTiled>(() => new TriggerConfigFromTiled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriggerConfigFromTiled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled(TriggerConfigFromTiled other) : this() {
      editorId_ = other.editorId_;
      speciesId_ = other.speciesId_;
      delayedFrames_ = other.delayedFrames_;
      recoveryFrames_ = other.recoveryFrames_;
      bulletTeamId_ = other.bulletTeamId_;
      subCycleTriggerFrames_ = other.subCycleTriggerFrames_;
      subCycleQuota_ = other.subCycleQuota_;
      quotaCap_ = other.quotaCap_;
      subscribesToIdList_ = other.subscribesToIdList_.Clone();
      subscribesToExhaustedIdList_ = other.subscribesToExhaustedIdList_.Clone();
      newRevivalX_ = other.newRevivalX_;
      newRevivalY_ = other.newRevivalY_;
      initDirX_ = other.initDirX_;
      initDirY_ = other.initDirY_;
      publishingEvtMaskUponExhausted_ = other.publishingEvtMaskUponExhausted_;
      characterSpawnerTimeSeq_ = other.characterSpawnerTimeSeq_.Clone();
      pickableSpawnerTimeSeq_ = other.pickableSpawnerTimeSeq_.Clone();
      forceCtrlRdfCount_ = other.forceCtrlRdfCount_;
      forceCtrlCmd_ = other.forceCtrlCmd_;
      reloadCollidersInNewPhase_ = other.reloadCollidersInNewPhase_;
      storyPointId_ = other.storyPointId_;
      bgmId_ = other.bgmId_;
      bossSpeciesSet_ = other.bossSpeciesSet_.Clone();
      isBossSavepoint_ = other.isBossSavepoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriggerConfigFromTiled Clone() {
      return new TriggerConfigFromTiled(this);
    }

    /// <summary>Field number for the "editorId" field.</summary>
    public const int EditorIdFieldNumber = 1;
    private int editorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EditorId {
      get { return editorId_; }
      set {
        editorId_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 2;
    private int speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "delayedFrames" field.</summary>
    public const int DelayedFramesFieldNumber = 3;
    private int delayedFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DelayedFrames {
      get { return delayedFrames_; }
      set {
        delayedFrames_ = value;
      }
    }

    /// <summary>Field number for the "recoveryFrames" field.</summary>
    public const int RecoveryFramesFieldNumber = 4;
    private int recoveryFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecoveryFrames {
      get { return recoveryFrames_; }
      set {
        recoveryFrames_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 5;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "subCycleTriggerFrames" field.</summary>
    public const int SubCycleTriggerFramesFieldNumber = 6;
    private int subCycleTriggerFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleTriggerFrames {
      get { return subCycleTriggerFrames_; }
      set {
        subCycleTriggerFrames_ = value;
      }
    }

    /// <summary>Field number for the "subCycleQuota" field.</summary>
    public const int SubCycleQuotaFieldNumber = 7;
    private int subCycleQuota_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleQuota {
      get { return subCycleQuota_; }
      set {
        subCycleQuota_ = value;
      }
    }

    /// <summary>Field number for the "quotaCap" field.</summary>
    public const int QuotaCapFieldNumber = 8;
    private int quotaCap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int QuotaCap {
      get { return quotaCap_; }
      set {
        quotaCap_ = value;
      }
    }

    /// <summary>Field number for the "subscribesToIdList" field.</summary>
    public const int SubscribesToIdListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_subscribesToIdList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> subscribesToIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SubscribesToIdList {
      get { return subscribesToIdList_; }
    }

    /// <summary>Field number for the "subscribesToExhaustedIdList" field.</summary>
    public const int SubscribesToExhaustedIdListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_subscribesToExhaustedIdList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> subscribesToExhaustedIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SubscribesToExhaustedIdList {
      get { return subscribesToExhaustedIdList_; }
    }

    /// <summary>Field number for the "newRevivalX" field.</summary>
    public const int NewRevivalXFieldNumber = 11;
    private int newRevivalX_;
    /// <summary>
    /// [WARNING] In virtual grid coordinates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NewRevivalX {
      get { return newRevivalX_; }
      set {
        newRevivalX_ = value;
      }
    }

    /// <summary>Field number for the "newRevivalY" field.</summary>
    public const int NewRevivalYFieldNumber = 12;
    private int newRevivalY_;
    /// <summary>
    /// [WARNING] In virtual grid coordinates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NewRevivalY {
      get { return newRevivalY_; }
      set {
        newRevivalY_ = value;
      }
    }

    /// <summary>Field number for the "initDirX" field.</summary>
    public const int InitDirXFieldNumber = 13;
    private int initDirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitDirX {
      get { return initDirX_; }
      set {
        initDirX_ = value;
      }
    }

    /// <summary>Field number for the "initDirY" field.</summary>
    public const int InitDirYFieldNumber = 14;
    private int initDirY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InitDirY {
      get { return initDirY_; }
      set {
        initDirY_ = value;
      }
    }

    /// <summary>Field number for the "publishingEvtMaskUponExhausted" field.</summary>
    public const int PublishingEvtMaskUponExhaustedFieldNumber = 15;
    private ulong publishingEvtMaskUponExhausted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PublishingEvtMaskUponExhausted {
      get { return publishingEvtMaskUponExhausted_; }
      set {
        publishingEvtMaskUponExhausted_ = value;
      }
    }

    /// <summary>Field number for the "characterSpawnerTimeSeq" field.</summary>
    public const int CharacterSpawnerTimeSeqFieldNumber = 16;
    private static readonly pb::FieldCodec<global::shared.CharacterSpawnerConfig> _repeated_characterSpawnerTimeSeq_codec
        = pb::FieldCodec.ForMessage(130, global::shared.CharacterSpawnerConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.CharacterSpawnerConfig> characterSpawnerTimeSeq_ = new pbc::RepeatedField<global::shared.CharacterSpawnerConfig>();
    /// <summary>
    /// MUST Be configured by increasing "cutoffRdfFrameId"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.CharacterSpawnerConfig> CharacterSpawnerTimeSeq {
      get { return characterSpawnerTimeSeq_; }
    }

    /// <summary>Field number for the "pickableSpawnerTimeSeq" field.</summary>
    public const int PickableSpawnerTimeSeqFieldNumber = 17;
    private static readonly pb::FieldCodec<global::shared.PickableSpawnerConfig> _repeated_pickableSpawnerTimeSeq_codec
        = pb::FieldCodec.ForMessage(138, global::shared.PickableSpawnerConfig.Parser);
    private readonly pbc::RepeatedField<global::shared.PickableSpawnerConfig> pickableSpawnerTimeSeq_ = new pbc::RepeatedField<global::shared.PickableSpawnerConfig>();
    /// <summary>
    /// MUST Be configured by increasing "cutoffRdfFrameId"!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::shared.PickableSpawnerConfig> PickableSpawnerTimeSeq {
      get { return pickableSpawnerTimeSeq_; }
    }

    /// <summary>Field number for the "forceCtrlRdfCount" field.</summary>
    public const int ForceCtrlRdfCountFieldNumber = 18;
    private int forceCtrlRdfCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ForceCtrlRdfCount {
      get { return forceCtrlRdfCount_; }
      set {
        forceCtrlRdfCount_ = value;
      }
    }

    /// <summary>Field number for the "forceCtrlCmd" field.</summary>
    public const int ForceCtrlCmdFieldNumber = 19;
    private ulong forceCtrlCmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ForceCtrlCmd {
      get { return forceCtrlCmd_; }
      set {
        forceCtrlCmd_ = value;
      }
    }

    /// <summary>Field number for the "reloadCollidersInNewPhase" field.</summary>
    public const int ReloadCollidersInNewPhaseFieldNumber = 20;
    private bool reloadCollidersInNewPhase_;
    /// <summary>
    /// When set to "true", will (a.) remove all NPCs activated before current rdfId (b.) remove all traps/pickables/barriers whose collision boxes not fully contained in this trigger's box
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReloadCollidersInNewPhase {
      get { return reloadCollidersInNewPhase_; }
      set {
        reloadCollidersInNewPhase_ = value;
      }
    }

    /// <summary>Field number for the "storyPointId" field.</summary>
    public const int StoryPointIdFieldNumber = 1024;
    private int storyPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StoryPointId {
      get { return storyPointId_; }
      set {
        storyPointId_ = value;
      }
    }

    /// <summary>Field number for the "bgmId" field.</summary>
    public const int BgmIdFieldNumber = 1025;
    private int bgmId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BgmId {
      get { return bgmId_; }
      set {
        bgmId_ = value;
      }
    }

    /// <summary>Field number for the "bossSpeciesSet" field.</summary>
    public const int BossSpeciesSetFieldNumber = 1026;
    private static readonly pbc::MapField<uint, bool>.Codec _map_bossSpeciesSet_codec
        = new pbc::MapField<uint, bool>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForBool(16, false), 8210);
    private readonly pbc::MapField<uint, bool> bossSpeciesSet_ = new pbc::MapField<uint, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, bool> BossSpeciesSet {
      get { return bossSpeciesSet_; }
    }

    /// <summary>Field number for the "isBossSavepoint" field.</summary>
    public const int IsBossSavepointFieldNumber = 1027;
    private bool isBossSavepoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBossSavepoint {
      get { return isBossSavepoint_; }
      set {
        isBossSavepoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriggerConfigFromTiled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriggerConfigFromTiled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EditorId != other.EditorId) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (DelayedFrames != other.DelayedFrames) return false;
      if (RecoveryFrames != other.RecoveryFrames) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (SubCycleTriggerFrames != other.SubCycleTriggerFrames) return false;
      if (SubCycleQuota != other.SubCycleQuota) return false;
      if (QuotaCap != other.QuotaCap) return false;
      if(!subscribesToIdList_.Equals(other.subscribesToIdList_)) return false;
      if(!subscribesToExhaustedIdList_.Equals(other.subscribesToExhaustedIdList_)) return false;
      if (NewRevivalX != other.NewRevivalX) return false;
      if (NewRevivalY != other.NewRevivalY) return false;
      if (InitDirX != other.InitDirX) return false;
      if (InitDirY != other.InitDirY) return false;
      if (PublishingEvtMaskUponExhausted != other.PublishingEvtMaskUponExhausted) return false;
      if(!characterSpawnerTimeSeq_.Equals(other.characterSpawnerTimeSeq_)) return false;
      if(!pickableSpawnerTimeSeq_.Equals(other.pickableSpawnerTimeSeq_)) return false;
      if (ForceCtrlRdfCount != other.ForceCtrlRdfCount) return false;
      if (ForceCtrlCmd != other.ForceCtrlCmd) return false;
      if (ReloadCollidersInNewPhase != other.ReloadCollidersInNewPhase) return false;
      if (StoryPointId != other.StoryPointId) return false;
      if (BgmId != other.BgmId) return false;
      if (!BossSpeciesSet.Equals(other.BossSpeciesSet)) return false;
      if (IsBossSavepoint != other.IsBossSavepoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (EditorId != 0) hash ^= EditorId.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (DelayedFrames != 0) hash ^= DelayedFrames.GetHashCode();
      if (RecoveryFrames != 0) hash ^= RecoveryFrames.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (SubCycleTriggerFrames != 0) hash ^= SubCycleTriggerFrames.GetHashCode();
      if (SubCycleQuota != 0) hash ^= SubCycleQuota.GetHashCode();
      if (QuotaCap != 0) hash ^= QuotaCap.GetHashCode();
      hash ^= subscribesToIdList_.GetHashCode();
      hash ^= subscribesToExhaustedIdList_.GetHashCode();
      if (NewRevivalX != 0) hash ^= NewRevivalX.GetHashCode();
      if (NewRevivalY != 0) hash ^= NewRevivalY.GetHashCode();
      if (InitDirX != 0) hash ^= InitDirX.GetHashCode();
      if (InitDirY != 0) hash ^= InitDirY.GetHashCode();
      if (PublishingEvtMaskUponExhausted != 0UL) hash ^= PublishingEvtMaskUponExhausted.GetHashCode();
      hash ^= characterSpawnerTimeSeq_.GetHashCode();
      hash ^= pickableSpawnerTimeSeq_.GetHashCode();
      if (ForceCtrlRdfCount != 0) hash ^= ForceCtrlRdfCount.GetHashCode();
      if (ForceCtrlCmd != 0UL) hash ^= ForceCtrlCmd.GetHashCode();
      if (ReloadCollidersInNewPhase != false) hash ^= ReloadCollidersInNewPhase.GetHashCode();
      if (StoryPointId != 0) hash ^= StoryPointId.GetHashCode();
      if (BgmId != 0) hash ^= BgmId.GetHashCode();
      hash ^= BossSpeciesSet.GetHashCode();
      if (IsBossSavepoint != false) hash ^= IsBossSavepoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (DelayedFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFrames);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubCycleQuota);
      }
      if (QuotaCap != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(QuotaCap);
      }
      subscribesToIdList_.WriteTo(output, _repeated_subscribesToIdList_codec);
      subscribesToExhaustedIdList_.WriteTo(output, _repeated_subscribesToExhaustedIdList_codec);
      if (NewRevivalX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NewRevivalX);
      }
      if (NewRevivalY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NewRevivalY);
      }
      if (InitDirX != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InitDirX);
      }
      if (InitDirY != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(InitDirY);
      }
      if (PublishingEvtMaskUponExhausted != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PublishingEvtMaskUponExhausted);
      }
      characterSpawnerTimeSeq_.WriteTo(output, _repeated_characterSpawnerTimeSeq_codec);
      pickableSpawnerTimeSeq_.WriteTo(output, _repeated_pickableSpawnerTimeSeq_codec);
      if (ForceCtrlRdfCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ForceCtrlRdfCount);
      }
      if (ForceCtrlCmd != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(ForceCtrlCmd);
      }
      if (ReloadCollidersInNewPhase != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(ReloadCollidersInNewPhase);
      }
      if (StoryPointId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(StoryPointId);
      }
      if (BgmId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteInt32(BgmId);
      }
      bossSpeciesSet_.WriteTo(output, _map_bossSpeciesSet_codec);
      if (IsBossSavepoint != false) {
        output.WriteRawTag(152, 64);
        output.WriteBool(IsBossSavepoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpeciesId);
      }
      if (DelayedFrames != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryFrames);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SubCycleQuota);
      }
      if (QuotaCap != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(QuotaCap);
      }
      subscribesToIdList_.WriteTo(ref output, _repeated_subscribesToIdList_codec);
      subscribesToExhaustedIdList_.WriteTo(ref output, _repeated_subscribesToExhaustedIdList_codec);
      if (NewRevivalX != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NewRevivalX);
      }
      if (NewRevivalY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NewRevivalY);
      }
      if (InitDirX != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(InitDirX);
      }
      if (InitDirY != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(InitDirY);
      }
      if (PublishingEvtMaskUponExhausted != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PublishingEvtMaskUponExhausted);
      }
      characterSpawnerTimeSeq_.WriteTo(ref output, _repeated_characterSpawnerTimeSeq_codec);
      pickableSpawnerTimeSeq_.WriteTo(ref output, _repeated_pickableSpawnerTimeSeq_codec);
      if (ForceCtrlRdfCount != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(ForceCtrlRdfCount);
      }
      if (ForceCtrlCmd != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(ForceCtrlCmd);
      }
      if (ReloadCollidersInNewPhase != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(ReloadCollidersInNewPhase);
      }
      if (StoryPointId != 0) {
        output.WriteRawTag(128, 64);
        output.WriteInt32(StoryPointId);
      }
      if (BgmId != 0) {
        output.WriteRawTag(136, 64);
        output.WriteInt32(BgmId);
      }
      bossSpeciesSet_.WriteTo(ref output, _map_bossSpeciesSet_codec);
      if (IsBossSavepoint != false) {
        output.WriteRawTag(152, 64);
        output.WriteBool(IsBossSavepoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (EditorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EditorId);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeciesId);
      }
      if (DelayedFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayedFrames);
      }
      if (RecoveryFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryFrames);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (SubCycleTriggerFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleTriggerFrames);
      }
      if (SubCycleQuota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuota);
      }
      if (QuotaCap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuotaCap);
      }
      size += subscribesToIdList_.CalculateSize(_repeated_subscribesToIdList_codec);
      size += subscribesToExhaustedIdList_.CalculateSize(_repeated_subscribesToExhaustedIdList_codec);
      if (NewRevivalX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewRevivalX);
      }
      if (NewRevivalY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewRevivalY);
      }
      if (InitDirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitDirX);
      }
      if (InitDirY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InitDirY);
      }
      if (PublishingEvtMaskUponExhausted != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PublishingEvtMaskUponExhausted);
      }
      size += characterSpawnerTimeSeq_.CalculateSize(_repeated_characterSpawnerTimeSeq_codec);
      size += pickableSpawnerTimeSeq_.CalculateSize(_repeated_pickableSpawnerTimeSeq_codec);
      if (ForceCtrlRdfCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ForceCtrlRdfCount);
      }
      if (ForceCtrlCmd != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ForceCtrlCmd);
      }
      if (ReloadCollidersInNewPhase != false) {
        size += 2 + 1;
      }
      if (StoryPointId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StoryPointId);
      }
      if (BgmId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BgmId);
      }
      size += bossSpeciesSet_.CalculateSize(_map_bossSpeciesSet_codec);
      if (IsBossSavepoint != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriggerConfigFromTiled other) {
      if (other == null) {
        return;
      }
      if (other.EditorId != 0) {
        EditorId = other.EditorId;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.DelayedFrames != 0) {
        DelayedFrames = other.DelayedFrames;
      }
      if (other.RecoveryFrames != 0) {
        RecoveryFrames = other.RecoveryFrames;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.SubCycleTriggerFrames != 0) {
        SubCycleTriggerFrames = other.SubCycleTriggerFrames;
      }
      if (other.SubCycleQuota != 0) {
        SubCycleQuota = other.SubCycleQuota;
      }
      if (other.QuotaCap != 0) {
        QuotaCap = other.QuotaCap;
      }
      subscribesToIdList_.Add(other.subscribesToIdList_);
      subscribesToExhaustedIdList_.Add(other.subscribesToExhaustedIdList_);
      if (other.NewRevivalX != 0) {
        NewRevivalX = other.NewRevivalX;
      }
      if (other.NewRevivalY != 0) {
        NewRevivalY = other.NewRevivalY;
      }
      if (other.InitDirX != 0) {
        InitDirX = other.InitDirX;
      }
      if (other.InitDirY != 0) {
        InitDirY = other.InitDirY;
      }
      if (other.PublishingEvtMaskUponExhausted != 0UL) {
        PublishingEvtMaskUponExhausted = other.PublishingEvtMaskUponExhausted;
      }
      characterSpawnerTimeSeq_.Add(other.characterSpawnerTimeSeq_);
      pickableSpawnerTimeSeq_.Add(other.pickableSpawnerTimeSeq_);
      if (other.ForceCtrlRdfCount != 0) {
        ForceCtrlRdfCount = other.ForceCtrlRdfCount;
      }
      if (other.ForceCtrlCmd != 0UL) {
        ForceCtrlCmd = other.ForceCtrlCmd;
      }
      if (other.ReloadCollidersInNewPhase != false) {
        ReloadCollidersInNewPhase = other.ReloadCollidersInNewPhase;
      }
      if (other.StoryPointId != 0) {
        StoryPointId = other.StoryPointId;
      }
      if (other.BgmId != 0) {
        BgmId = other.BgmId;
      }
      bossSpeciesSet_.Add(other.bossSpeciesSet_);
      if (other.IsBossSavepoint != false) {
        IsBossSavepoint = other.IsBossSavepoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            DelayedFrames = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 48: {
            SubCycleTriggerFrames = input.ReadInt32();
            break;
          }
          case 56: {
            SubCycleQuota = input.ReadInt32();
            break;
          }
          case 64: {
            QuotaCap = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            subscribesToIdList_.AddEntriesFrom(input, _repeated_subscribesToIdList_codec);
            break;
          }
          case 82:
          case 80: {
            subscribesToExhaustedIdList_.AddEntriesFrom(input, _repeated_subscribesToExhaustedIdList_codec);
            break;
          }
          case 88: {
            NewRevivalX = input.ReadInt32();
            break;
          }
          case 96: {
            NewRevivalY = input.ReadInt32();
            break;
          }
          case 104: {
            InitDirX = input.ReadInt32();
            break;
          }
          case 112: {
            InitDirY = input.ReadInt32();
            break;
          }
          case 120: {
            PublishingEvtMaskUponExhausted = input.ReadUInt64();
            break;
          }
          case 130: {
            characterSpawnerTimeSeq_.AddEntriesFrom(input, _repeated_characterSpawnerTimeSeq_codec);
            break;
          }
          case 138: {
            pickableSpawnerTimeSeq_.AddEntriesFrom(input, _repeated_pickableSpawnerTimeSeq_codec);
            break;
          }
          case 144: {
            ForceCtrlRdfCount = input.ReadInt32();
            break;
          }
          case 152: {
            ForceCtrlCmd = input.ReadUInt64();
            break;
          }
          case 160: {
            ReloadCollidersInNewPhase = input.ReadBool();
            break;
          }
          case 8192: {
            StoryPointId = input.ReadInt32();
            break;
          }
          case 8200: {
            BgmId = input.ReadInt32();
            break;
          }
          case 8210: {
            bossSpeciesSet_.AddEntriesFrom(input, _map_bossSpeciesSet_codec);
            break;
          }
          case 8216: {
            IsBossSavepoint = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            SpeciesId = input.ReadInt32();
            break;
          }
          case 24: {
            DelayedFrames = input.ReadInt32();
            break;
          }
          case 32: {
            RecoveryFrames = input.ReadInt32();
            break;
          }
          case 40: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 48: {
            SubCycleTriggerFrames = input.ReadInt32();
            break;
          }
          case 56: {
            SubCycleQuota = input.ReadInt32();
            break;
          }
          case 64: {
            QuotaCap = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            subscribesToIdList_.AddEntriesFrom(ref input, _repeated_subscribesToIdList_codec);
            break;
          }
          case 82:
          case 80: {
            subscribesToExhaustedIdList_.AddEntriesFrom(ref input, _repeated_subscribesToExhaustedIdList_codec);
            break;
          }
          case 88: {
            NewRevivalX = input.ReadInt32();
            break;
          }
          case 96: {
            NewRevivalY = input.ReadInt32();
            break;
          }
          case 104: {
            InitDirX = input.ReadInt32();
            break;
          }
          case 112: {
            InitDirY = input.ReadInt32();
            break;
          }
          case 120: {
            PublishingEvtMaskUponExhausted = input.ReadUInt64();
            break;
          }
          case 130: {
            characterSpawnerTimeSeq_.AddEntriesFrom(ref input, _repeated_characterSpawnerTimeSeq_codec);
            break;
          }
          case 138: {
            pickableSpawnerTimeSeq_.AddEntriesFrom(ref input, _repeated_pickableSpawnerTimeSeq_codec);
            break;
          }
          case 144: {
            ForceCtrlRdfCount = input.ReadInt32();
            break;
          }
          case 152: {
            ForceCtrlCmd = input.ReadUInt64();
            break;
          }
          case 160: {
            ReloadCollidersInNewPhase = input.ReadBool();
            break;
          }
          case 8192: {
            StoryPointId = input.ReadInt32();
            break;
          }
          case 8200: {
            BgmId = input.ReadInt32();
            break;
          }
          case 8210: {
            bossSpeciesSet_.AddEntriesFrom(ref input, _map_bossSpeciesSet_codec);
            break;
          }
          case 8216: {
            IsBossSavepoint = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Trigger : pb::IMessage<Trigger>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trigger> _parser = new pb::MessageParser<Trigger>(() => new Trigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger(Trigger other) : this() {
      editorId_ = other.editorId_;
      triggerLocalId_ = other.triggerLocalId_;
      framesToFire_ = other.framesToFire_;
      framesToRecover_ = other.framesToRecover_;
      quota_ = other.quota_;
      bulletTeamId_ = other.bulletTeamId_;
      dirX_ = other.dirX_;
      subCycleQuotaLeft_ = other.subCycleQuotaLeft_;
      state_ = other.state_;
      framesInState_ = other.framesInState_;
      virtualGridX_ = other.virtualGridX_;
      virtualGridY_ = other.virtualGridY_;
      demandedEvtMask_ = other.demandedEvtMask_;
      fulfilledEvtMask_ = other.fulfilledEvtMask_;
      waveNpcKilledEvtMaskCounter_ = other.waveNpcKilledEvtMaskCounter_;
      subscriberLocalIdsMask_ = other.subscriberLocalIdsMask_;
      exhaustSubscriberLocalIdsMask_ = other.exhaustSubscriberLocalIdsMask_;
      offenderJoinIndex_ = other.offenderJoinIndex_;
      offenderBulletTeamId_ = other.offenderBulletTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trigger Clone() {
      return new Trigger(this);
    }

    /// <summary>Field number for the "editorId" field.</summary>
    public const int EditorIdFieldNumber = 1;
    private int editorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EditorId {
      get { return editorId_; }
      set {
        editorId_ = value;
      }
    }

    /// <summary>Field number for the "triggerLocalId" field.</summary>
    public const int TriggerLocalIdFieldNumber = 2;
    private int triggerLocalId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TriggerLocalId {
      get { return triggerLocalId_; }
      set {
        triggerLocalId_ = value;
      }
    }

    /// <summary>Field number for the "framesToFire" field.</summary>
    public const int FramesToFireFieldNumber = 3;
    private int framesToFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToFire {
      get { return framesToFire_; }
      set {
        framesToFire_ = value;
      }
    }

    /// <summary>Field number for the "framesToRecover" field.</summary>
    public const int FramesToRecoverFieldNumber = 4;
    private int framesToRecover_;
    /// <summary>
    /// if TRIGGER_MASK_BY_CYCLIC_TIMER, resets whenever "0 &lt; subCycleQuotaLeft" and itself becomes 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesToRecover {
      get { return framesToRecover_; }
      set {
        framesToRecover_ = value;
      }
    }

    /// <summary>Field number for the "quota" field.</summary>
    public const int QuotaFieldNumber = 5;
    private int quota_;
    /// <summary>
    /// the initial value is from static config, but decreases upon use 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quota {
      get { return quota_; }
      set {
        quota_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 6;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "dirX" field.</summary>
    public const int DirXFieldNumber = 7;
    private int dirX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DirX {
      get { return dirX_; }
      set {
        dirX_ = value;
      }
    }

    /// <summary>Field number for the "subCycleQuotaLeft" field.</summary>
    public const int SubCycleQuotaLeftFieldNumber = 9;
    private int subCycleQuotaLeft_;
    /// <summary>
    /// resets whenever "framesToRecover" becomes 0; for TRIGGER_MASK_BY_WAVE, this field is repurposed as the "remaining NPC count of current wave" 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubCycleQuotaLeft {
      get { return subCycleQuotaLeft_; }
      set {
        subCycleQuotaLeft_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private global::shared.TriggerState state_ = global::shared.TriggerState.Tready;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::shared.TriggerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "framesInState" field.</summary>
    public const int FramesInStateFieldNumber = 11;
    private int framesInState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FramesInState {
      get { return framesInState_; }
      set {
        framesInState_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridX" field.</summary>
    public const int VirtualGridXFieldNumber = 12;
    private int virtualGridX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridX {
      get { return virtualGridX_; }
      set {
        virtualGridX_ = value;
      }
    }

    /// <summary>Field number for the "virtualGridY" field.</summary>
    public const int VirtualGridYFieldNumber = 13;
    private int virtualGridY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VirtualGridY {
      get { return virtualGridY_; }
      set {
        virtualGridY_ = value;
      }
    }

    /// <summary>Field number for the "demandedEvtMask" field.</summary>
    public const int DemandedEvtMaskFieldNumber = 14;
    private ulong demandedEvtMask_;
    /// <summary>
    /// Even the "demandedEvtMask" changes with time/battle progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong DemandedEvtMask {
      get { return demandedEvtMask_; }
      set {
        demandedEvtMask_ = value;
      }
    }

    /// <summary>Field number for the "fulfilledEvtMask" field.</summary>
    public const int FulfilledEvtMaskFieldNumber = 15;
    private ulong fulfilledEvtMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FulfilledEvtMask {
      get { return fulfilledEvtMask_; }
      set {
        fulfilledEvtMask_ = value;
      }
    }

    /// <summary>Field number for the "waveNpcKilledEvtMaskCounter" field.</summary>
    public const int WaveNpcKilledEvtMaskCounterFieldNumber = 16;
    private ulong waveNpcKilledEvtMaskCounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong WaveNpcKilledEvtMaskCounter {
      get { return waveNpcKilledEvtMaskCounter_; }
      set {
        waveNpcKilledEvtMaskCounter_ = value;
      }
    }

    /// <summary>Field number for the "subscriberLocalIdsMask" field.</summary>
    public const int SubscriberLocalIdsMaskFieldNumber = 17;
    private ulong subscriberLocalIdsMask_;
    /// <summary>
    /// For fast reverse-referencing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SubscriberLocalIdsMask {
      get { return subscriberLocalIdsMask_; }
      set {
        subscriberLocalIdsMask_ = value;
      }
    }

    /// <summary>Field number for the "exhaustSubscriberLocalIdsMask" field.</summary>
    public const int ExhaustSubscriberLocalIdsMaskFieldNumber = 18;
    private ulong exhaustSubscriberLocalIdsMask_;
    /// <summary>
    /// For fast reverse-referencing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ExhaustSubscriberLocalIdsMask {
      get { return exhaustSubscriberLocalIdsMask_; }
      set {
        exhaustSubscriberLocalIdsMask_ = value;
      }
    }

    /// <summary>Field number for the "offenderJoinIndex" field.</summary>
    public const int OffenderJoinIndexFieldNumber = 19;
    private int offenderJoinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OffenderJoinIndex {
      get { return offenderJoinIndex_; }
      set {
        offenderJoinIndex_ = value;
      }
    }

    /// <summary>Field number for the "offenderBulletTeamId" field.</summary>
    public const int OffenderBulletTeamIdFieldNumber = 20;
    private int offenderBulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OffenderBulletTeamId {
      get { return offenderBulletTeamId_; }
      set {
        offenderBulletTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EditorId != other.EditorId) return false;
      if (TriggerLocalId != other.TriggerLocalId) return false;
      if (FramesToFire != other.FramesToFire) return false;
      if (FramesToRecover != other.FramesToRecover) return false;
      if (Quota != other.Quota) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (DirX != other.DirX) return false;
      if (SubCycleQuotaLeft != other.SubCycleQuotaLeft) return false;
      if (State != other.State) return false;
      if (FramesInState != other.FramesInState) return false;
      if (VirtualGridX != other.VirtualGridX) return false;
      if (VirtualGridY != other.VirtualGridY) return false;
      if (DemandedEvtMask != other.DemandedEvtMask) return false;
      if (FulfilledEvtMask != other.FulfilledEvtMask) return false;
      if (WaveNpcKilledEvtMaskCounter != other.WaveNpcKilledEvtMaskCounter) return false;
      if (SubscriberLocalIdsMask != other.SubscriberLocalIdsMask) return false;
      if (ExhaustSubscriberLocalIdsMask != other.ExhaustSubscriberLocalIdsMask) return false;
      if (OffenderJoinIndex != other.OffenderJoinIndex) return false;
      if (OffenderBulletTeamId != other.OffenderBulletTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (EditorId != 0) hash ^= EditorId.GetHashCode();
      if (TriggerLocalId != 0) hash ^= TriggerLocalId.GetHashCode();
      if (FramesToFire != 0) hash ^= FramesToFire.GetHashCode();
      if (FramesToRecover != 0) hash ^= FramesToRecover.GetHashCode();
      if (Quota != 0) hash ^= Quota.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (DirX != 0) hash ^= DirX.GetHashCode();
      if (SubCycleQuotaLeft != 0) hash ^= SubCycleQuotaLeft.GetHashCode();
      if (State != global::shared.TriggerState.Tready) hash ^= State.GetHashCode();
      if (FramesInState != 0) hash ^= FramesInState.GetHashCode();
      if (VirtualGridX != 0) hash ^= VirtualGridX.GetHashCode();
      if (VirtualGridY != 0) hash ^= VirtualGridY.GetHashCode();
      if (DemandedEvtMask != 0UL) hash ^= DemandedEvtMask.GetHashCode();
      if (FulfilledEvtMask != 0UL) hash ^= FulfilledEvtMask.GetHashCode();
      if (WaveNpcKilledEvtMaskCounter != 0UL) hash ^= WaveNpcKilledEvtMaskCounter.GetHashCode();
      if (SubscriberLocalIdsMask != 0UL) hash ^= SubscriberLocalIdsMask.GetHashCode();
      if (ExhaustSubscriberLocalIdsMask != 0UL) hash ^= ExhaustSubscriberLocalIdsMask.GetHashCode();
      if (OffenderJoinIndex != 0) hash ^= OffenderJoinIndex.GetHashCode();
      if (OffenderBulletTeamId != 0) hash ^= OffenderBulletTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (TriggerLocalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToFire);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FramesToRecover);
      }
      if (Quota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quota);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletTeamId);
      }
      if (DirX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DirX);
      }
      if (SubCycleQuotaLeft != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        output.WriteRawTag(80);
        output.WriteEnum((int) State);
      }
      if (FramesInState != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesInState);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VirtualGridY);
      }
      if (DemandedEvtMask != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(DemandedEvtMask);
      }
      if (FulfilledEvtMask != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(FulfilledEvtMask);
      }
      if (WaveNpcKilledEvtMaskCounter != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(WaveNpcKilledEvtMaskCounter);
      }
      if (SubscriberLocalIdsMask != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SubscriberLocalIdsMask);
      }
      if (ExhaustSubscriberLocalIdsMask != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(ExhaustSubscriberLocalIdsMask);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (OffenderBulletTeamId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OffenderBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EditorId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EditorId);
      }
      if (TriggerLocalId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FramesToFire);
      }
      if (FramesToRecover != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FramesToRecover);
      }
      if (Quota != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Quota);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BulletTeamId);
      }
      if (DirX != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DirX);
      }
      if (SubCycleQuotaLeft != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        output.WriteRawTag(80);
        output.WriteEnum((int) State);
      }
      if (FramesInState != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FramesInState);
      }
      if (VirtualGridX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VirtualGridY);
      }
      if (DemandedEvtMask != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(DemandedEvtMask);
      }
      if (FulfilledEvtMask != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(FulfilledEvtMask);
      }
      if (WaveNpcKilledEvtMaskCounter != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(WaveNpcKilledEvtMaskCounter);
      }
      if (SubscriberLocalIdsMask != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SubscriberLocalIdsMask);
      }
      if (ExhaustSubscriberLocalIdsMask != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(ExhaustSubscriberLocalIdsMask);
      }
      if (OffenderJoinIndex != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(OffenderJoinIndex);
      }
      if (OffenderBulletTeamId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(OffenderBulletTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (EditorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EditorId);
      }
      if (TriggerLocalId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerLocalId);
      }
      if (FramesToFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToFire);
      }
      if (FramesToRecover != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesToRecover);
      }
      if (Quota != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quota);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (DirX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DirX);
      }
      if (SubCycleQuotaLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCycleQuotaLeft);
      }
      if (State != global::shared.TriggerState.Tready) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (FramesInState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesInState);
      }
      if (VirtualGridX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridX);
      }
      if (VirtualGridY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualGridY);
      }
      if (DemandedEvtMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DemandedEvtMask);
      }
      if (FulfilledEvtMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FulfilledEvtMask);
      }
      if (WaveNpcKilledEvtMaskCounter != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(WaveNpcKilledEvtMaskCounter);
      }
      if (SubscriberLocalIdsMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SubscriberLocalIdsMask);
      }
      if (ExhaustSubscriberLocalIdsMask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ExhaustSubscriberLocalIdsMask);
      }
      if (OffenderJoinIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OffenderJoinIndex);
      }
      if (OffenderBulletTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OffenderBulletTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trigger other) {
      if (other == null) {
        return;
      }
      if (other.EditorId != 0) {
        EditorId = other.EditorId;
      }
      if (other.TriggerLocalId != 0) {
        TriggerLocalId = other.TriggerLocalId;
      }
      if (other.FramesToFire != 0) {
        FramesToFire = other.FramesToFire;
      }
      if (other.FramesToRecover != 0) {
        FramesToRecover = other.FramesToRecover;
      }
      if (other.Quota != 0) {
        Quota = other.Quota;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.DirX != 0) {
        DirX = other.DirX;
      }
      if (other.SubCycleQuotaLeft != 0) {
        SubCycleQuotaLeft = other.SubCycleQuotaLeft;
      }
      if (other.State != global::shared.TriggerState.Tready) {
        State = other.State;
      }
      if (other.FramesInState != 0) {
        FramesInState = other.FramesInState;
      }
      if (other.VirtualGridX != 0) {
        VirtualGridX = other.VirtualGridX;
      }
      if (other.VirtualGridY != 0) {
        VirtualGridY = other.VirtualGridY;
      }
      if (other.DemandedEvtMask != 0UL) {
        DemandedEvtMask = other.DemandedEvtMask;
      }
      if (other.FulfilledEvtMask != 0UL) {
        FulfilledEvtMask = other.FulfilledEvtMask;
      }
      if (other.WaveNpcKilledEvtMaskCounter != 0UL) {
        WaveNpcKilledEvtMaskCounter = other.WaveNpcKilledEvtMaskCounter;
      }
      if (other.SubscriberLocalIdsMask != 0UL) {
        SubscriberLocalIdsMask = other.SubscriberLocalIdsMask;
      }
      if (other.ExhaustSubscriberLocalIdsMask != 0UL) {
        ExhaustSubscriberLocalIdsMask = other.ExhaustSubscriberLocalIdsMask;
      }
      if (other.OffenderJoinIndex != 0) {
        OffenderJoinIndex = other.OffenderJoinIndex;
      }
      if (other.OffenderBulletTeamId != 0) {
        OffenderBulletTeamId = other.OffenderBulletTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToFire = input.ReadInt32();
            break;
          }
          case 32: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 40: {
            Quota = input.ReadInt32();
            break;
          }
          case 48: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 56: {
            DirX = input.ReadInt32();
            break;
          }
          case 72: {
            SubCycleQuotaLeft = input.ReadInt32();
            break;
          }
          case 80: {
            State = (global::shared.TriggerState) input.ReadEnum();
            break;
          }
          case 88: {
            FramesInState = input.ReadInt32();
            break;
          }
          case 96: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 104: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 112: {
            DemandedEvtMask = input.ReadUInt64();
            break;
          }
          case 120: {
            FulfilledEvtMask = input.ReadUInt64();
            break;
          }
          case 128: {
            WaveNpcKilledEvtMaskCounter = input.ReadUInt64();
            break;
          }
          case 136: {
            SubscriberLocalIdsMask = input.ReadUInt64();
            break;
          }
          case 144: {
            ExhaustSubscriberLocalIdsMask = input.ReadUInt64();
            break;
          }
          case 152: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 160: {
            OffenderBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EditorId = input.ReadInt32();
            break;
          }
          case 16: {
            TriggerLocalId = input.ReadInt32();
            break;
          }
          case 24: {
            FramesToFire = input.ReadInt32();
            break;
          }
          case 32: {
            FramesToRecover = input.ReadInt32();
            break;
          }
          case 40: {
            Quota = input.ReadInt32();
            break;
          }
          case 48: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 56: {
            DirX = input.ReadInt32();
            break;
          }
          case 72: {
            SubCycleQuotaLeft = input.ReadInt32();
            break;
          }
          case 80: {
            State = (global::shared.TriggerState) input.ReadEnum();
            break;
          }
          case 88: {
            FramesInState = input.ReadInt32();
            break;
          }
          case 96: {
            VirtualGridX = input.ReadInt32();
            break;
          }
          case 104: {
            VirtualGridY = input.ReadInt32();
            break;
          }
          case 112: {
            DemandedEvtMask = input.ReadUInt64();
            break;
          }
          case 120: {
            FulfilledEvtMask = input.ReadUInt64();
            break;
          }
          case 128: {
            WaveNpcKilledEvtMaskCounter = input.ReadUInt64();
            break;
          }
          case 136: {
            SubscriberLocalIdsMask = input.ReadUInt64();
            break;
          }
          case 144: {
            ExhaustSubscriberLocalIdsMask = input.ReadUInt64();
            break;
          }
          case 152: {
            OffenderJoinIndex = input.ReadInt32();
            break;
          }
          case 160: {
            OffenderBulletTeamId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerMetaInfo : pb::IMessage<PlayerMetaInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerMetaInfo> _parser = new pb::MessageParser<PlayerMetaInfo>(() => new PlayerMetaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlayerMetaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::shared.RoomDownsyncFrameReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerMetaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerMetaInfo(PlayerMetaInfo other) : this() {
      playerId_ = other.playerId_;
      joinIndex_ = other.joinIndex_;
      bulletTeamId_ = other.bulletTeamId_;
      speciesId_ = other.speciesId_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlayerMetaInfo Clone() {
      return new PlayerMetaInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinIndex" field.</summary>
    public const int JoinIndexFieldNumber = 2;
    private int joinIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JoinIndex {
      get { return joinIndex_; }
      set {
        joinIndex_ = value;
      }
    }

    /// <summary>Field number for the "bulletTeamId" field.</summary>
    public const int BulletTeamIdFieldNumber = 3;
    private int bulletTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletTeamId {
      get { return bulletTeamId_; }
      set {
        bulletTeamId_ = value;
      }
    }

    /// <summary>Field number for the "speciesId" field.</summary>
    public const int SpeciesIdFieldNumber = 4;
    private uint speciesId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpeciesId {
      get { return speciesId_; }
      set {
        speciesId_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 5;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlayerMetaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlayerMetaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (JoinIndex != other.JoinIndex) return false;
      if (BulletTeamId != other.BulletTeamId) return false;
      if (SpeciesId != other.SpeciesId) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (JoinIndex != 0) hash ^= JoinIndex.GetHashCode();
      if (BulletTeamId != 0) hash ^= BulletTeamId.GetHashCode();
      if (SpeciesId != 0) hash ^= SpeciesId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JoinIndex);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletTeamId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpeciesId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (JoinIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JoinIndex);
      }
      if (BulletTeamId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletTeamId);
      }
      if (SpeciesId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpeciesId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (JoinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinIndex);
      }
      if (BulletTeamId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletTeamId);
      }
      if (SpeciesId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpeciesId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlayerMetaInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.JoinIndex != 0) {
        JoinIndex = other.JoinIndex;
      }
      if (other.BulletTeamId != 0) {
        BulletTeamId = other.BulletTeamId;
      }
      if (other.SpeciesId != 0) {
        SpeciesId = other.SpeciesId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 24: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 32: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 16: {
            JoinIndex = input.ReadInt32();
            break;
          }
          case 24: {
            BulletTeamId = input.ReadInt32();
            break;
          }
          case 32: {
            SpeciesId = input.ReadUInt32();
            break;
          }
          case 40: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
