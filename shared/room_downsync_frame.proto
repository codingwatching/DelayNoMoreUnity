syntax = "proto3";

package shared;

// Providing "csharp_namespace" to force generating lowercase namespace, reference https://protobuf.dev/programming-guides/proto3/#packages 
option csharp_namespace = "shared";

enum BoxInterpolationType {
    UsePrev = 0; 
    Interpolate = 1;
}

message AuthResult {
    int32 retCode = 1;
    string uname = 2;
    string captcha = 3;
    int64 expiresAt = 4;
    string playerId = 5;
    string newAuthToken = 6;
}
/*
[WARNING] On the use of unsigned int.

RdfId (as well as all configured "frames"), xxxLocalId, skillHit offset and joinIndex will be used as array index which doesn't support "uint", just use 0 as their TERMINATING value to save bandwidth.

We should reduce runtime typecasting as much as possible!
*/
enum IfaceCat {
    // Sound effect basis
    EMPTY = 0; 
    FLESH = 1; 
    METAL = 2; 
    FLUID = 3;
    ROCK = 4; 
    GRASS = 5; 
    WOOD = 6; 
}

enum BulletState {
    StartUp = 0;
    Active = 1;
    Exploding = 2;
    Vanishing = 3;
}

enum CharacterState {
    Idle1 = 0;
    Walking = 1;
    TurnAround = 2;
    Atked1 = 3;
    InAirIdle1NoJump = 4;
    InAirIdle1ByJump = 5;
    InAirIdle2ByJump = 6;
    InAirIdle1ByWallJump = 7;
    InAirAtked1 = 8;

    BlownUp1 = 9;
    LayDown1 = 10;
    GetUp1 = 11;
    Dying = 12;

    Dashing = 13;
    Sliding = 14;

    Dimmed = 15; // Pre-activated state for evtsub-based NPC 
    TransformingInto = 16; // When at this state, the character has already completed transform, i.e. in new speciesId

    BackDashing = 17;
    InAirWalking = 18;

    TransformingIntoFromDeath = 19; // When at this state, the character has already completed transform, i.e. in new speciesId
    WalkStopping = 20;
    InAirWalkStopping = 21;

    Parried = 22;
    Awaking = 23;
    GroundDodged = 24;
    BackWalking = 25;

    OnWallIdle1 = 128; 

    CrouchIdle1 = 256; 
    CrouchAtk1 = 257; 
    CrouchWalking = 258; 
    CrouchAtked1 = 259;

    Def1 = 260;
    Def1Atked1 = 261;
    Def1Broken = 262;

    Atk1 = 1024;
    Atk2 = 1025;
    Atk3 = 1026;
    Atk4 = 1027;
    Atk5 = 1028;
    Atk6 = 1029;
    Atk7 = 1030;
    Atk7_Charging = 1031;
    Atk7_ChargeRelease = 1032;
    Atk8 = 1033;

    InAirAtk1 = 2048;
    InAirAtk2 = 2049;
    WalkingAtk1 = 2050;
    WalkingAtk4 = 2051;

    InAirAtk6 = 2052;

    OnWallAtk1 = 3072; 

    Idle1_Charging = 3073;
    WalkingAtk1_Charging = 3074;
    InAirAtk1_Charging = 3075;
    OnWallAtk1_Charging = 3076;
    CrouchAtk1_Charging = 3077;
}

enum NpcGoal {
    NIdle = 0;
    NFollowAlly = 1;
    NPatrol = 2;
    NHuntThenIdle = 3;
    NHuntThenPatrol = 4;
    NHuntThenFollowAlly = 5;
    NIdleIfGoHuntingThenPatrol = 6;
}

enum TrapState {
    TIdle = 0;
    TWalking = 1;
    TAtk1 = 2;
    TAtked1 = 3;
    TDeactivated = 4;
}

enum TriggerState {
    TReady = 0;
    TCoolingDown = 1;
}

enum PickableState {
    PIdle = 0;
    PDisappearing = 1;
    PConsumed = 2;
}

message CharacterDownsync {
    int32 id = 1;
    int32 virtualGridX = 2;
    int32 virtualGridY = 3;
    int32 dirX = 4;
    int32 dirY = 5;   
    int32 velX = 6;
    int32 velY = 7; // "velX" and "velY" is used to record the accumulated effect by inertia and accelerations (including gravity)
    int32 speed = 8; // this is the instantaneous scalar attribute of a character, different from but will be accounted in "velX" and "velY"
    uint32 speciesId = 9; // For evolution during battle
    int32 joinIndex = 10;

    int32 framesToRecover = 11;
    int32 framesCapturedByInertia = 12; 

    bool capturedByPatrolCue = 13;
    int32 framesInPatrolCue = 14;

    uint32 beatsCnt = 15;
    uint32 beatenCnt = 16;

    int32 hp = 17;
    int32 mp = 18;

    int32 btnBHoldingRdfCount = 19;

    CharacterState characterState = 22;
    int32 framesInChState = 23; // number of frames elapsed in the current character state   
    bool inAir = 24; // by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "inAir (prev -> curr)"  
    bool jumpTriggered = 25;

    bool onWall = 26; // like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "onWall (prev -> curr)"
    int32 onWallNormX = 27;
    int32 onWallNormY = 28;

    bool omitGravity = 29;
    bool omitSoftPushback = 30;

    int32 waivingPatrolCueId = 31;
    NpcGoal goalAsNpc = 32;

    int32 revivalVirtualGridX = 33;
    int32 revivalVirtualGridY = 34;
    int32 revivalDirX = 35;
    int32 revivalDirY = 36;

    bool onSlope = 37;

    int32 frictionVelX = 38; // Mostly from a dynamic trap
    bool forcedCrouching = 39; // like "inAir", it’s by design a standalone field only inferred by the collision result of "Step" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "forcedCrouching (prev -> curr)"

    bool slipJumpTriggered = 40;
    bool primarilyOnSlippableHardPushback = 41; // like "inAir", it’s by design a standalone field only inferred by the calc result of "Battle.Step" instead of "characterState"
    bool prevWasCrouching = 42;
    bool newBirth = 43;

    int32 framesInvinsible = 44;
    bool jumpStarted = 45;
    int32 framesToStartJump = 46;

    bool repelSoftPushback = 47;
    uint64 publishingEvtMaskUponKilled = 48;
    int32 publishingToTriggerLocalIdUponKilled = 49;

    int32 subscribesToTriggerLocalId = 50; 

    int32 jumpHoldingRdfCnt = 51;
    uint32 remainingAirJumpQuota = 52;
    uint32 remainingAirDashQuota = 53;

    uint32 killedToDropConsumableSpeciesId = 54;
    uint32 killedToDropBuffSpeciesId = 55;
    uint32 killedToDropPickupSkillId = 56;

    int32 frictionVelY = 57; // Mostly from a dynamic trap
    int32 framesSinceLastDamaged = 58;

    uint32 remainingDef1Quota = 59;

    uint32 comboHitCnt = 60;
    int32 comboFramesRemained = 61;
    uint32 damageElementalAttrs = 62; // Should be cleared whenever entering a non-attacked chState

    bool onSlopeFacingDown = 63;
    int32 lastDamagedByJoinIndex = 64;
    int32 lastDamagedByBulletTeamId = 65;
    
    int32 activatedRdfId = 66;
    uint64 cachedCueCmd = 67;

    uint32 activeSkillId = 68;
    int32 activeSkillHit = 69; // TODO: change to 1-based in code and uint32

    // Kindly note that "collisionTypeMask" is NOT GRANULAR ENOUGH for inter-character collision configuration, e.g. same team omission, thus we'd still need the fields "bulletTeamId" and "chCollisionTeamId" here
    int32 bulletTeamId = 70;
    int32 chCollisionTeamId = 71;

    int32 btnCHoldingRdfCount = 72;
    int32 btnDHoldingRdfCount = 73;
    int32 btnEHoldingRdfCount = 74;
    int32 parryPrepRdfCntDown = 75;
    int32 mpRegenRdfCountdown = 76;

    int32 flyingRdfCountdown = 77;

    int32 lockingOnJoinIndex = 78;

    repeated Buff buffList = 90; 
    repeated Debuff debuffList = 91; 

    Inventory inventory = 92;

    repeated BulletImmuneRecord bulletImmuneRecords = 93;

    repeated float kinematicKnobs = 94; // including both forward-kinematics and inverse-kinematics   
}

message InputFrameDecoded {
    int32 dx = 1;
    int32 dy = 2;
    int32 btnALevel = 3;
    int32 btnBLevel = 4;
    int32 btnCLevel = 5;
    int32 btnDLevel = 6;
    int32 btnELevel = 7;
}

message InputFrameUpsync {
    int32 inputFrameId = 1;
    uint64 encoded = 2;
    int32 joinIndex = 3;
}

message InputFrameDownsync {
    int32 inputFrameId = 1;
    repeated uint64 inputList = 2; // Indexed by "joinIndex", we try to compress the "single player input" into 1 word (64-bit for 64-bit Golang runtime) because atomic compare-and-swap only works on 1 word. Although CAS on custom struct is possible in C# https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=netstandard-2.1, using a single word is still faster whenever possible. 
    uint64 confirmedList = 3; // Indexed by "joinIndex", same compression concern as above
    uint64 udpConfirmedList = 4; // [WARNING] Only used by frontend, i.e. on backend this field can be always zero because backend sets "InputFrameDownsync.ConfirmedList" by UDP packets too while frontend shouldn't. 
}

message WsReq {
    string playerId = 1;
    int32 act = 2;
    int32 joinIndex = 3;
    int32 ackingFrameId = 4;
    int32 ackingInputFrameId = 5;
    int32 authKey = 6;
    repeated InputFrameUpsync inputFrameUpsyncBatch = 7;
    RoomDownsyncFrame selfParsedRdf = 8;
    int32 collisionSpaceHalfWidth = 9; 
    int32 collisionSpaceHalfHeight = 10; 
    int32 battleDurationSeconds = 11;
    repeated SerializableConvexPolygon serializedBarrierPolygons = 12;
    repeated SerializedCompletelyStaticPatrolCueCollider serializedStaticPatrolCues = 13;
    repeated SerializedCompletelyStaticTrapCollider serializedCompletelyStaticTraps = 14;
    repeated SerializedCompletelyStaticTriggerCollider serializedStaticTriggers = 15;
    SerializedTrapLocalIdToColliderAttrs serializedTrapLocalIdToColliderAttrs = 16; 
    SerializedTriggerEditorIdToLocalId serializedTriggerEditorIdToLocalId = 18;
    uint32 seqNo = 19;
}

message InputBufferSnapshot {
    int32 refRenderFrameId = 1;
    uint64 unconfirmedMask = 2;
    repeated InputFrameDownsync toSendInputFrameDownsyncs = 3;
    bool shouldForceResync = 4;
    int32 peerJoinIndex = 5;
}

message PatrolCue {
    int32  id = 1;
    uint64 flAct = 2; // "input when colliding from the left side"
    uint64 frAct = 3; // "input when colliding from the right side"
    int32 flCaptureFrames = 4;
    int32 frCaptureFrames = 5;

    uint64 fdAct = 6; // "input when colliding from the down side"
    uint64 fuAct = 7; // "input when colliding from the up side"
    int32 fdCaptureFrames = 8;
    int32 fuCaptureFrames = 9;

    uint64 collisionTypeMask = 1029; // [COLLISION_NPC_PATROL_CUE_INDEX_PREFIX, COLLISION_TRAP_PATROL_CUE_INDEX_PREFIX]
}

enum BulletType {
    Undetermined = 0;
    Melee = 1;
    Fireball = 2;
    GroundWave = 3;
    MissileLinear = 4;
    MissileQuadraticBezier = 5; // by default using "(ed-st)" rotated around "z-axis at st" toward upper y-axis and length 0.25*|ed-st| as an intermediate relay 
}

enum MultiHitType {
    /**
      [WARN] Multihit of a fireball (determined in turn by the "BulletType bType" field) is more difficult to handle than that of melee, because we have to count from the fireball's first hit; the situation becomes even more complicated when a multihit fireball is in a crowd -- remains to be designed

      Types of fireball multihit-singlebullet
      a. References the emission frame
      b. References the first hit only when actually hit
      c. References the first hit even if blocked
      d. References the prev hit only when actually hit
      e. References the prev hit even if blocked
     */
    None=0;
    FromEmission = 1;
    FromFirstHitActual = 2;
    FromFirstHitAnyway = 3;
    FromPrevHitActual = 4;
    FromPrevHitAnyway = 5;
    FromVisionSeekOrDefault = 6;
    FromPrevHitActualOrActiveTimeUp = 7;
    FromEmissionJustActive = 8;
}

enum SkillTriggerType {
    RisingEdge = 0;
    FallingEdge = 1;
}

enum VfxDurationType {
    OneOff = 0;
    Repeating = 1;
}

enum VfxMotionType {
    NoMotion = 0;
    Dropped = 1;
    Tracing = 2;
}

message VfxConfig {
    int32 speciesId = 1;
    VfxMotionType motionType = 2;
    VfxDurationType durationType = 3;
    bool onCharacter = 4;
    bool onBullet = 5;
    bool onTrap = 6;
    bool usePixelatedVer = 7;
    string name = 1024;
}

message BulletConfig {
    int32 startupFrames = 1;
    int32 cancellableStFrame = 2;
    int32 cancellableEdFrame = 3;
    int32 activeFrames = 4;

    int32 hitStunFrames = 5;
    int32 blockStunFrames = 6;
    int32 pushbackVelX = 7;
    int32 pushbackVelY = 8;
    int32 damage = 9;

    int32 selfLockVelX = 10;
    int32 selfLockVelY = 11;

    int32 hitboxOffsetX = 12;
    int32 hitboxOffsetY = 13;
    int32 hitboxSizeX = 14;
    int32 hitboxSizeY = 15;

    bool blowUp = 16;

    int32 speciesId = 17; // For fireball, this SpeciesId specifies both the active animation and the explosion animation (if "explosionSpeciesId" not explicitly assigned), for melee it specifies the explosion animation
    int32 explosionFrames = 18;

    BulletType bType = 19;
    MultiHitType mhType = 20;
    uint32 simultaneousMultiHitCnt = 21; // marks how many simultaneous bullets are left, default to 0 indicating that the current bullet is the only one to fire 

    int32 speed = 22; // For speed varying bullets, this is the initial speed
    int32 dirX = 23; // the initial direction indicator for X-axis
    int32 dirY = 24; // the initial direction indicator for Y-axis

    map<int32, uint32> cancelTransit = 25; // patternId -> skillId
    int32 repeatQuota = 26; // for long lasting bullet, applicable for "mhType == (FromPrevHitActual | FromPrevHitAnyway)"

    int32 activeVfxSpeciesId = 27; // currently only support 1 vfx config when active
    int32 explosionVfxSpeciesId = 28; // currently only support 1 vfx config when exploding

    bool allowsWalking = 29;
    bool allowsCrouching = 30;
    int32 hardness = 31;
    int32 startupInvinsibleFrames = 32;
    int32 hitInvinsibleFrames = 33;
    int32 explosionSpeciesId = 34;

    int32 perpAccMag = 35; // acceleration perpendicular to instantaneous velocity per frame

    bool delaySelfVelToActive = 36; // if true, "selfLockVelX" & "selfLockVelY" would only be applied when bullet is active 

    int32 speedIfNotHit = 37;
    bool omitSoftPushback = 38; // Only used for melee bullets

    int32 hitboxSizeIncX = 39; // Change of hitboxSizeX per frame
    int32 hitboxSizeIncY = 40; // Change of hitboxSizeY per frame

    bool remainsUponHit = 41; 
    bool rotatesAlongVelocity = 42;

    int32 defaultHardPushbackBounceQuota = 43;
    float hardPushbackBounceNormFactor = 44; // For attenuation
    float hardPushbackBounceSheerFactor = 45; // For attenuation

    bool isPixelatedActiveVfx = 46;
    bool isPixelatedExplostionVfx = 47;

    bool mhVanishOnMeleeHit = 48;
    int32 downSlopePrimerVelY = 49;

    bool mhUpdatesOriginPos = 50; // Default is false, multihit bullets will inherit (originatedVirtualGridX, originatedVirtualGridY) from the previous bullet
    bool beamCollision = 51; // If true, both collision & rendering of the bullet will respect (originatedVirtualGridX, originatedVirtualGridY) -> (virtualGridX, virtualGridY)

    float angularFrameVelCos = 52;
    float angularFrameVelSin = 53;

    int32 visionOffsetX = 54;
    int32 visionOffsetY = 55;
    int32 visionSizeX = 56;
    int32 visionSizeY = 57;

    int32 selfLockVelYWhenFlying = 58;

    uint32 elementalAttrs = 59;

    bool cancellableByInventorySlotC = 60;
    bool cancellableByInventorySlotD = 61;

    float spinAnchorX = 62; // collision space translation from the original anchor of unrotated polygon 
    float spinAnchorY = 63; // collision space translation from the original anchor of unrotated polygon

    int32 beamVisualSizeY = 64;

    bool touchExplosionBombCollision = 65;
    
    bool airRidingGroundWave = 66; // Only applicable to "bType == GroundWave"

    bool groundImpactMeleeCollision = 67; // Only applicable to "bType == Melee"
    bool wallImpactMeleeCollision = 68; // Only applicable to "bType == Melee"

    bool mhInheritsSpin = 69;
    float initSpinCos = 70;
    float initSpinSin = 71;

    int32 finishingFrames = 72; // Only applicable to "true == groundImpactMeleeCollision"
    bool noExplosionOnHardPushback = 73;

    int32 startupVfxSpeciesId = 74; // currently only support 1 vfx config when starting up

    IfaceCat ifc = 75;
    bool reflectFireballXIfNotHarder = 76;
    bool rejectsReflectionFromAnotherBullet = 77;

    bool providesXHardPushback = 78;
    bool providesYHardPushbackTop = 79;
    bool providesYHardPushbackBottom = 80;

    bool ignoreSlopeDeceleration = 81;
    bool rotateOffenderWithSpin = 82;
    bool mhNotTriggerOnChHit = 83;
    bool mhNotTriggerOnHarderBulletHit = 84;
    bool mhNotTriggerOnHardPushbackHit = 85;
    bool hopperMissile = 86;
    bool beamRendering = 87;
    uint32 missileSearchIntervalPow2Minus1 = 88;

    bool useChOffsetRegardlessOfEmissionMh = 89;

    int32 inplaceVanishExplosionSpeciesId = 90;

    int32 animLoopingRdfOffset = 91;  
    int32 explosionAnimLoopingRdfOffset = 92;  

    float gaugeIncReductionRatio = 93;
    bool mhInheritsFramesInBlState = 94;
    uint32 guardBreakerExtraHitCnt = 95;
        
    bool takesDef1AsHardPushback = 96; // [WARNING] Always implies "beamCollision" and must be used together with "beamCollision".

    uint64 collisionTypeMask = 1029;
    bool takesGravity = 1030; // e.g. a bomb, a ground-wave

    BuffConfig buffConfig = 1031;

    // Sfx configs
    string characterEmitSfxName = 2048;
    string fireballEmitSfxName = 2049;
    string explosionSfxName = 2050;
    string activeSfxName = 2051;
    string explosionOnFleshSfxName = 2052;
    string explosionOnRockSfxName = 2053;
    string explosionOnMetalSfxName = 2054;
    string explosionOnWoodSfxName = 2055;
}

message Bullet {
    // Jargon reference https://www.thegamer.com/fighting-games-frame-data-explained/
    // ALL lengths are in world coordinate
    BulletState blState = 1;
    int32 framesInBlState = 2;

    int32 bulletLocalId = 3;
    int32 originatedRenderFrameId = 4; // Copied from the first bullet for all subsequent bullets
    int32 offenderJoinIndex = 5; // Copied to favor collision handling of the dispatched bullet
    int32 offenderTrapLocalId = 6;
    int32 teamId = 7;

    int32 vertMovingTrapLocalIdUponActive = 8; // [WARNING] Currently we can use "trapLocalId" to directly access "RoomDownsyncFrame.trapsArr" just like "joinIndex" in "calcHardPushbacksNormsForCharacter" -- because memory in "RoomDownsyncFrame.trapsArr" is never truely reused when a trap is destroyed -- yet this approach should be avoided whenever possible; kindly note that even "joinIndex" can be reused for "RoomDownsyncFrame.npcsArr" by carefully tuning "_leftShiftDeadNpcs(...)"  

    int32 repeatQuotaLeft = 9;
    int32 remainingHardPushbackBounceQuota = 10;
    int32 targetCharacterJoinIndex = 11; // [WARNING] Assignment to this field MUST BE order-insensitive w.r.t. collider traversal order!
    int32 damageDealed = 12;
    IfaceCat explodedOnIfc = 13;

    int32 virtualGridX = 14;
    int32 virtualGridY = 15;
    int32 dirX = 16;
    int32 dirY = 17;
    int32 velX = 18;
    int32 velY = 19;

    int32 originatedVirtualGridX = 20;
    int32 originatedVirtualGridY = 21;

    /*
    [WARNING] 

    It's an informed decision to introduce floating numbers into a per-frame data structure. An alternative proposal which is by now deprecated is shown below.

    [DEPRECATED PROPOSAL] Take a bullet configured with constant spin angular velocity w.r.t. for example, the constant velocity can be stored as floats, and the "rotation of bullet at a renderFrame" can be encoded as "2 integers representing the approximated x & y alignment (Bullet.velX & Bullet.velY)", then calculate the next rdf orientation. The "only question left" is how to project 0 rotation rectangle collider to the orientation represented by 2 integers and a chosen anchor -- unfortunately this "only question left" is fatal because it requires inevitable "cosine (or sine)" calculation.
    */
    // Not using quaternion yet because this is a 2D game.
    float spinCos = 22; // To be used after applying "dirX (used for mirroring)"
    float spinSin = 23; // To be used after applying "dirX (used for mirroring)"

    int32 activeSkillHit = 24; // for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillHit" might've already been reset)
    uint32 skillId = 25; // for the convenience of selecting the correct next bullet for multihit fireball (where the offender's "activeSkillId" might've already been reset); also for reverse lookup in multihit transition, in the most extreme case, a same "BulletConfig" instance is to be shared across different "Skill"s, thus we put "skillId" in "BulletBattleAttr" instead.
}

message TrapConfig {
    int32 speciesId = 1;
    int32 explosionSpeciesId = 2; 
    int32 explosionFrames = 3;
    bool blowUp = 4;

    int32 damage = 5;
    int32 hitStunFrames = 6;
    int32 hitInvinsibleFrames = 7;
    bool deactivatable = 8;

    int32 hardness = 9;

    bool deactivateUponTriggered = 10;

    int32 constFrictionVelXTop = 11;
    int32 constFrictionVelXBottom = 12;
    int32 constFrictionVelYLeft = 13;
    int32 constFrictionVelYRight = 14;

    bool patrolCueRequiresFullContain = 15; // For accurate positioning

    /*
    [WARNING]

    For a single "Trap", all of its "TrapColliderAttrs" respect the shared spin anchor & angular velocity.
    */
    float spinAnchorX = 16; // collision space translation from the original anchor of unrotated polygon 
    float spinAnchorY = 17; // collision space translation from the original anchor of unrotated polygon

    float angularFrameVelCos = 18;
    float angularFrameVelSin = 19;

    float intrinsicSpinCos = 20;
    float intrinsicSpinSin = 21;

    bool atk1UponTriggered = 22;
    uint32 atk1SkillId = 23;
    bool isRotary = 24;
    bool noXFlipRendering = 25;

    // TODO: Instead of damage, a trap should also be able to provide pushbacks like a "trampoline" in only a limited "framesToRecover", possible started by a Trigger.

    string speciesName = 1024;
}

message TrapConfigFromTiled {
    /*
       By the time of writing, I am not yet very confident on what should be completely hardcoded constant in C# and what should be flexibly configured from Tiled Editor. 

       The simple mindset ruling here 
       - we couldn't make configurable items infinitely granular, at least not at this early stage of development
       - for a "completely static trap" (not moving & not changing appearance even if destroyed), both its appearance and hitbox can be drawn in Tiled Editor
       - for a "dynamic trap" (either moving or changing appearance anyway), both its appearance and hitbox can be drawn in Tiled TSX Editor, put onto an Object Layer in Tiled Editor for preview -- however the object on the Object Layer will be removed immediately and replaced by a Trap object in "RoomDownsyncFrame.trapsArr" for dynamic management    
     */
    int32 speciesId = 1; // Will be used for the "dynamic trap" to locate its Prefab for animating, and used for all types of traps to locate their explosion animations.
    int32 quota = 2;

    int32 speed = 3; // For speed varying bullets, this is the initial speed
    int32 dirX = 4; // the initial direction indicator for X-axis
    int32 dirY = 5; // the initial direction indicator for Y-axis

    int32 subscribesToId = 7; // [WARNING] This is a "trigger editor id", I don't want to overcomplicated the config of traps, use an additional Trigger to bridge complicated subscription combination between other triggers and a trap
    int32 subscribesToIdAfterInitialFire = 8; // [WARNING] For boss door only, couldn't coexist with "subscribesToIdAfterInitialFire" 
    int32 subscribesToIdAlt = 9; // [WARNING] For elevator only, couldn't coexist with "subscribesToIdAfterInitialFire"

    float boxCw = 10;
    float boxCh = 11;
    
    bool initNoAngularVel = 12;
}

message TrapColliderAttr {
    // In the case of a trap, it might own multiple hitboxes and each hitbox is drawn in Tiled and assigned after parsing the tmx file, thus not put in static config.
    int32 hitboxOffsetX = 1;
    int32 hitboxOffsetY = 2;
    int32 hitboxSizeX = 3;
    int32 hitboxSizeY = 4;
    bool providesHardPushback = 5;
    bool providesDamage = 6;
    bool providesEscape = 7;
    bool providesSlipJump = 8;
    bool prohibitsWallGrabbing = 9;
    bool forcesCrouching = 10;
    int32 speciesId = 11; // Redundancy for referencing "TrapConfig"
    int32 onlyAllowsAlignedVelX = 12;
    int32 onlyAllowsAlignedVelY = 13;

    bool asPatrolCue = 14;
    PatrolCue tcPc = 15;

    int32 trapLocalId = 1024; // ref-back upon collision, for damage handling, hardPushback moving and effPushbacks recording (if the trap provides softPushback)
    uint64 collisionTypeMask = 1029;
}

/*
   What distinguished "Trap" and "Npc(typed CharacterDownsync)" is that a "Trap" often has much simpler skillset, vision/patrol reaction -- yet more complicated boundaries and hard/soft pushback config.
 */
message Trap {
    int32 trapLocalId = 1; // [WARNING] Used to look up proper "List<TrapColliderAttr>" which is configured in Tiled Editor and remained static during the whole battle!
    int32 patrolCueAngularVelFlipMark = 2;
    TrapConfigFromTiled configFromTiled = 3;

    TrapState trapState = 4;
    int32 framesInTrapState = 5;
    /*
       [WARNING] Here "virtualGridX" and "virtualGridY" denotes the point in virtual grid for local (0, 0) of a trap, then each "colliderAttr" carries "hitboxOffsetX", "hitboxOffsetY", "hitboxSizeX" and "hitboxSizeY" also in virtual grid!

       It's bit embarrassing that in Tiled Editor
       - if we draw a rectangle in an Object Layer by the rectangle tool, its local (0, 0) is the bottom-left corner, but
       - if we put an image object in an Object Layer, its local (0, 0) is the upper-left corner

       such a frustrating default so we'll use a uniformed local (0, 0) -- the center of rectangle.
     */
    bool isCompletelyStatic = 6;
    bool capturedByPatrolCue = 7;
    int32 framesInPatrolCue = 8;
    int32 waivingPatrolCueId = 9;
    bool waivingSpontaneousPatrol = 10;
    
    int32 subscribesToTriggerLocalId = 11;
    int32 subscribesToTriggerLocalIdAlt = 12;

    float spinCos = 13; // To be used after applying "dirX (used for mirroring)"
    float spinSin = 14; // To be used after applying "dirX (used for mirroring)"

    float angularFrameVelCos = 15;
    float angularFrameVelSin = 16;

    int32 virtualGridX = 17; 
    int32 virtualGridY = 18;
    int32 dirX = 19;
    int32 dirY = 20;
    int32 velX = 21;
    int32 velY = 22;
}

enum TriggerType {
    TtNone = 0;
    TtTrivial = 1; // Just by "demandedEvtMask == fulfilledEvtMask" without any other timer or collision requirement 
    TtCyclicTimed = 2;
    TtIndiWave = 3;
    TtSyncWave = 4;
    TtMovement = 5;
    TtAttack = 6;
}

message TriggerConfig {
    int32 speciesId = 1;
    string speciesName = 2; 
    TriggerType triggerType = 3;
    /*
       :repeats "quota" times
       |<-------------------------------------- recoveryFrames ----------------------------->|<-----------------recoveryFrames ---------->|.......
       :repeats "subCycleQuota" times                                                        :repeats "subCycleQuota" times
       |<-delayedFrames->|<-subCycleTriggerFrames->|<-subCycleTriggerFrames->|<-subCycleTriggerFrames->|       |.......
       |TReady           |TCoolingDown             |TCoolingDown(replay)     |TCoolingDown(replay)     |TReady |.......
     */
    uint64 collisionTypeMask = 4; // of this trigger
}

message PeerUdpAddr {
    string ip = 1;
    int32 port = 2;
    int32 authKey = 3;
    uint32 seqNo = 4;
}

message BattleColliderInfo {
    string stageName = 1;

    int32 boundRoomId = 2;
    int64 battleDurationFrames = 3;
    int32 inputFrameUpsyncDelayTolerance = 4;
    int32 maxChasingRenderFramesPerUpdate = 5;
    double rollbackEstimatedDtMillis = 6;
    int64 rollbackEstimatedDtNanos = 7;

    int32 renderBufferSize = 8;
    int32 collisionMinStep = 9;
    int32 boundRoomCapacity = 10;
    int32 preallocNpcCapacity = 11;
    int32 preallocBulletCapacity = 12;

    PeerUdpAddr battleUdpTunnel = 1024;
    bool frameLogEnabled = 1025;
}

message RoomDownsyncFrame {
    int32 id = 1;
    repeated CharacterDownsync playersArr = 2;
    int64 countdownNanos = 3;
    repeated Bullet bullets = 4;  

    repeated CharacterDownsync npcsArr = 5;
    repeated Trap trapsArr = 6;
    repeated Trigger triggersArr = 7;

    repeated Pickable pickables = 10;  

    uint64 backendUnconfirmedMask = 1024; // Indexed by "joinIndex", same compression concern as stated in InputFrameDownsync
    bool shouldForceResync = 1025;
    repeated int32 speciesIdList = 1026;

    int32 bulletLocalIdCounter = 1027;
    int32 npcLocalIdCounter = 1028;

    int32 participantChangeId = 1029;

    int32 pickableLocalIdCounter = 1030;
}

message WsResp {
    int32 ret = 1;
    int32 act = 2;
    RoomDownsyncFrame rdf = 3;
    repeated InputFrameDownsync inputFrameDownsyncBatch = 4;
    BattleColliderInfo bciFrame = 5;
    int32 peerJoinIndex = 6;
    repeated PeerUdpAddr peerUdpAddrList = 7;

    string errMsg = 2048;
}

message Skill {
    int32 battleLocalId = 1;
    int32 recoveryFrames = 2;
    int32 recoveryFramesOnBlock = 3; 
    int32 recoveryFramesOnHit = 4; 
    SkillTriggerType triggerType = 5;
    CharacterState boundChState = 6;
    CharacterState boundChStateOnHit = 7; // [WARNING] Only applicable to Melee. When transitting from "boundChState" to "boundChStateOnHit", keep "framesInChState" but "framesToRecover += (recoveryFramesOnHit - recoveryFrames)".
    int32 mpDelta = 8; // Usually used as "mp consumption"
    uint32 id = 9;

    repeated BulletConfig hits = 1024; // Hits within a "Skill" are automatically triggered
    BuffConfig selfNonStockBuff = 1025;
}

message FrameLog {
    RoomDownsyncFrame rdf = 1;
    InputFrameDownsync actuallyUsedIdf = 2;
}

message BattleResult {
    int32 winnerJoinIndex = 1;
    int32 winnerBulletTeamId = 2;
}

enum BuffStockType {
    NoneBf = 0;
    Timed = 1; // Would be calculated in number of renderFrames, not actual time in seconds or milliseconds
    Quota = 2;
}

enum DebuffType {
    NoneDbf = 0;
    SpeedDownOnly = 1;
    ColdSpeedDown = 2;
    PositionLockedOnly = 3;
    FrozenPositionLocked = 4;
}

message DebuffConfig {
    uint32 speciesId = 1;
    BuffStockType stockType = 2;
    int32 stock = 3;
    DebuffType type = 4;
    int32 arrIdx = 5;
    int32 impactPerInterval = 6;
    int32 impactInterval = 7;
    int32 frictionVelX = 8;
    int32 frictionVelY = 9;

    // "Acc" here means "acceleration"
    int32 frictionAccX = 10;
    int32 frictionAccY = 11;
}

message BuffConfig {
    uint32 speciesId = 1;
    BuffStockType stockType = 2;
    int32 stock = 3;
    int32 speedDelta = 4;
    int32 hitboxSizeXDelta = 5;
    int32 hitboxSizeYDelta = 6;
    /* 
       It's not trivial to handle damage after the following sequence
       1. Pick up damageDelta=+10 for 600 frames
       2. Pick up damageDeltaByPercentage=+10% for 600 frames
       3. Buff "damageDelta=+10" expires 
       4. Buff "damageDeltaByPercentage=+10%" expires

       Pick a deterministic way :)
     */
    int32 damageDelta = 7;
    int32 damageDeltaByPercentage = 8;
    int32 characterHardnessDelta = 9;
    int32 meleeHardnessDelta = 10;
    int32 fireballHardnessDelta = 11;
    bool invinsible = 12;
    uint32 xformChSpeciesId = 13;
    bool repelSoftPushback = 14;
    bool omitGravity = 15;
    bool autoDef1 = 16;

    // [WARNING] The following field previously had type "repeated DebuffConfig" and the reason given was "to reduce the count of heap-RAM access when stepping battle dynamics", it was not a bad reason yet such complicated type imposed a heavy burden on serialization/deserialization of "RoomDownsyncFrame" which would be used frequently when we use "backend forceResync" for "active slow ticker" or "recovery upon reconnection". See "ConcerningEdgeCases.md" for details.
    repeated uint32 associatedDebuffs = 17;   

    int32 characterVfxSpeciesId = 18;
    bool isPixelatedVfxOnCharacter = 19;
}

message Buff {
    uint32 speciesId = 1; 
    int32 stock = 2;
    int32 originatedRenderFrameId = 3;
    uint32 origChSpeciesId = 4;
    bool origRepelSoftPushback = 5;
    bool origOmitGravity = 6;
}

message Debuff {
    uint32 speciesId = 1; // A redundancy of "debuffConfig" for easy termination detection 
    int32 stock = 2;
}

message BulletImmuneRecord {
    int32 bulletLocalId = 1;
    int32 remainingLifetimeRdfCount = 2;
} 

enum ConsumableType {
    NoneCsmb = 0;
    Refill = 1;
    DbfRcv = 2; // Debuff recovery
}

message ConsumableConfig {
    uint32 speciesId = 1; 
    int32 refillDelta = 2;
    int32 vfxIdOnPicker = 3;
    bool isPixelatedVfxOnPicker = 4;
};

message PickableSkillConfig {
    uint32 skillId = 1; 
    int32 vfxIdOnPicker = 2;
    bool isPixelatedVfxOnPicker = 3;
};

enum InventorySlotStockType {
    NoneIv = 0;
    DummyIv = 1; // For "slot D", just skip everything for this type
    PocketIv = 2; // For "slot D", reserved for pickables
    TimedIv = 3; // Reusable after cooldown
    QuotaIv = 4;
    TimedMagazineIv = 5; // Has certain quotas before required to cooldown
    GaugedMagazineIv = 6;
    GaugedTimedMagazineIv = 7; // NOT IMPLEMENTED!  
}

message InventorySlot {
    InventorySlotStockType stockType = 1;
    uint32 quota = 2; 
    int32 framesToRecover = 3; 
    uint32 defaultQuota = 4;
    int32 defaultFramesToRecover = 5;
    uint32 buffSpeciesId = 6;
    uint32 skillId = 7;
    uint32 skillIdAir = 8;
    int32 gaugeCharged = 9;
    int32 gaugeRequired = 10;
    uint32 fullChargeBuffSpeciesId = 11;
    uint32 fullChargeSkillId = 12;
}

message Inventory {
    repeated InventorySlot slots = 1;
}

message BattleEquipment {
    // Unlike "InventorySlot", "BattleEquipment" has no varying state during a battle
    uint32 speciesId = 1;
}

message PlayerSettings {
    int32 soundVolume = 1;
}

message PlayerRegionProgress {
    int32 regionId = 1;
    int32 completedLevelCount = 2;

    // Any region can be in a state of "partially unlocked"
    map<int32, bool> remainingDependencies = 3;
    map<int32, bool> removedDependencies = 4;
}

message PlayerLevelProgress {
    int32 regionId = 1;
    int32 levelId = 2;

    int32 highestScore = 3;
    int32 shortestFinishTimeAtHighestScore = 4;
    uint32 characterSpeciesIdAtHighestScore = 5;

    int32 shortestFinishTime = 6;
    int32 scoreAtShortestFinishTime = 7;
    uint32 characterSpeciesIdAtShortestFinishTime = 8;

    // Any level can be in a state of "partially unlocked", if a record exists in "PlayerStoryProgress.levelProgressDict" with non-empty "remainingDependencies", then it's locked but visible
    map<int32, bool> remainingDependencies = 9;
    map<int32, bool> removedDependencies = 10;
}

enum PlayerStoryModeSelectView {
    NONE = 0;
    REGION = 1;
    LEVEL = 2;
}

enum FinishedLvOption {
    BOSS_ONLY = 0;
    STORY_AND_BOSS = 1;
}

message PlayerStoryProgress {
    map<int32, PlayerRegionProgress> regionProgressDict = 1; // Including just unlocked regions with 0 progress
    map<int32, PlayerLevelProgress> levelProgressDict = 2; // Including just unlocked levels with 0 progress 

    int32 cursorRegionId = 3;
    int32 cursorLevelId = 4;

    PlayerStoryModeSelectView view = 5;
    uint64 savedAtGmtMillis = 6;

    map<uint32, bool> unlockedPlayableCharacters = 7;

    // For config of all regions and levels (including unlock criterions), see "<proj-root>/frontend/Assets/Scripts/StoryConstants.cs"
}

message StoryPointDialogLine {
    // [WARNING] Only one of "narratorJoinIndex" and "narratorSpeciesId" should be available for each "StoryPointDialogLine".
    int32 narratorJoinIndex = 1;
    uint32 narratorSpeciesId = 2;

    string content = 3;
    bool downOrNot = 4; // true is "down"
}

message StoryPointStep {
    repeated StoryPointDialogLine lines = 1;
    int32 nonctrlAliveRdfCount = 2;
}

message StoryPoint {
    repeated StoryPointStep steps = 1;
    bool nonctrl = 2; // not taking over control if true
    string cutsceneName = 3; // null for no cut scene
}

message LevelStory {
    map<int32, StoryPoint> points = 1;
}

message SerializableConvexPolygon {
    float anchorX = 1;
    float anchorY = 2;
    repeated float points = 3;
}

message SerializedCompletelyStaticPatrolCueCollider {
    PatrolCue attr = 1; // "collisionTypeMask" is contained here
    SerializableConvexPolygon polygon = 2;
}

message SerializedCompletelyStaticTrapCollider {
    TrapColliderAttr attr = 1; // "TrapColliderAttr.collisionTypeMask" is a little peculiar, it can be a composite of different COLLISION_*_INDEX_PREFIX, thus often NOT taken care of by the COLLIDABLE_PAIRS set 
    SerializableConvexPolygon polygon = 2;
}

message SerializedCompletelyStaticTriggerCollider {
    TriggerColliderAttr attr = 1; // "collisionTypeMask" can be derived from here
    SerializableConvexPolygon polygon = 2;
}

message TrapColliderAttrArray {
    repeated TrapColliderAttr list = 1;
}

message SerializedTrapLocalIdToColliderAttrs {
    map<int32, TrapColliderAttrArray> dict = 1;
}

message SerializedTriggerEditorIdToLocalId {
    map<int32, int32> dict = 1;
    map<int32, TriggerConfigFromTiled> dict2 = 2;
}

enum PickupType {
    Immediate = 0;
    PutIntoInventory = 1; 
}

message PickableConfigFromTiled {
    int32 initVirtualGridX = 1;
    int32 initVirtualGridY = 2;
    bool takesGravity = 3; 
    int32 firstShowRdfId = 4; // If "MAGIC_EVTSUB_ID_NONE != subscriptionId", then this field represents the "firstShowRdfId" after subscriptionId is fulfilled
    int32 recurQuota = 5;
    uint32 recurIntervalRdfCount = 6;
    uint32 lifetimeRdfCountPerOccurrence = 7;
    PickupType pickupType = 8;
    uint32 stockQuotaPerOccurrence = 9; // Only meaningful when "pickupType == PutIntoInventory"
    int32 subscriptionId = 10;
    int32 vfxSpeciesId = 11; // Always use pixelated vfx

    uint32 consumableSpeciesId = 1024; 
    uint32 buffSpeciesId = 1025;
    uint32 skillId= 1026;
}

message Pickable {
    int32 pickableLocalId = 1;
    int32 virtualGridX = 2;
    int32 virtualGridY = 3;
    PickableConfigFromTiled configFromTiled = 4; 
    int32 remainingLifetimeRdfCount = 5; 
    int32 remainingRecurQuota = 6;
    int32 velX = 7;
    int32 velY = 8;
    PickableState pkState = 9;    
    int32 framesInPkState = 10;    
    int32 pickedByJoinIndex = 11;
}

message CharacterSpawnerConfig {
    int32 cutoffRdfFrameId = 1;
    repeated uint32 speciesIdList = 2; // the k-th subcycle tick corresponds to speciesIdList[k]   
    repeated uint64 initOpList = 3;    
}

message PickableSpawnerConfig {
    int32 cutoffRdfFrameId = 1;
    repeated uint32 speciesIdList = 2; // the k-th subcycle tick corresponds to speciesIdList[k]   
    repeated uint64 initOpList = 3;    
    repeated PickupType pickupTypeList = 4;    
}

message TriggerColliderAttr {
    int32 triggerLocalId = 1; // ref-back upon collision, most (actually by now ALL) triggers are static, we use this "TriggerColliderAttr.triggerLocalId" to save the need of dynamically inserting and deleting colliders of each trigger while still being able to be rollback-compatible for "trigger.framesToFire & trigger.framesToRecover"!
    int32 speciesId = 2;
}

message TriggerConfigFromTiled {
    int32 editorId = 1;
    int32 speciesId = 2;
    int32 delayedFrames = 3;  
    int32 recoveryFrames = 4;
    int32 bulletTeamId = 5; 

    int32 subCycleTriggerFrames = 6;
    int32 subCycleQuota = 7;

    int32 quotaCap = 8;

    repeated int32 subscribesToIdList = 9;
    repeated int32 subscribesToExhaustedIdList = 10;

    int32 newRevivalX = 11; // [WARNING] In virtual grid coordinates
    int32 newRevivalY = 12; // [WARNING] In virtual grid coordinates
    int32 initDirX = 13;
    int32 initDirY = 14;

    uint64 publishingEvtMaskUponExhausted = 15; 

    repeated CharacterSpawnerConfig characterSpawnerTimeSeq = 16; // MUST Be configured by increasing "cutoffRdfFrameId"!
    repeated PickableSpawnerConfig pickableSpawnerTimeSeq = 17; // MUST Be configured by increasing "cutoffRdfFrameId"!

    int32 forceCtrlRdfCount = 18;
    uint64 forceCtrlCmd = 19;

    bool reloadCollidersInNewPhase = 20; // When set to "true", will (a.) remove all NPCs activated before current rdfId (b.) remove all traps/pickables/barriers whose collision boxes not fully contained in this trigger's box

    int32 storyPointId = 1024;
    int32 bgmId = 1025;
    map<uint32, bool> bossSpeciesSet = 1026;   
    bool isBossSavepoint = 1027; 
}

message Trigger {
    int32 editorId = 1;
    int32 triggerLocalId = 2;
    int32 framesToFire = 3; 
    int32 framesToRecover = 4; // if TRIGGER_MASK_BY_CYCLIC_TIMER, resets whenever "0 < subCycleQuotaLeft" and itself becomes 0
    int32 quota = 5; // the initial value is from static config, but decreases upon use 
    int32 bulletTeamId = 6; 

    int32 dirX = 7;

    int32 subCycleQuotaLeft = 9; // resets whenever "framesToRecover" becomes 0; for TRIGGER_MASK_BY_WAVE, this field is repurposed as the "remaining NPC count of current wave" 

    TriggerState state = 10; 
    int32 framesInState = 11; 

    int32 virtualGridX = 12;
    int32 virtualGridY = 13;

    uint64 demandedEvtMask = 14; // Even the "demandedEvtMask" changes with time/battle progress
    uint64 fulfilledEvtMask = 15;
    uint64 waveNpcKilledEvtMaskCounter = 16;

    uint64 subscriberLocalIdsMask = 17; // For fast reverse-referencing
    uint64 exhaustSubscriberLocalIdsMask = 18; // For fast reverse-referencing

    int32 offenderJoinIndex = 19; 
    int32 offenderBulletTeamId = 20; 
}

message PlayerMetaInfo {
    string playerId = 1;
    int32 joinIndex = 2; 
    int32 bulletTeamId = 3;
    uint32 speciesId = 4;
    int32 roomId = 5;
}
